
MPU6050_Matlab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b360  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800b530  0800b530  0001b530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5d8  0800b5d8  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5d8  0800b5d8  0001b5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5e0  0800b5e0  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5e0  0800b5e0  0001b5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5e4  0800b5e4  0001b5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  0800b5e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cfc  2000015c  0800b744  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e58  0800b744  00021e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b071  00000000  00000000  000201cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040bf  00000000  00000000  0003b240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  0003f300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000102b  00000000  00000000  00040818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288ea  00000000  00000000  00041843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d60c  00000000  00000000  0006a12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee897  00000000  00000000  00087739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c84  00000000  00000000  00175fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0017bc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000015c 	.word	0x2000015c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b518 	.word	0x0800b518

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000160 	.word	0x20000160
 800020c:	0800b518 	.word	0x0800b518

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005ce:	f001 fcff 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005da:	f001 fcf9 	bl	8001fd0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	2300      	movs	r3, #0
 80005e2:	2201      	movs	r2, #1
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <ILI9163_writeCommand+0x48>)
 80005e6:	f005 f9cc 	bl	8005982 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <ILI9163_writeCommand+0x44>)
 80005f2:	f001 fced 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020400 	.word	0x40020400
 8000604:	200001cc 	.word	0x200001cc

08000608 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <ILI9163_writeData+0x44>)
 800061a:	f001 fcd9 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <ILI9163_writeData+0x44>)
 8000626:	f001 fcd3 	bl	8001fd0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 800062a:	1df9      	adds	r1, r7, #7
 800062c:	2300      	movs	r3, #0
 800062e:	2201      	movs	r2, #1
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <ILI9163_writeData+0x48>)
 8000632:	f005 f9a6 	bl	8005982 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <ILI9163_writeData+0x44>)
 800063e:	f001 fcc7 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40020400 	.word	0x40020400
 8000650:	200001cc 	.word	0x200001cc

08000654 <ILI9163_reset>:

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
}

void ILI9163_reset(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065e:	4808      	ldr	r0, [pc, #32]	; (8000680 <ILI9163_reset+0x2c>)
 8000660:	f001 fcb6 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000664:	2032      	movs	r0, #50	; 0x32
 8000666:	f000 fee7 	bl	8001438 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <ILI9163_reset+0x2c>)
 8000672:	f001 fcad 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000676:	2064      	movs	r0, #100	; 0x64
 8000678:	f000 fede 	bl	8001438 <HAL_Delay>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40020c00 	.word	0x40020c00

08000684 <ILI9163_init>:

void ILI9163_init(int rotation) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000692:	486e      	ldr	r0, [pc, #440]	; (800084c <ILI9163_init+0x1c8>)
 8000694:	f001 fc9c 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069e:	486c      	ldr	r0, [pc, #432]	; (8000850 <ILI9163_init+0x1cc>)
 80006a0:	f001 fc96 	bl	8001fd0 <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 80006a4:	f7ff ffd6 	bl	8000654 <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 80006a8:	2011      	movs	r0, #17
 80006aa:	f7ff ff87 	bl	80005bc <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 80006ae:	2005      	movs	r0, #5
 80006b0:	f000 fec2 	bl	8001438 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 80006b4:	203a      	movs	r0, #58	; 0x3a
 80006b6:	f7ff ff81 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 80006ba:	2005      	movs	r0, #5
 80006bc:	f7ff ffa4 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 80006c0:	2026      	movs	r0, #38	; 0x26
 80006c2:	f7ff ff7b 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 80006c6:	2004      	movs	r0, #4
 80006c8:	f7ff ff9e 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 80006cc:	20f2      	movs	r0, #242	; 0xf2
 80006ce:	f7ff ff75 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff ff98 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 80006d8:	20e0      	movs	r0, #224	; 0xe0
 80006da:	f7ff ff6f 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 80006de:	203f      	movs	r0, #63	; 0x3f
 80006e0:	f7ff ff92 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 80006e4:	2025      	movs	r0, #37	; 0x25
 80006e6:	f7ff ff8f 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 80006ea:	201c      	movs	r0, #28
 80006ec:	f7ff ff8c 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 80006f0:	201e      	movs	r0, #30
 80006f2:	f7ff ff89 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80006f6:	2020      	movs	r0, #32
 80006f8:	f7ff ff86 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 80006fc:	2012      	movs	r0, #18
 80006fe:	f7ff ff83 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 8000702:	202a      	movs	r0, #42	; 0x2a
 8000704:	f7ff ff80 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 8000708:	2090      	movs	r0, #144	; 0x90
 800070a:	f7ff ff7d 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 800070e:	2024      	movs	r0, #36	; 0x24
 8000710:	f7ff ff7a 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 8000714:	2011      	movs	r0, #17
 8000716:	f7ff ff77 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff ff74 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff ff71 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff ff6e 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff ff6b 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000732:	2000      	movs	r0, #0
 8000734:	f7ff ff68 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 8000738:	20e1      	movs	r0, #225	; 0xe1
 800073a:	f7ff ff3f 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 800073e:	2020      	movs	r0, #32
 8000740:	f7ff ff62 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8000744:	2020      	movs	r0, #32
 8000746:	f7ff ff5f 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800074a:	2020      	movs	r0, #32
 800074c:	f7ff ff5c 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8000750:	2020      	movs	r0, #32
 8000752:	f7ff ff59 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 8000756:	2005      	movs	r0, #5
 8000758:	f7ff ff56 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ff53 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 8000762:	2015      	movs	r0, #21
 8000764:	f7ff ff50 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 8000768:	20a7      	movs	r0, #167	; 0xa7
 800076a:	f7ff ff4d 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 800076e:	203d      	movs	r0, #61	; 0x3d
 8000770:	f7ff ff4a 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 8000774:	2018      	movs	r0, #24
 8000776:	f7ff ff47 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800077a:	2025      	movs	r0, #37	; 0x25
 800077c:	f7ff ff44 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 8000780:	202a      	movs	r0, #42	; 0x2a
 8000782:	f7ff ff41 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8000786:	202b      	movs	r0, #43	; 0x2b
 8000788:	f7ff ff3e 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 800078c:	202b      	movs	r0, #43	; 0x2b
 800078e:	f7ff ff3b 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 8000792:	203a      	movs	r0, #58	; 0x3a
 8000794:	f7ff ff38 	bl	8000608 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 8000798:	20b1      	movs	r0, #177	; 0xb1
 800079a:	f7ff ff0f 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800079e:	2008      	movs	r0, #8
 80007a0:	f7ff ff32 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80007a4:	2002      	movs	r0, #2
 80007a6:	f7ff ff2f 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 80007aa:	20b2      	movs	r0, #178	; 0xb2
 80007ac:	f7ff ff06 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 80007b0:	2008      	movs	r0, #8
 80007b2:	f7ff ff29 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80007b6:	2002      	movs	r0, #2
 80007b8:	f7ff ff26 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 80007bc:	20b3      	movs	r0, #179	; 0xb3
 80007be:	f7ff fefd 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 80007c2:	2008      	movs	r0, #8
 80007c4:	f7ff ff20 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80007c8:	2002      	movs	r0, #2
 80007ca:	f7ff ff1d 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 80007ce:	20b4      	movs	r0, #180	; 0xb4
 80007d0:	f7ff fef4 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 80007d4:	2007      	movs	r0, #7
 80007d6:	f7ff ff17 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 80007da:	202a      	movs	r0, #42	; 0x2a
 80007dc:	f7ff feee 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff11 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff ff0e 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff ff0b 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 80007f2:	207f      	movs	r0, #127	; 0x7f
 80007f4:	f7ff ff08 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80007f8:	202b      	movs	r0, #43	; 0x2b
 80007fa:	f7ff fedf 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff ff02 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000804:	2000      	movs	r0, #0
 8000806:	f7ff feff 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff fefc 	bl	8000608 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 8000810:	209f      	movs	r0, #159	; 0x9f
 8000812:	f7ff fef9 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 8000816:	2036      	movs	r0, #54	; 0x36
 8000818:	f7ff fed0 	bl	80005bc <ILI9163_writeCommand>
	if(rotation)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d003      	beq.n	800082a <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 8000822:	20a8      	movs	r0, #168	; 0xa8
 8000824:	f7ff fef0 	bl	8000608 <ILI9163_writeData>
 8000828:	e002      	b.n	8000830 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 800082a:	2068      	movs	r0, #104	; 0x68
 800082c:	f7ff feec 	bl	8000608 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 8000830:	2013      	movs	r0, #19
 8000832:	f7ff fec3 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 8000836:	2029      	movs	r0, #41	; 0x29
 8000838:	f7ff fec0 	bl	80005bc <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 800083c:	202c      	movs	r0, #44	; 0x2c
 800083e:	f7ff febd 	bl	80005bc <ILI9163_writeCommand>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40020400 	.word	0x40020400
 8000850:	40020c00 	.word	0x40020c00

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b09c      	sub	sp, #112	; 0x70
 8000858:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f000 fd90 	bl	800137e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f84f 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f000 f981 	bl	8000b68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000866:	f000 f961 	bl	8000b2c <MX_DMA_Init>
  MX_I2C2_Init();
 800086a:	f000 f8b1 	bl	80009d0 <MX_I2C2_Init>
  MX_SPI1_Init();
 800086e:	f000 f8ef 	bl	8000a50 <MX_SPI1_Init>
  MX_UART4_Init();
 8000872:	f000 f92b 	bl	8000acc <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 8000876:	f009 fc05 	bl	800a084 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  // Function to initialize the MPU-6050 for interrupts
  MPU6050_InitForInterrupts(&hi2c2);
 800087a:	481a      	ldr	r0, [pc, #104]	; (80008e4 <main+0x90>)
 800087c:	f000 fa86 	bl	8000d8c <MPU6050_InitForInterrupts>
  ILI9163_init(0);
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff feff 	bl	8000684 <ILI9163_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	      readGyroData(&hi2c2, &gyroX, &gyroY, &gyroZ);
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <main+0x94>)
 8000888:	4a18      	ldr	r2, [pc, #96]	; (80008ec <main+0x98>)
 800088a:	4919      	ldr	r1, [pc, #100]	; (80008f0 <main+0x9c>)
 800088c:	4815      	ldr	r0, [pc, #84]	; (80008e4 <main+0x90>)
 800088e:	f000 fad9 	bl	8000e44 <readGyroData>

	          char str_buffer[100];  // Made the buffer bigger just in case

	          // Format gyro data into a comma-separated list
	          sprintf(str_buffer, "[%d,%d,%d]\n", gyroX, gyroY, gyroZ);
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <main+0x9c>)
 8000894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000898:	461a      	mov	r2, r3
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <main+0x98>)
 800089c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a0:	4619      	mov	r1, r3
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <main+0x94>)
 80008a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a8:	1d38      	adds	r0, r7, #4
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	460b      	mov	r3, r1
 80008ae:	4911      	ldr	r1, [pc, #68]	; (80008f4 <main+0xa0>)
 80008b0:	f00a fa3a 	bl	800ad28 <siprintf>

	          // Transmit the formatted string over CDC
	          CDC_Transmit_FS((uint8_t*)str_buffer, strlen(str_buffer));
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fcaa 	bl	8000210 <strlen>
 80008bc:	4602      	mov	r2, r0
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f009 fc9c 	bl	800a200 <CDC_Transmit_FS>

		          HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // Toggle the GPIO pin state
 80008c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008cc:	480a      	ldr	r0, [pc, #40]	; (80008f8 <main+0xa4>)
 80008ce:	f001 fb98 	bl	8002002 <HAL_GPIO_TogglePin>
		          HAL_Delay(1000); // Delay for 1000 milliseconds
 80008d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d6:	f000 fdaf 	bl	8001438 <HAL_Delay>


		          dataReady = 0;  // Reset the flag
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <main+0xa8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
  {
 80008e0:	e7d1      	b.n	8000886 <main+0x32>
 80008e2:	bf00      	nop
 80008e4:	20000178 	.word	0x20000178
 80008e8:	2000031e 	.word	0x2000031e
 80008ec:	2000031c 	.word	0x2000031c
 80008f0:	2000031a 	.word	0x2000031a
 80008f4:	0800b530 	.word	0x0800b530
 80008f8:	40020400 	.word	0x40020400
 80008fc:	20000318 	.word	0x20000318

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b094      	sub	sp, #80	; 0x50
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	2230      	movs	r2, #48	; 0x30
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f00a fa2a 	bl	800ad68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000924:	f003 feb8 	bl	8004698 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <SystemClock_Config+0xc8>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	4a26      	ldr	r2, [pc, #152]	; (80009c8 <SystemClock_Config+0xc8>)
 800092e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000932:	6413      	str	r3, [r2, #64]	; 0x40
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <SystemClock_Config+0xc8>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000940:	4b22      	ldr	r3, [pc, #136]	; (80009cc <SystemClock_Config+0xcc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000948:	4a20      	ldr	r2, [pc, #128]	; (80009cc <SystemClock_Config+0xcc>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <SystemClock_Config+0xcc>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000960:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000966:	2302      	movs	r3, #2
 8000968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800096a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000970:	2304      	movs	r3, #4
 8000972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000974:	2348      	movs	r3, #72	; 0x48
 8000976:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000978:	2302      	movs	r3, #2
 800097a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800097c:	2303      	movs	r3, #3
 800097e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fe97 	bl	80046b8 <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000990:	f000 f9f6 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000994:	230f      	movs	r3, #15
 8000996:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000998:	2302      	movs	r3, #2
 800099a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2102      	movs	r1, #2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f004 f925 	bl	8004c00 <HAL_RCC_ClockConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009bc:	f000 f9e0 	bl	8000d80 <Error_Handler>
  }
}
 80009c0:	bf00      	nop
 80009c2:	3750      	adds	r7, #80	; 0x50
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40007000 	.word	0x40007000

080009d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_I2C2_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <MX_I2C2_Init+0x7c>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C2_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a0c:	f001 fb38 	bl	8002080 <HAL_I2C_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 f9b3 	bl	8000d80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a1e:	f002 faeb 	bl	8002ff8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 f9aa 	bl	8000d80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_I2C2_Init+0x74>)
 8000a30:	f002 fb2d 	bl	800308e <HAL_I2CEx_ConfigDigitalFilter>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 f9a1 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000178 	.word	0x20000178
 8000a48:	40005800 	.word	0x40005800
 8000a4c:	00808cd2 	.word	0x00808cd2

08000a50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a56:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <MX_SPI1_Init+0x78>)
 8000a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a86:	2208      	movs	r2, #8
 8000a88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_SPI1_Init+0x74>)
 8000ab0:	f004 febc 	bl	800582c <HAL_SPI_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000aba:	f000 f961 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200001cc 	.word	0x200001cc
 8000ac8:	40013000 	.word	0x40013000

08000acc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_UART4_Init+0x58>)
 8000ad2:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <MX_UART4_Init+0x5c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_UART4_Init+0x58>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_UART4_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_UART4_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_UART4_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_UART4_Init+0x58>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_UART4_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_UART4_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_UART4_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_UART4_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_UART4_Init+0x58>)
 8000b10:	f005 fa2e 	bl	8005f70 <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000b1a:	f000 f931 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000290 	.word	0x20000290
 8000b28:	40004c00 	.word	0x40004c00

08000b2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_DMA_Init+0x38>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <MX_DMA_Init+0x38>)
 8000b38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_DMA_Init+0x38>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	203b      	movs	r0, #59	; 0x3b
 8000b50:	f000 fd71 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b54:	203b      	movs	r0, #59	; 0x3b
 8000b56:	f000 fd8a 	bl	800166e <HAL_NVIC_EnableIRQ>

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b7a      	ldr	r3, [pc, #488]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a79      	ldr	r2, [pc, #484]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b77      	ldr	r3, [pc, #476]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	4b74      	ldr	r3, [pc, #464]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a73      	ldr	r2, [pc, #460]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b71      	ldr	r3, [pc, #452]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bae:	4b6e      	ldr	r3, [pc, #440]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a6d      	ldr	r2, [pc, #436]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b6b      	ldr	r3, [pc, #428]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b68      	ldr	r3, [pc, #416]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a67      	ldr	r2, [pc, #412]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b65      	ldr	r3, [pc, #404]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b62      	ldr	r3, [pc, #392]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a61      	ldr	r2, [pc, #388]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b5f      	ldr	r3, [pc, #380]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf6:	4b5c      	ldr	r3, [pc, #368]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a5b      	ldr	r2, [pc, #364]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b59      	ldr	r3, [pc, #356]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0e:	4b56      	ldr	r3, [pc, #344]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a55      	ldr	r2, [pc, #340]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000c14:	f043 0308 	orr.w	r3, r3, #8
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b53      	ldr	r3, [pc, #332]	; (8000d68 <MX_GPIO_Init+0x200>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 8000c26:	2200      	movs	r2, #0
 8000c28:	f244 3181 	movw	r1, #17281	; 0x4381
 8000c2c:	484f      	ldr	r0, [pc, #316]	; (8000d6c <MX_GPIO_Init+0x204>)
 8000c2e:	f001 f9cf 	bl	8001fd0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	484e      	ldr	r0, [pc, #312]	; (8000d70 <MX_GPIO_Init+0x208>)
 8000c38:	f001 f9ca 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c3c:	2332      	movs	r3, #50	; 0x32
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4847      	ldr	r0, [pc, #284]	; (8000d74 <MX_GPIO_Init+0x20c>)
 8000c58:	f001 f80e 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000c5c:	2306      	movs	r3, #6
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4840      	ldr	r0, [pc, #256]	; (8000d78 <MX_GPIO_Init+0x210>)
 8000c78:	f000 fffe 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 8000c7c:	f244 3381 	movw	r3, #17281	; 0x4381
 8000c80:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4835      	ldr	r0, [pc, #212]	; (8000d6c <MX_GPIO_Init+0x204>)
 8000c96:	f000 ffef 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4830      	ldr	r0, [pc, #192]	; (8000d70 <MX_GPIO_Init+0x208>)
 8000cb0:	f000 ffe2 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc6:	230b      	movs	r3, #11
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4826      	ldr	r0, [pc, #152]	; (8000d6c <MX_GPIO_Init+0x204>)
 8000cd2:	f000 ffd1 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4822      	ldr	r0, [pc, #136]	; (8000d7c <MX_GPIO_Init+0x214>)
 8000cf4:	f000 ffc0 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4818      	ldr	r0, [pc, #96]	; (8000d70 <MX_GPIO_Init+0x208>)
 8000d10:	f000 ffb2 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4812      	ldr	r0, [pc, #72]	; (8000d70 <MX_GPIO_Init+0x208>)
 8000d28:	f000 ffa6 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3e:	230b      	movs	r3, #11
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <MX_GPIO_Init+0x208>)
 8000d4a:	f000 ff95 	bl	8001c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	2006      	movs	r0, #6
 8000d54:	f000 fc6f 	bl	8001636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d58:	2006      	movs	r0, #6
 8000d5a:	f000 fc88 	bl	800166e <HAL_NVIC_EnableIRQ>
//    	      	  		  	  HAL_Delay(1000); // Delay for 1000 milliseconds
//      }
//  }

/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5e:	bf00      	nop
 8000d60:	3730      	adds	r7, #48	; 0x30
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	40021800 	.word	0x40021800
 8000d74:	40020800 	.word	0x40020800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020c00 	.word	0x40020c00

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <MPU6050_InitForInterrupts>:
    int16_t z;
} GyroData;


void MPU6050_InitForInterrupts(I2C_HandleTypeDef *hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af04      	add	r7, sp, #16
 8000d92:	6078      	str	r0, [r7, #4]
	uint8_t fata = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(hi2c, MPU6050_I2C_ADDRESS, 0x6B, 1,&fata, 1, 1000);
 8000d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9c:	9302      	str	r3, [sp, #8]
 8000d9e:	2301      	movs	r3, #1
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	f107 030f 	add.w	r3, r7, #15
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2301      	movs	r3, #1
 8000daa:	226b      	movs	r2, #107	; 0x6b
 8000dac:	21d0      	movs	r1, #208	; 0xd0
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f001 fbe0 	bl	8002574 <HAL_I2C_Mem_Write>
    uint8_t data[2];
    uint8_t readback = 0;  // Variable to store read back value
 8000db4:	2300      	movs	r3, #0
 8000db6:	72fb      	strb	r3, [r7, #11]

    // Set DATA_RDY_EN bit in Interrupt Enable Register
    data[0] = MPU6050_INT_ENABLE_REG;  // Register address
 8000db8:	2338      	movs	r3, #56	; 0x38
 8000dba:	733b      	strb	r3, [r7, #12]
    data[1] = 0x11;  // Bit 0 set to '1' for DATA_RDY_EN
 8000dbc:	2311      	movs	r3, #17
 8000dbe:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, MPU6050_I2C_ADDRESS, data, 2, HAL_MAX_DELAY);
 8000dc0:	f107 020c 	add.w	r2, r7, #12
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2302      	movs	r3, #2
 8000dcc:	21d0      	movs	r1, #208	; 0xd0
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f001 f9e6 	bl	80021a0 <HAL_I2C_Master_Transmit>

    // Configure the INT pin behavior in INT_PIN_CFG register
    data[0] = 0x37;  // INT_PIN_CFG register address
 8000dd4:	2337      	movs	r3, #55	; 0x37
 8000dd6:	733b      	strb	r3, [r7, #12]
    data[1] = 0x20;  // Set LATCH_INT_EN, and leave other bits as default
 8000dd8:	2320      	movs	r3, #32
 8000dda:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(hi2c, MPU6050_I2C_ADDRESS, data, 2, HAL_MAX_DELAY);
 8000ddc:	f107 020c 	add.w	r2, r7, #12
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2302      	movs	r3, #2
 8000de8:	21d0      	movs	r1, #208	; 0xd0
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f001 f9d8 	bl	80021a0 <HAL_I2C_Master_Transmit>

    // Read back the register value
    HAL_I2C_Master_Transmit(hi2c, MPU6050_I2C_ADDRESS, &data[0], 1, HAL_MAX_DELAY);  // Send register address
 8000df0:	f107 020c 	add.w	r2, r7, #12
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	21d0      	movs	r1, #208	; 0xd0
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f001 f9ce 	bl	80021a0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(hi2c, MPU6050_I2C_ADDRESS, &readback, 1, HAL_MAX_DELAY);  // Receive data from register
 8000e04:	f107 020b 	add.w	r2, r7, #11
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	21d0      	movs	r1, #208	; 0xd0
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f001 fab8 	bl	8002388 <HAL_I2C_Master_Receive>

    // Compare the read back value with the written value
    if (readback == data[1])
 8000e18:	7b7a      	ldrb	r2, [r7, #13]
 8000e1a:	7afb      	ldrb	r3, [r7, #11]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d10b      	bne.n	8000e38 <MPU6050_InitForInterrupts+0xac>
    {
        // Blink blue LED to indicate success
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Assuming GPIOB, GPIO_PIN_7 is the blue LED pin
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <MPU6050_InitForInterrupts+0xb4>)
 8000e24:	f001 f8ed 	bl	8002002 <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 8000e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e2c:	f000 fb04 	bl	8001438 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);  // Turn off the LED
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <MPU6050_InitForInterrupts+0xb4>)
 8000e34:	f001 f8e5 	bl	8002002 <HAL_GPIO_TogglePin>
    }
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40020400 	.word	0x40020400

08000e44 <readGyroData>:



void readGyroData(I2C_HandleTypeDef *hi2c, int16_t* x, int16_t* y, int16_t* z) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af04      	add	r7, sp, #16
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
 8000e50:	603b      	str	r3, [r7, #0]

    uint8_t rawData[6];


    // Read GYRO_XOUT_H and GYRO_XOUT_L
    HAL_I2C_Mem_Read(hi2c, MPU6050_I2C_ADDRESS, GYRO_XOUT_H, 1, &rawData[0], 2, HAL_MAX_DELAY);
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	2302      	movs	r3, #2
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2301      	movs	r3, #1
 8000e64:	2243      	movs	r2, #67	; 0x43
 8000e66:	21d0      	movs	r1, #208	; 0xd0
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f001 fc97 	bl	800279c <HAL_I2C_Mem_Read>
    *x = (int16_t)( (rawData[0] << 8) | rawData[1] );
 8000e6e:	7c3b      	ldrb	r3, [r7, #16]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	b21a      	sxth	r2, r3
 8000e74:	7c7b      	ldrb	r3, [r7, #17]
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	801a      	strh	r2, [r3, #0]

    // Read GYRO_YOUT_H and GYRO_YOUT_L
    HAL_I2C_Mem_Read(hi2c, MPU6050_I2C_ADDRESS, GYRO_YOUT_H, 1, &rawData[2], 2, HAL_MAX_DELAY);
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	2302      	movs	r3, #2
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	3302      	adds	r3, #2
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2301      	movs	r3, #1
 8000e94:	2245      	movs	r2, #69	; 0x45
 8000e96:	21d0      	movs	r1, #208	; 0xd0
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f001 fc7f 	bl	800279c <HAL_I2C_Mem_Read>
    *y = (int16_t)( (rawData[2] << 8) | rawData[3] );
 8000e9e:	7cbb      	ldrb	r3, [r7, #18]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	7cfb      	ldrb	r3, [r7, #19]
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b21a      	sxth	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	801a      	strh	r2, [r3, #0]

    // Read GYRO_ZOUT_H and GYRO_ZOUT_L
    HAL_I2C_Mem_Read(hi2c, MPU6050_I2C_ADDRESS, GYRO_ZOUT_H, 1, &rawData[4], 2, HAL_MAX_DELAY);
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	2247      	movs	r2, #71	; 0x47
 8000ec6:	21d0      	movs	r1, #208	; 0xd0
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f001 fc67 	bl	800279c <HAL_I2C_Mem_Read>
    *z = (int16_t)( (rawData[4] << 8) | rawData[5] );
 8000ece:	7d3b      	ldrb	r3, [r7, #20]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	7d7b      	ldrb	r3, [r7, #21]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	801a      	strh	r2, [r3, #0]

    // Apply Moving Average Filter (if needed, you can adapt this part for each axis)
    // ... [your moving average filter code here, if needed for Y and Z]
return;
 8000ee0:	bf00      	nop
}
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_MspInit+0x44>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_MspInit+0x44>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_MspInit+0x44>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_MspInit+0x44>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_MspInit+0x44>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_MspInit+0x44>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0aa      	sub	sp, #168	; 0xa8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2284      	movs	r2, #132	; 0x84
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f009 ff09 	bl	800ad68 <memset>
  if(hi2c->Instance==I2C2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <HAL_I2C_MspInit+0xb0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d13b      	bne.n	8000fd8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f004 f86c 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f7a:	f7ff ff01 	bl	8000d80 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a18      	ldr	r2, [pc, #96]	; (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0320 	and.w	r3, r3, #32
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fb4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <HAL_I2C_MspInit+0xb8>)
 8000fbc:	f000 fe5c 	bl	8001c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000fc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fca:	6413      	str	r3, [r2, #64]	; 0x40
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_I2C_MspInit+0xb4>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fd8:	bf00      	nop
 8000fda:	37a8      	adds	r7, #168	; 0xa8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40005800 	.word	0x40005800
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40021400 	.word	0x40021400

08000fec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a33      	ldr	r2, [pc, #204]	; (80010d8 <HAL_SPI_MspInit+0xec>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d160      	bne.n	80010d0 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800100e:	4b33      	ldr	r3, [pc, #204]	; (80010dc <HAL_SPI_MspInit+0xf0>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	4a32      	ldr	r2, [pc, #200]	; (80010dc <HAL_SPI_MspInit+0xf0>)
 8001014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001018:	6453      	str	r3, [r2, #68]	; 0x44
 800101a:	4b30      	ldr	r3, [pc, #192]	; (80010dc <HAL_SPI_MspInit+0xf0>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_SPI_MspInit+0xf0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a2c      	ldr	r2, [pc, #176]	; (80010dc <HAL_SPI_MspInit+0xf0>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_SPI_MspInit+0xf0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800103e:	23e0      	movs	r3, #224	; 0xe0
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800104e:	2305      	movs	r3, #5
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4821      	ldr	r0, [pc, #132]	; (80010e0 <HAL_SPI_MspInit+0xf4>)
 800105a:	f000 fe0d 	bl	8001c78 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 8001060:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <HAL_SPI_MspInit+0xfc>)
 8001062:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 8001066:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800106a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 800106e:	2240      	movs	r2, #64	; 0x40
 8001070:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 800107a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 8001082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001086:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 800108a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800108e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 800109e:	2204      	movs	r2, #4
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 80010b6:	f000 faf5 	bl	80016a4 <HAL_DMA_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 80010c0:	f7ff fe5e 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 80010c8:	655a      	str	r2, [r3, #84]	; 0x54
 80010ca:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_SPI_MspInit+0xf8>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40013000 	.word	0x40013000
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	20000230 	.word	0x20000230
 80010e8:	40026458 	.word	0x40026458

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0ac      	sub	sp, #176	; 0xb0
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	2284      	movs	r2, #132	; 0x84
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f009 fe2b 	bl	800ad68 <memset>
  if(huart->Instance==UART4)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a32      	ldr	r2, [pc, #200]	; (80011e0 <HAL_UART_MspInit+0xf4>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d15d      	bne.n	80011d8 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800111c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001120:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001122:	2300      	movs	r3, #0
 8001124:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001126:	f107 0318 	add.w	r3, r7, #24
 800112a:	4618      	mov	r0, r3
 800112c:	f003 ff8e 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001136:	f7ff fe23 	bl	8000d80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <HAL_UART_MspInit+0xf8>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <HAL_UART_MspInit+0xf8>)
 8001140:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <HAL_UART_MspInit+0xf8>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <HAL_UART_MspInit+0xf8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <HAL_UART_MspInit+0xf8>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <HAL_UART_MspInit+0xf8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_UART_MspInit+0xf8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_UART_MspInit+0xf8>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_UART_MspInit+0xf8>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001182:	2301      	movs	r3, #1
 8001184:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800119a:	2308      	movs	r3, #8
 800119c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011a4:	4619      	mov	r1, r3
 80011a6:	4810      	ldr	r0, [pc, #64]	; (80011e8 <HAL_UART_MspInit+0xfc>)
 80011a8:	f000 fd66 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011c6:	2308      	movs	r3, #8
 80011c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <HAL_UART_MspInit+0x100>)
 80011d4:	f000 fd50 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	37b0      	adds	r7, #176	; 0xb0
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40004c00 	.word	0x40004c00
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020800 	.word	0x40020800

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f000 f8dc 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <EXTI0_IRQHandler+0x28>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <EXTI0_IRQHandler+0x1c>
	  	  {
	  	      __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);  // Clear the interrupt flag
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <EXTI0_IRQHandler+0x28>)
 8001256:	2201      	movs	r2, #1
 8001258:	615a      	str	r2, [r3, #20]
	  	      dataReady = 1;  // Set the data ready flag
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <EXTI0_IRQHandler+0x2c>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]

	  	  }
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001260:	2001      	movs	r0, #1
 8001262:	f000 fee9 	bl	8002038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40013c00 	.word	0x40013c00
 8001270:	20000318 	.word	0x20000318

08001274 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <DMA2_Stream3_IRQHandler+0x10>)
 800127a:	f000 fac1 	bl	8001800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000230 	.word	0x20000230

08001288 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <OTG_FS_IRQHandler+0x10>)
 800128e:	f002 f890 	bl	80033b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20001808 	.word	0x20001808

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f009 fd64 	bl	800ad98 <__errno>
 80012d0:	4603      	mov	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20050000 	.word	0x20050000
 80012fc:	00000400 	.word	0x00000400
 8001300:	20000320 	.word	0x20000320
 8001304:	20001e58 	.word	0x20001e58

08001308 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001364 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001332:	490e      	ldr	r1, [pc, #56]	; (800136c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001334:	4a0e      	ldr	r2, [pc, #56]	; (8001370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001348:	4c0b      	ldr	r4, [pc, #44]	; (8001378 <LoopFillZerobss+0x26>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001356:	f7ff ffd7 	bl	8001308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135a:	f009 fd23 	bl	800ada4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135e:	f7ff fa79 	bl	8000854 <main>
  bx  lr    
 8001362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001370:	0800b5e8 	.word	0x0800b5e8
  ldr r2, =_sbss
 8001374:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8001378:	20001e58 	.word	0x20001e58

0800137c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC_IRQHandler>

0800137e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001382:	2003      	movs	r0, #3
 8001384:	f000 f94c 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001388:	2000      	movs	r0, #0
 800138a:	f000 f805 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800138e:	f7ff fdab 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x54>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x58>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f967 	bl	800168a <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d80a      	bhi.n	80013e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f000 f92f 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_InitTick+0x5c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000008 	.word	0x20000008
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x20>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x24>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <HAL_IncTick+0x24>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000008 	.word	0x20000008
 800141c:	20000324 	.word	0x20000324

08001420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_GetTick+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000324 	.word	0x20000324

08001438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001440:	f7ff ffee 	bl	8001420 <HAL_GetTick>
 8001444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001450:	d005      	beq.n	800145e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_Delay+0x44>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800145e:	bf00      	nop
 8001460:	f7ff ffde 	bl	8001420 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	429a      	cmp	r2, r3
 800146e:	d8f7      	bhi.n	8001460 <HAL_Delay+0x28>
  {
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008

08001480 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x40>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	05fa0000 	.word	0x05fa0000

080014c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 0307 	and.w	r3, r3, #7
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db0b      	blt.n	800150e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	f003 021f 	and.w	r2, r3, #31
 80014fc:	4907      	ldr	r1, [pc, #28]	; (800151c <__NVIC_EnableIRQ+0x38>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	2001      	movs	r0, #1
 8001506:	fa00 f202 	lsl.w	r2, r0, r2
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff29 	bl	8001480 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff3e 	bl	80014c8 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff8e 	bl	8001574 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5d 	bl	8001520 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff31 	bl	80014e4 <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff feb6 	bl	8001420 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e099      	b.n	80017f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2202      	movs	r2, #2
 80016c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e0:	e00f      	b.n	8001702 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e2:	f7ff fe9d 	bl	8001420 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d908      	bls.n	8001702 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2220      	movs	r2, #32
 80016f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2203      	movs	r2, #3
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e078      	b.n	80017f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1e8      	bne.n	80016e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4b38      	ldr	r3, [pc, #224]	; (80017fc <HAL_DMA_Init+0x158>)
 800171c:	4013      	ands	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800172e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001746:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	2b04      	cmp	r3, #4
 800175a:	d107      	bne.n	800176c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	4313      	orrs	r3, r2
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f023 0307 	bic.w	r3, r3, #7
 8001782:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	4313      	orrs	r3, r2
 800178c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	2b04      	cmp	r3, #4
 8001794:	d117      	bne.n	80017c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	4313      	orrs	r3, r2
 800179e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f9e9 	bl	8001b80 <DMA_CheckFifoParam>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2240      	movs	r2, #64	; 0x40
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017c2:	2301      	movs	r3, #1
 80017c4:	e016      	b.n	80017f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f9a0 	bl	8001b14 <DMA_CalcBaseAndBitshift>
 80017d4:	4603      	mov	r3, r0
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	223f      	movs	r2, #63	; 0x3f
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	f010803f 	.word	0xf010803f

08001800 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800180c:	4b8e      	ldr	r3, [pc, #568]	; (8001a48 <HAL_DMA_IRQHandler+0x248>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a8e      	ldr	r2, [pc, #568]	; (8001a4c <HAL_DMA_IRQHandler+0x24c>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0a9b      	lsrs	r3, r3, #10
 8001818:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182a:	2208      	movs	r2, #8
 800182c:	409a      	lsls	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01a      	beq.n	800186c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0204 	bic.w	r2, r2, #4
 8001852:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001858:	2208      	movs	r2, #8
 800185a:	409a      	lsls	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001870:	2201      	movs	r2, #1
 8001872:	409a      	lsls	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d012      	beq.n	80018a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	2201      	movs	r2, #1
 8001890:	409a      	lsls	r2, r3
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189a:	f043 0202 	orr.w	r2, r3, #2
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a6:	2204      	movs	r2, #4
 80018a8:	409a      	lsls	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d012      	beq.n	80018d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00b      	beq.n	80018d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c4:	2204      	movs	r2, #4
 80018c6:	409a      	lsls	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d0:	f043 0204 	orr.w	r2, r3, #4
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018dc:	2210      	movs	r2, #16
 80018de:	409a      	lsls	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d043      	beq.n	8001970 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d03c      	beq.n	8001970 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fa:	2210      	movs	r2, #16
 80018fc:	409a      	lsls	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d018      	beq.n	8001942 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d108      	bne.n	8001930 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	2b00      	cmp	r3, #0
 8001924:	d024      	beq.n	8001970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	4798      	blx	r3
 800192e:	e01f      	b.n	8001970 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01b      	beq.n	8001970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	4798      	blx	r3
 8001940:	e016      	b.n	8001970 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d107      	bne.n	8001960 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0208 	bic.w	r2, r2, #8
 800195e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001974:	2220      	movs	r2, #32
 8001976:	409a      	lsls	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 808f 	beq.w	8001aa0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 8087 	beq.w	8001aa0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	2220      	movs	r2, #32
 8001998:	409a      	lsls	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d136      	bne.n	8001a18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0216 	bic.w	r2, r2, #22
 80019b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d103      	bne.n	80019da <HAL_DMA_IRQHandler+0x1da>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0208 	bic.w	r2, r2, #8
 80019e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	223f      	movs	r2, #63	; 0x3f
 80019f0:	409a      	lsls	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d07e      	beq.n	8001b0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
        }
        return;
 8001a16:	e079      	b.n	8001b0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d01d      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10d      	bne.n	8001a50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d031      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	4798      	blx	r3
 8001a44:	e02c      	b.n	8001aa0 <HAL_DMA_IRQHandler+0x2a0>
 8001a46:	bf00      	nop
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d023      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
 8001a60:	e01e      	b.n	8001aa0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10f      	bne.n	8001a90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0210 	bic.w	r2, r2, #16
 8001a7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d032      	beq.n	8001b0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d022      	beq.n	8001afa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2205      	movs	r2, #5
 8001ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d307      	bcc.n	8001ae8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f2      	bne.n	8001acc <HAL_DMA_IRQHandler+0x2cc>
 8001ae6:	e000      	b.n	8001aea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ae8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	4798      	blx	r3
 8001b0a:	e000      	b.n	8001b0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b0c:	bf00      	nop
    }
  }
}
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	3b10      	subs	r3, #16
 8001b24:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <DMA_CalcBaseAndBitshift+0x60>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <DMA_CalcBaseAndBitshift+0x64>)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d908      	bls.n	8001b54 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <DMA_CalcBaseAndBitshift+0x68>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	1d1a      	adds	r2, r3, #4
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	659a      	str	r2, [r3, #88]	; 0x58
 8001b52:	e006      	b.n	8001b62 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <DMA_CalcBaseAndBitshift+0x68>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	aaaaaaab 	.word	0xaaaaaaab
 8001b78:	0800b59c 	.word	0x0800b59c
 8001b7c:	fffffc00 	.word	0xfffffc00

08001b80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d11f      	bne.n	8001bda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d856      	bhi.n	8001c4e <DMA_CheckFifoParam+0xce>
 8001ba0:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <DMA_CheckFifoParam+0x28>)
 8001ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba6:	bf00      	nop
 8001ba8:	08001bb9 	.word	0x08001bb9
 8001bac:	08001bcb 	.word	0x08001bcb
 8001bb0:	08001bb9 	.word	0x08001bb9
 8001bb4:	08001c4f 	.word	0x08001c4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d046      	beq.n	8001c52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc8:	e043      	b.n	8001c52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bd2:	d140      	bne.n	8001c56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd8:	e03d      	b.n	8001c56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be2:	d121      	bne.n	8001c28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d837      	bhi.n	8001c5a <DMA_CheckFifoParam+0xda>
 8001bea:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <DMA_CheckFifoParam+0x70>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c01 	.word	0x08001c01
 8001bf4:	08001c07 	.word	0x08001c07
 8001bf8:	08001c01 	.word	0x08001c01
 8001bfc:	08001c19 	.word	0x08001c19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
      break;
 8001c04:	e030      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d025      	beq.n	8001c5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c16:	e022      	b.n	8001c5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c20:	d11f      	bne.n	8001c62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c26:	e01c      	b.n	8001c62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d903      	bls.n	8001c36 <DMA_CheckFifoParam+0xb6>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d003      	beq.n	8001c3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c34:	e018      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
      break;
 8001c3a:	e015      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00e      	beq.n	8001c66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c4c:	e00b      	b.n	8001c66 <DMA_CheckFifoParam+0xe6>
      break;
 8001c4e:	bf00      	nop
 8001c50:	e00a      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      break;
 8001c52:	bf00      	nop
 8001c54:	e008      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      break;
 8001c56:	bf00      	nop
 8001c58:	e006      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      break;
 8001c5a:	bf00      	nop
 8001c5c:	e004      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      break;
 8001c5e:	bf00      	nop
 8001c60:	e002      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c62:	bf00      	nop
 8001c64:	e000      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      break;
 8001c66:	bf00      	nop
    }
  } 
  
  return status; 
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e175      	b.n	8001f84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8164 	bne.w	8001f7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d005      	beq.n	8001cce <HAL_GPIO_Init+0x56>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d130      	bne.n	8001d30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 0201 	and.w	r2, r3, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d017      	beq.n	8001d6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d123      	bne.n	8001dc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	08da      	lsrs	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3208      	adds	r2, #8
 8001d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80be 	beq.w	8001f7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	4b66      	ldr	r3, [pc, #408]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a65      	ldr	r2, [pc, #404]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e1a:	4a61      	ldr	r2, [pc, #388]	; (8001fa0 <HAL_GPIO_Init+0x328>)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <HAL_GPIO_Init+0x32c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d037      	beq.n	8001eb6 <HAL_GPIO_Init+0x23e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a57      	ldr	r2, [pc, #348]	; (8001fa8 <HAL_GPIO_Init+0x330>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d031      	beq.n	8001eb2 <HAL_GPIO_Init+0x23a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a56      	ldr	r2, [pc, #344]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d02b      	beq.n	8001eae <HAL_GPIO_Init+0x236>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a55      	ldr	r2, [pc, #340]	; (8001fb0 <HAL_GPIO_Init+0x338>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d025      	beq.n	8001eaa <HAL_GPIO_Init+0x232>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a54      	ldr	r2, [pc, #336]	; (8001fb4 <HAL_GPIO_Init+0x33c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01f      	beq.n	8001ea6 <HAL_GPIO_Init+0x22e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a53      	ldr	r2, [pc, #332]	; (8001fb8 <HAL_GPIO_Init+0x340>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d019      	beq.n	8001ea2 <HAL_GPIO_Init+0x22a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a52      	ldr	r2, [pc, #328]	; (8001fbc <HAL_GPIO_Init+0x344>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0x226>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a51      	ldr	r2, [pc, #324]	; (8001fc0 <HAL_GPIO_Init+0x348>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_GPIO_Init+0x222>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a50      	ldr	r2, [pc, #320]	; (8001fc4 <HAL_GPIO_Init+0x34c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x21e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4f      	ldr	r2, [pc, #316]	; (8001fc8 <HAL_GPIO_Init+0x350>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_GPIO_Init+0x21a>
 8001e8e:	2309      	movs	r3, #9
 8001e90:	e012      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001e92:	230a      	movs	r3, #10
 8001e94:	e010      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001e96:	2308      	movs	r3, #8
 8001e98:	e00e      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	e00c      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	e00a      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001ea2:	2305      	movs	r3, #5
 8001ea4:	e008      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e004      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e002      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_GPIO_Init+0x240>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	69fa      	ldr	r2, [r7, #28]
 8001eba:	f002 0203 	and.w	r2, r2, #3
 8001ebe:	0092      	lsls	r2, r2, #2
 8001ec0:	4093      	lsls	r3, r2
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ec8:	4935      	ldr	r1, [pc, #212]	; (8001fa0 <HAL_GPIO_Init+0x328>)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efa:	4a34      	ldr	r2, [pc, #208]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f00:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f24:	4a29      	ldr	r2, [pc, #164]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f4e:	4a1f      	ldr	r2, [pc, #124]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <HAL_GPIO_Init+0x354>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3301      	adds	r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	2b0f      	cmp	r3, #15
 8001f88:	f67f ae86 	bls.w	8001c98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3724      	adds	r7, #36	; 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40013800 	.word	0x40013800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40021400 	.word	0x40021400
 8001fbc:	40021800 	.word	0x40021800
 8001fc0:	40021c00 	.word	0x40021c00
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40022400 	.word	0x40022400
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fec:	e003      	b.n	8001ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	041a      	lsls	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002014:	887a      	ldrh	r2, [r7, #2]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	041a      	lsls	r2, r3, #16
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43d9      	mvns	r1, r3
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	400b      	ands	r3, r1
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f806 	bl	8002068 <HAL_GPIO_EXTI_Callback>
  }
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40013c00 	.word	0x40013c00

08002068 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e07f      	b.n	8002192 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe ff42 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2224      	movs	r2, #36	; 0x24
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	e006      	b.n	8002108 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002106:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d104      	bne.n	800211a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002118:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_I2C_Init+0x11c>)
 8002126:	430b      	orrs	r3, r1
 8002128:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002138:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69d9      	ldr	r1, [r3, #28]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	02008000 	.word	0x02008000

080021a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	461a      	mov	r2, r3
 80021ac:	460b      	mov	r3, r1
 80021ae:	817b      	strh	r3, [r7, #10]
 80021b0:	4613      	mov	r3, r2
 80021b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b20      	cmp	r3, #32
 80021be:	f040 80da 	bne.w	8002376 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_I2C_Master_Transmit+0x30>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e0d3      	b.n	8002378 <HAL_I2C_Master_Transmit+0x1d8>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021d8:	f7ff f922 	bl	8001420 <HAL_GetTick>
 80021dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2319      	movs	r3, #25
 80021e4:	2201      	movs	r2, #1
 80021e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fcbc 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0be      	b.n	8002378 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2221      	movs	r2, #33	; 0x21
 80021fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2210      	movs	r2, #16
 8002206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	893a      	ldrh	r2, [r7, #8]
 800221a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	2bff      	cmp	r3, #255	; 0xff
 800222a:	d90e      	bls.n	800224a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	22ff      	movs	r2, #255	; 0xff
 8002230:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002236:	b2da      	uxtb	r2, r3
 8002238:	8979      	ldrh	r1, [r7, #10]
 800223a:	4b51      	ldr	r3, [pc, #324]	; (8002380 <HAL_I2C_Master_Transmit+0x1e0>)
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fea6 	bl	8002f94 <I2C_TransferConfig>
 8002248:	e06c      	b.n	8002324 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	b2da      	uxtb	r2, r3
 800225a:	8979      	ldrh	r1, [r7, #10]
 800225c:	4b48      	ldr	r3, [pc, #288]	; (8002380 <HAL_I2C_Master_Transmit+0x1e0>)
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fe95 	bl	8002f94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800226a:	e05b      	b.n	8002324 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	6a39      	ldr	r1, [r7, #32]
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fcb9 	bl	8002be8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e07b      	b.n	8002378 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d034      	beq.n	8002324 <HAL_I2C_Master_Transmit+0x184>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d130      	bne.n	8002324 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	2200      	movs	r2, #0
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 fc4b 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e04d      	b.n	8002378 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2bff      	cmp	r3, #255	; 0xff
 80022e4:	d90e      	bls.n	8002304 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	22ff      	movs	r2, #255	; 0xff
 80022ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	8979      	ldrh	r1, [r7, #10]
 80022f4:	2300      	movs	r3, #0
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fe49 	bl	8002f94 <I2C_TransferConfig>
 8002302:	e00f      	b.n	8002324 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	b2da      	uxtb	r2, r3
 8002314:	8979      	ldrh	r1, [r7, #10]
 8002316:	2300      	movs	r3, #0
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fe38 	bl	8002f94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d19e      	bne.n	800226c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	6a39      	ldr	r1, [r7, #32]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fc98 	bl	8002c68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e01a      	b.n	8002378 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2220      	movs	r2, #32
 8002348:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_I2C_Master_Transmit+0x1e4>)
 8002356:	400b      	ands	r3, r1
 8002358:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	e000      	b.n	8002378 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002376:	2302      	movs	r3, #2
  }
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	80002000 	.word	0x80002000
 8002384:	fe00e800 	.word	0xfe00e800

08002388 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af02      	add	r7, sp, #8
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	461a      	mov	r2, r3
 8002394:	460b      	mov	r3, r1
 8002396:	817b      	strh	r3, [r7, #10]
 8002398:	4613      	mov	r3, r2
 800239a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	f040 80db 	bne.w	8002560 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_I2C_Master_Receive+0x30>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e0d4      	b.n	8002562 <HAL_I2C_Master_Receive+0x1da>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023c0:	f7ff f82e 	bl	8001420 <HAL_GetTick>
 80023c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2319      	movs	r3, #25
 80023cc:	2201      	movs	r2, #1
 80023ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fbc8 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0bf      	b.n	8002562 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2222      	movs	r2, #34	; 0x22
 80023e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2210      	movs	r2, #16
 80023ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	893a      	ldrh	r2, [r7, #8]
 8002402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2bff      	cmp	r3, #255	; 0xff
 8002412:	d90e      	bls.n	8002432 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	22ff      	movs	r2, #255	; 0xff
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	b2da      	uxtb	r2, r3
 8002420:	8979      	ldrh	r1, [r7, #10]
 8002422:	4b52      	ldr	r3, [pc, #328]	; (800256c <HAL_I2C_Master_Receive+0x1e4>)
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fdb2 	bl	8002f94 <I2C_TransferConfig>
 8002430:	e06d      	b.n	800250e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	b2da      	uxtb	r2, r3
 8002442:	8979      	ldrh	r1, [r7, #10]
 8002444:	4b49      	ldr	r3, [pc, #292]	; (800256c <HAL_I2C_Master_Receive+0x1e4>)
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fda1 	bl	8002f94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002452:	e05c      	b.n	800250e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	6a39      	ldr	r1, [r7, #32]
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fc41 	bl	8002ce0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e07c      	b.n	8002562 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d034      	beq.n	800250e <HAL_I2C_Master_Receive+0x186>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d130      	bne.n	800250e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	2200      	movs	r2, #0
 80024b4:	2180      	movs	r1, #128	; 0x80
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fb56 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e04d      	b.n	8002562 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2bff      	cmp	r3, #255	; 0xff
 80024ce:	d90e      	bls.n	80024ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	22ff      	movs	r2, #255	; 0xff
 80024d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	8979      	ldrh	r1, [r7, #10]
 80024de:	2300      	movs	r3, #0
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fd54 	bl	8002f94 <I2C_TransferConfig>
 80024ec:	e00f      	b.n	800250e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	2300      	movs	r3, #0
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fd43 	bl	8002f94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d19d      	bne.n	8002454 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	6a39      	ldr	r1, [r7, #32]
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 fba3 	bl	8002c68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e01a      	b.n	8002562 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2220      	movs	r2, #32
 8002532:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6859      	ldr	r1, [r3, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <HAL_I2C_Master_Receive+0x1e8>)
 8002540:	400b      	ands	r3, r1
 8002542:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	e000      	b.n	8002562 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002560:	2302      	movs	r3, #2
  }
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	80002400 	.word	0x80002400
 8002570:	fe00e800 	.word	0xfe00e800

08002574 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	4608      	mov	r0, r1
 800257e:	4611      	mov	r1, r2
 8002580:	461a      	mov	r2, r3
 8002582:	4603      	mov	r3, r0
 8002584:	817b      	strh	r3, [r7, #10]
 8002586:	460b      	mov	r3, r1
 8002588:	813b      	strh	r3, [r7, #8]
 800258a:	4613      	mov	r3, r2
 800258c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b20      	cmp	r3, #32
 8002598:	f040 80f9 	bne.w	800278e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_I2C_Mem_Write+0x34>
 80025a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0ed      	b.n	8002790 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_I2C_Mem_Write+0x4e>
 80025be:	2302      	movs	r3, #2
 80025c0:	e0e6      	b.n	8002790 <HAL_I2C_Mem_Write+0x21c>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025ca:	f7fe ff29 	bl	8001420 <HAL_GetTick>
 80025ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	2319      	movs	r3, #25
 80025d6:	2201      	movs	r2, #1
 80025d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fac3 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0d1      	b.n	8002790 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2221      	movs	r2, #33	; 0x21
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2240      	movs	r2, #64	; 0x40
 80025f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a3a      	ldr	r2, [r7, #32]
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800260c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002614:	88f8      	ldrh	r0, [r7, #6]
 8002616:	893a      	ldrh	r2, [r7, #8]
 8002618:	8979      	ldrh	r1, [r7, #10]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	4603      	mov	r3, r0
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f9d3 	bl	80029d0 <I2C_RequestMemoryWrite>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0a9      	b.n	8002790 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	2bff      	cmp	r3, #255	; 0xff
 8002644:	d90e      	bls.n	8002664 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	22ff      	movs	r2, #255	; 0xff
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002650:	b2da      	uxtb	r2, r3
 8002652:	8979      	ldrh	r1, [r7, #10]
 8002654:	2300      	movs	r3, #0
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 fc99 	bl	8002f94 <I2C_TransferConfig>
 8002662:	e00f      	b.n	8002684 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	b2da      	uxtb	r2, r3
 8002674:	8979      	ldrh	r1, [r7, #10]
 8002676:	2300      	movs	r3, #0
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fc88 	bl	8002f94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 faad 	bl	8002be8 <I2C_WaitOnTXISFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e07b      	b.n	8002790 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	781a      	ldrb	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d034      	beq.n	800273c <HAL_I2C_Mem_Write+0x1c8>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d130      	bne.n	800273c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	2200      	movs	r2, #0
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fa3f 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e04d      	b.n	8002790 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2bff      	cmp	r3, #255	; 0xff
 80026fc:	d90e      	bls.n	800271c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	22ff      	movs	r2, #255	; 0xff
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	b2da      	uxtb	r2, r3
 800270a:	8979      	ldrh	r1, [r7, #10]
 800270c:	2300      	movs	r3, #0
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fc3d 	bl	8002f94 <I2C_TransferConfig>
 800271a:	e00f      	b.n	800273c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	b2da      	uxtb	r2, r3
 800272c:	8979      	ldrh	r1, [r7, #10]
 800272e:	2300      	movs	r3, #0
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fc2c 	bl	8002f94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d19e      	bne.n	8002684 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fa8c 	bl	8002c68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e01a      	b.n	8002790 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2220      	movs	r2, #32
 8002760:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <HAL_I2C_Mem_Write+0x224>)
 800276e:	400b      	ands	r3, r1
 8002770:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800278e:	2302      	movs	r3, #2
  }
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	fe00e800 	.word	0xfe00e800

0800279c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	817b      	strh	r3, [r7, #10]
 80027ae:	460b      	mov	r3, r1
 80027b0:	813b      	strh	r3, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b20      	cmp	r3, #32
 80027c0:	f040 80fd 	bne.w	80029be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_I2C_Mem_Read+0x34>
 80027ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0f1      	b.n	80029c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_I2C_Mem_Read+0x4e>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0ea      	b.n	80029c0 <HAL_I2C_Mem_Read+0x224>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027f2:	f7fe fe15 	bl	8001420 <HAL_GetTick>
 80027f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2319      	movs	r3, #25
 80027fe:	2201      	movs	r2, #1
 8002800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f9af 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0d5      	b.n	80029c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2222      	movs	r2, #34	; 0x22
 8002818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2240      	movs	r2, #64	; 0x40
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a3a      	ldr	r2, [r7, #32]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002834:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800283c:	88f8      	ldrh	r0, [r7, #6]
 800283e:	893a      	ldrh	r2, [r7, #8]
 8002840:	8979      	ldrh	r1, [r7, #10]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	4603      	mov	r3, r0
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f913 	bl	8002a78 <I2C_RequestMemoryRead>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0ad      	b.n	80029c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	2bff      	cmp	r3, #255	; 0xff
 800286c:	d90e      	bls.n	800288c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	22ff      	movs	r2, #255	; 0xff
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	b2da      	uxtb	r2, r3
 800287a:	8979      	ldrh	r1, [r7, #10]
 800287c:	4b52      	ldr	r3, [pc, #328]	; (80029c8 <HAL_I2C_Mem_Read+0x22c>)
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fb85 	bl	8002f94 <I2C_TransferConfig>
 800288a:	e00f      	b.n	80028ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	b2da      	uxtb	r2, r3
 800289c:	8979      	ldrh	r1, [r7, #10]
 800289e:	4b4a      	ldr	r3, [pc, #296]	; (80029c8 <HAL_I2C_Mem_Read+0x22c>)
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fb74 	bl	8002f94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b2:	2200      	movs	r2, #0
 80028b4:	2104      	movs	r1, #4
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f956 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07c      	b.n	80029c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d034      	beq.n	800296c <HAL_I2C_Mem_Read+0x1d0>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	2b00      	cmp	r3, #0
 8002908:	d130      	bne.n	800296c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	2200      	movs	r2, #0
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f927 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e04d      	b.n	80029c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	2bff      	cmp	r3, #255	; 0xff
 800292c:	d90e      	bls.n	800294c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	22ff      	movs	r2, #255	; 0xff
 8002932:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	b2da      	uxtb	r2, r3
 800293a:	8979      	ldrh	r1, [r7, #10]
 800293c:	2300      	movs	r3, #0
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fb25 	bl	8002f94 <I2C_TransferConfig>
 800294a:	e00f      	b.n	800296c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	b2da      	uxtb	r2, r3
 800295c:	8979      	ldrh	r1, [r7, #10]
 800295e:	2300      	movs	r3, #0
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fb14 	bl	8002f94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d19a      	bne.n	80028ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f974 	bl	8002c68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e01a      	b.n	80029c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2220      	movs	r2, #32
 8002990:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_I2C_Mem_Read+0x230>)
 800299e:	400b      	ands	r3, r1
 80029a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	e000      	b.n	80029c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
  }
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	80002400 	.word	0x80002400
 80029cc:	fe00e800 	.word	0xfe00e800

080029d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	4608      	mov	r0, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	461a      	mov	r2, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	817b      	strh	r3, [r7, #10]
 80029e2:	460b      	mov	r3, r1
 80029e4:	813b      	strh	r3, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	8979      	ldrh	r1, [r7, #10]
 80029f0:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <I2C_RequestMemoryWrite+0xa4>)
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 facb 	bl	8002f94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	69b9      	ldr	r1, [r7, #24]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f8f0 	bl	8002be8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e02c      	b.n	8002a6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a18:	893b      	ldrh	r3, [r7, #8]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	629a      	str	r2, [r3, #40]	; 0x28
 8002a22:	e015      	b.n	8002a50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a24:	893b      	ldrh	r3, [r7, #8]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	69b9      	ldr	r1, [r7, #24]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f8d6 	bl	8002be8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e012      	b.n	8002a6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a46:	893b      	ldrh	r3, [r7, #8]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2200      	movs	r2, #0
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f884 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	80002000 	.word	0x80002000

08002a78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	4608      	mov	r0, r1
 8002a82:	4611      	mov	r1, r2
 8002a84:	461a      	mov	r2, r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	817b      	strh	r3, [r7, #10]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	813b      	strh	r3, [r7, #8]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	8979      	ldrh	r1, [r7, #10]
 8002a98:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <I2C_RequestMemoryRead+0xa4>)
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fa78 	bl	8002f94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa4:	69fa      	ldr	r2, [r7, #28]
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f89d 	bl	8002be8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e02c      	b.n	8002b12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002abe:	893b      	ldrh	r3, [r7, #8]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ac8:	e015      	b.n	8002af6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002aca:	893b      	ldrh	r3, [r7, #8]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	69b9      	ldr	r1, [r7, #24]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f883 	bl	8002be8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e012      	b.n	8002b12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2140      	movs	r1, #64	; 0x40
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f831 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	80002000 	.word	0x80002000

08002b20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d103      	bne.n	8002b3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d007      	beq.n	8002b5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	619a      	str	r2, [r3, #24]
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b78:	e022      	b.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d01e      	beq.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b82:	f7fe fc4d 	bl	8001420 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d302      	bcc.n	8002b98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d113      	bne.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e00f      	b.n	8002be0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d0cd      	beq.n	8002b7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bf4:	e02c      	b.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f8ea 	bl	8002dd4 <I2C_IsErrorOccurred>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e02a      	b.n	8002c60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d01e      	beq.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c12:	f7fe fc05 	bl	8001420 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d302      	bcc.n	8002c28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d113      	bne.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e007      	b.n	8002c60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d1cb      	bne.n	8002bf6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c74:	e028      	b.n	8002cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f8aa 	bl	8002dd4 <I2C_IsErrorOccurred>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e026      	b.n	8002cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7fe fbc9 	bl	8001420 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d113      	bne.n	8002cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e007      	b.n	8002cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d1cf      	bne.n	8002c76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cec:	e064      	b.n	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f86e 	bl	8002dd4 <I2C_IsErrorOccurred>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e062      	b.n	8002dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	d138      	bne.n	8002d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d105      	bne.n	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e04e      	b.n	8002dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d107      	bne.n	8002d48 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2204      	movs	r2, #4
 8002d44:	645a      	str	r2, [r3, #68]	; 0x44
 8002d46:	e002      	b.n	8002d4e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2220      	movs	r2, #32
 8002d54:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002d62:	400b      	ands	r3, r1
 8002d64:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e022      	b.n	8002dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d82:	f7fe fb4d 	bl	8001420 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d302      	bcc.n	8002d98 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10f      	bne.n	8002db8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	f043 0220 	orr.w	r2, r3, #32
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e007      	b.n	8002dc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d193      	bne.n	8002cee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	fe00e800 	.word	0xfe00e800

08002dd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d068      	beq.n	8002ed2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2210      	movs	r2, #16
 8002e06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e08:	e049      	b.n	8002e9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d045      	beq.n	8002e9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7fe fb05 	bl	8001420 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <I2C_IsErrorOccurred+0x54>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d13a      	bne.n	8002e9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4a:	d121      	bne.n	8002e90 <I2C_IsErrorOccurred+0xbc>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e52:	d01d      	beq.n	8002e90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d01a      	beq.n	8002e90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e6a:	f7fe fad9 	bl	8001420 <HAL_GetTick>
 8002e6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e70:	e00e      	b.n	8002e90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e72:	f7fe fad5 	bl	8001420 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b19      	cmp	r3, #25
 8002e7e:	d907      	bls.n	8002e90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	f043 0320 	orr.w	r3, r3, #32
 8002e86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002e8e:	e006      	b.n	8002e9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d1e9      	bne.n	8002e72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d003      	beq.n	8002eb4 <I2C_IsErrorOccurred+0xe0>
 8002eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0aa      	beq.n	8002e0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d103      	bne.n	8002ec4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ef4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	f043 0308 	orr.w	r3, r3, #8
 8002f0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00b      	beq.n	8002f40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01c      	beq.n	8002f82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f7ff fde9 	bl	8002b20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <I2C_IsErrorOccurred+0x1bc>)
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3728      	adds	r7, #40	; 0x28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	fe00e800 	.word	0xfe00e800

08002f94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	817b      	strh	r3, [r7, #10]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fa6:	897b      	ldrh	r3, [r7, #10]
 8002fa8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fac:	7a7b      	ldrb	r3, [r7, #9]
 8002fae:	041b      	lsls	r3, r3, #16
 8002fb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fc2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	0d5b      	lsrs	r3, r3, #21
 8002fce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <I2C_TransferConfig+0x60>)
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	ea02 0103 	and.w	r1, r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fe6:	bf00      	nop
 8002fe8:	371c      	adds	r7, #28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	03ff63ff 	.word	0x03ff63ff

08002ff8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b20      	cmp	r3, #32
 800300c:	d138      	bne.n	8003080 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003018:	2302      	movs	r3, #2
 800301a:	e032      	b.n	8003082 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800304a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0201 	orr.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d139      	bne.n	8003118 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e033      	b.n	800311a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2224      	movs	r2, #36	; 0x24
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	e000      	b.n	800311a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003118:	2302      	movs	r3, #2
  }
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003126:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003128:	b08f      	sub	sp, #60	; 0x3c
 800312a:	af0a      	add	r7, sp, #40	; 0x28
 800312c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e116      	b.n	8003366 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f007 f9ae 	bl	800a4b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2203      	movs	r2, #3
 800315c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f003 fc57 	bl	8006a2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	687e      	ldr	r6, [r7, #4]
 8003184:	466d      	mov	r5, sp
 8003186:	f106 0410 	add.w	r4, r6, #16
 800318a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800318c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800318e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003192:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003196:	e885 0003 	stmia.w	r5, {r0, r1}
 800319a:	1d33      	adds	r3, r6, #4
 800319c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800319e:	6838      	ldr	r0, [r7, #0]
 80031a0:	f003 fb38 	bl	8006814 <USB_CoreInit>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e0d7      	b.n	8003366 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 fc45 	bl	8006a4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]
 80031c6:	e04a      	b.n	800325e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031c8:	7bfa      	ldrb	r2, [r7, #15]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	333d      	adds	r3, #61	; 0x3d
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	333c      	adds	r3, #60	; 0x3c
 80031ec:	7bfa      	ldrb	r2, [r7, #15]
 80031ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	b298      	uxth	r0, r3
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	3344      	adds	r3, #68	; 0x44
 8003204:	4602      	mov	r2, r0
 8003206:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3340      	adds	r3, #64	; 0x40
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4413      	add	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3348      	adds	r3, #72	; 0x48
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003230:	7bfa      	ldrb	r2, [r7, #15]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	334c      	adds	r3, #76	; 0x4c
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3354      	adds	r3, #84	; 0x54
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	3301      	adds	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
 800325e:	7bfa      	ldrb	r2, [r7, #15]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	d3af      	bcc.n	80031c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003268:	2300      	movs	r3, #0
 800326a:	73fb      	strb	r3, [r7, #15]
 800326c:	e044      	b.n	80032f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032dc:	7bfa      	ldrb	r2, [r7, #15]
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
 80032f4:	3301      	adds	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d3b5      	bcc.n	800326e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	687e      	ldr	r6, [r7, #4]
 800330a:	466d      	mov	r5, sp
 800330c:	f106 0410 	add.w	r4, r6, #16
 8003310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003318:	e894 0003 	ldmia.w	r4, {r0, r1}
 800331c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003320:	1d33      	adds	r3, r6, #4
 8003322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003324:	6838      	ldr	r0, [r7, #0]
 8003326:	f003 fbdd 	bl	8006ae4 <USB_DevInit>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d005      	beq.n	800333c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e014      	b.n	8003366 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2b01      	cmp	r3, #1
 8003352:	d102      	bne.n	800335a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f001 f97b 	bl	8004650 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f004 fd2b 	bl	8007dba <USB_DevDisconnect>

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800336e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_PCD_Start+0x16>
 8003380:	2302      	movs	r3, #2
 8003382:	e012      	b.n	80033aa <HAL_PCD_Start+0x3c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f003 fb39 	bl	8006a08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f004 fcec 	bl	8007d78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033b2:	b590      	push	{r4, r7, lr}
 80033b4:	b08d      	sub	sp, #52	; 0x34
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f004 fdaa 	bl	8007f22 <USB_GetMode>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f040 84b7 	bne.w	8003d44 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f004 fd0e 	bl	8007dfc <USB_ReadInterrupts>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 84ad 	beq.w	8003d42 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f004 fcfb 	bl	8007dfc <USB_ReadInterrupts>
 8003406:	4603      	mov	r3, r0
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b02      	cmp	r3, #2
 800340e:	d107      	bne.n	8003420 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f002 0202 	and.w	r2, r2, #2
 800341e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f004 fce9 	bl	8007dfc <USB_ReadInterrupts>
 800342a:	4603      	mov	r3, r0
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b10      	cmp	r3, #16
 8003432:	d161      	bne.n	80034f8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0210 	bic.w	r2, r2, #16
 8003442:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f003 020f 	and.w	r2, r3, #15
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	3304      	adds	r3, #4
 8003462:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	0c5b      	lsrs	r3, r3, #17
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	2b02      	cmp	r3, #2
 800346e:	d124      	bne.n	80034ba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d035      	beq.n	80034e8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	091b      	lsrs	r3, r3, #4
 8003484:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800348a:	b29b      	uxth	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	6a38      	ldr	r0, [r7, #32]
 8003490:	f004 fb20 	bl	8007ad4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034a0:	441a      	add	r2, r3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034b2:	441a      	add	r2, r3
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	621a      	str	r2, [r3, #32]
 80034b8:	e016      	b.n	80034e8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	0c5b      	lsrs	r3, r3, #17
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d110      	bne.n	80034e8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034cc:	2208      	movs	r2, #8
 80034ce:	4619      	mov	r1, r3
 80034d0:	6a38      	ldr	r0, [r7, #32]
 80034d2:	f004 faff 	bl	8007ad4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	6a1a      	ldr	r2, [r3, #32]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e2:	441a      	add	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0210 	orr.w	r2, r2, #16
 80034f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f004 fc7d 	bl	8007dfc <USB_ReadInterrupts>
 8003502:	4603      	mov	r3, r0
 8003504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003508:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800350c:	f040 80a7 	bne.w	800365e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f004 fc82 	bl	8007e22 <USB_ReadDevAllOutEpInterrupt>
 800351e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003520:	e099      	b.n	8003656 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 808e 	beq.w	800364a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f004 fca6 	bl	8007e8a <USB_ReadDevOutEPInterrupt>
 800353e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003556:	461a      	mov	r2, r3
 8003558:	2301      	movs	r3, #1
 800355a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800355c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fef0 	bl	8004344 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357a:	461a      	mov	r2, r3
 800357c:	2308      	movs	r3, #8
 800357e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 ffc6 	bl	8004514 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359e:	461a      	mov	r2, r3
 80035a0:	2310      	movs	r3, #16
 80035a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d030      	beq.n	8003610 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b80      	cmp	r3, #128	; 0x80
 80035b8:	d109      	bne.n	80035ce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035cc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	4413      	add	r3, r2
 80035e0:	3304      	adds	r3, #4
 80035e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	78db      	ldrb	r3, [r3, #3]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d108      	bne.n	80035fe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2200      	movs	r2, #0
 80035f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	4619      	mov	r1, r3
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f007 f88f 	bl	800a71c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	461a      	mov	r2, r3
 800360c:	2302      	movs	r3, #2
 800360e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	461a      	mov	r2, r3
 8003628:	2320      	movs	r3, #32
 800362a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003642:	461a      	mov	r2, r3
 8003644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003648:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	3301      	adds	r3, #1
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	085b      	lsrs	r3, r3, #1
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	f47f af62 	bne.w	8003522 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f004 fbca 	bl	8007dfc <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003672:	f040 80db 	bne.w	800382c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f004 fbeb 	bl	8007e56 <USB_ReadDevAllInEpInterrupt>
 8003680:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003686:	e0cd      	b.n	8003824 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80c2 	beq.w	8003818 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f004 fc11 	bl	8007ec6 <USB_ReadDevInEPInterrupt>
 80036a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d057      	beq.n	8003760 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	2201      	movs	r2, #1
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69f9      	ldr	r1, [r7, #28]
 80036cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036d0:	4013      	ands	r3, r2
 80036d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e0:	461a      	mov	r2, r3
 80036e2:	2301      	movs	r3, #1
 80036e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d132      	bne.n	8003754 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	334c      	adds	r3, #76	; 0x4c
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4403      	add	r3, r0
 800370e:	3348      	adds	r3, #72	; 0x48
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4419      	add	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4403      	add	r3, r0
 8003722:	334c      	adds	r3, #76	; 0x4c
 8003724:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	2b00      	cmp	r3, #0
 800372a:	d113      	bne.n	8003754 <HAL_PCD_IRQHandler+0x3a2>
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3354      	adds	r3, #84	; 0x54
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800374c:	461a      	mov	r2, r3
 800374e:	2101      	movs	r1, #1
 8003750:	f004 fc1a 	bl	8007f88 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	b2db      	uxtb	r3, r3
 8003758:	4619      	mov	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f006 ff59 	bl	800a612 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003776:	461a      	mov	r2, r3
 8003778:	2308      	movs	r3, #8
 800377a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003792:	461a      	mov	r2, r3
 8003794:	2310      	movs	r3, #16
 8003796:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ae:	461a      	mov	r2, r3
 80037b0:	2340      	movs	r3, #64	; 0x40
 80037b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d023      	beq.n	8003806 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037c0:	6a38      	ldr	r0, [r7, #32]
 80037c2:	f003 faed 	bl	8006da0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80037c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	3338      	adds	r3, #56	; 0x38
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	3304      	adds	r3, #4
 80037d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	78db      	ldrb	r3, [r3, #3]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d108      	bne.n	80037f4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f006 ffa6 	bl	800a740 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003800:	461a      	mov	r2, r3
 8003802:	2302      	movs	r3, #2
 8003804:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fd08 	bl	8004228 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	3301      	adds	r3, #1
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	f47f af2e 	bne.w	8003688 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f004 fae3 	bl	8007dfc <USB_ReadInterrupts>
 8003836:	4603      	mov	r3, r0
 8003838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800383c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003840:	d122      	bne.n	8003888 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	69fa      	ldr	r2, [r7, #28]
 800384c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003850:	f023 0301 	bic.w	r3, r3, #1
 8003854:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800385c:	2b01      	cmp	r3, #1
 800385e:	d108      	bne.n	8003872 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003868:	2100      	movs	r1, #0
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f007 f920 	bl	800aab0 <HAL_PCDEx_LPM_Callback>
 8003870:	e002      	b.n	8003878 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f006 ff44 	bl	800a700 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003886:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f004 fab5 	bl	8007dfc <USB_ReadInterrupts>
 8003892:	4603      	mov	r3, r0
 8003894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800389c:	d112      	bne.n	80038c4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d102      	bne.n	80038b4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f006 ff00 	bl	800a6b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f004 fa97 	bl	8007dfc <USB_ReadInterrupts>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d8:	d121      	bne.n	800391e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80038e8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d111      	bne.n	8003918 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	f003 020f 	and.w	r2, r3, #15
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800390e:	2101      	movs	r1, #1
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f007 f8cd 	bl	800aab0 <HAL_PCDEx_LPM_Callback>
 8003916:	e002      	b.n	800391e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f006 fecb 	bl	800a6b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f004 fa6a 	bl	8007dfc <USB_ReadInterrupts>
 8003928:	4603      	mov	r3, r0
 800392a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800392e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003932:	f040 80b7 	bne.w	8003aa4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2110      	movs	r1, #16
 8003950:	4618      	mov	r0, r3
 8003952:	f003 fa25 	bl	8006da0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003956:	2300      	movs	r3, #0
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800395a:	e046      	b.n	80039ea <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	4413      	add	r3, r2
 8003964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003968:	461a      	mov	r2, r3
 800396a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800396e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003980:	0151      	lsls	r1, r2, #5
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	440a      	add	r2, r1
 8003986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800398a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800398e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399c:	461a      	mov	r2, r3
 800399e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d4:	0151      	lsls	r1, r2, #5
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	440a      	add	r2, r1
 80039da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	3301      	adds	r3, #1
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d3b3      	bcc.n	800395c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a02:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a06:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d016      	beq.n	8003a3e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a20:	f043 030b 	orr.w	r3, r3, #11
 8003a24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a36:	f043 030b 	orr.w	r3, r3, #11
 8003a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a3c:	e015      	b.n	8003a6a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f242 032b 	movw	r3, #8235	; 0x202b
 8003a52:	4313      	orrs	r3, r2
 8003a54:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a64:	f043 030b 	orr.w	r3, r3, #11
 8003a68:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a78:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a7c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f004 fa7a 	bl	8007f88 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f004 f9a7 	bl	8007dfc <USB_ReadInterrupts>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab8:	d124      	bne.n	8003b04 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f004 fa3e 	bl	8007f40 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f003 f9e6 	bl	8006e9a <USB_GetDevSpeed>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681c      	ldr	r4, [r3, #0]
 8003ada:	f001 fa83 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8003ade:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f002 feeb 	bl	80068c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f006 fdb7 	bl	800a662 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f004 f977 	bl	8007dfc <USB_ReadInterrupts>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d10a      	bne.n	8003b2e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f006 fd94 	bl	800a646 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695a      	ldr	r2, [r3, #20]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f002 0208 	and.w	r2, r2, #8
 8003b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f004 f962 	bl	8007dfc <USB_ReadInterrupts>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b80      	cmp	r3, #128	; 0x80
 8003b40:	d122      	bne.n	8003b88 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b4e:	2301      	movs	r3, #1
 8003b50:	627b      	str	r3, [r7, #36]	; 0x24
 8003b52:	e014      	b.n	8003b7e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b58:	4613      	mov	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d105      	bne.n	8003b78 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	4619      	mov	r1, r3
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fb27 	bl	80041c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d3e5      	bcc.n	8003b54 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f004 f935 	bl	8007dfc <USB_ReadInterrupts>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b9c:	d13b      	bne.n	8003c16 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba2:	e02b      	b.n	8003bfc <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3340      	adds	r3, #64	; 0x40
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d115      	bne.n	8003bf6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003bca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da12      	bge.n	8003bf6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	333f      	adds	r3, #63	; 0x3f
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fae8 	bl	80041c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3ce      	bcc.n	8003ba4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f004 f8ee 	bl	8007dfc <USB_ReadInterrupts>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c2a:	d155      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c30:	e045      	b.n	8003cbe <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d12e      	bne.n	8003cb8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	da2b      	bge.n	8003cb8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c6c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d121      	bne.n	8003cb8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cb4:	6053      	str	r3, [r2, #4]
            break;
 8003cb6:	e007      	b.n	8003cc8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	3301      	adds	r3, #1
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d3b4      	bcc.n	8003c32 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f004 f88d 	bl	8007dfc <USB_ReadInterrupts>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cec:	d10a      	bne.n	8003d04 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f006 fd38 	bl	800a764 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f004 f877 	bl	8007dfc <USB_ReadInterrupts>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d115      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f006 fd28 	bl	800a780 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	605a      	str	r2, [r3, #4]
 8003d40:	e000      	b.n	8003d44 <HAL_PCD_IRQHandler+0x992>
      return;
 8003d42:	bf00      	nop
    }
  }
}
 8003d44:	3734      	adds	r7, #52	; 0x34
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd90      	pop	{r4, r7, pc}

08003d4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	460b      	mov	r3, r1
 8003d54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_PCD_SetAddress+0x1a>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e013      	b.n	8003d8c <HAL_PCD_SetAddress+0x42>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f003 ffd5 	bl	8007d2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	4611      	mov	r1, r2
 8003da0:	461a      	mov	r2, r3
 8003da2:	4603      	mov	r3, r0
 8003da4:	70fb      	strb	r3, [r7, #3]
 8003da6:	460b      	mov	r3, r1
 8003da8:	803b      	strh	r3, [r7, #0]
 8003daa:	4613      	mov	r3, r2
 8003dac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	da0f      	bge.n	8003dda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	f003 020f 	and.w	r2, r3, #15
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	3338      	adds	r3, #56	; 0x38
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	3304      	adds	r3, #4
 8003dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	705a      	strb	r2, [r3, #1]
 8003dd8:	e00f      	b.n	8003dfa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	f003 020f 	and.w	r2, r3, #15
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	4413      	add	r3, r2
 8003df0:	3304      	adds	r3, #4
 8003df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e06:	883a      	ldrh	r2, [r7, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	78ba      	ldrb	r2, [r7, #2]
 8003e10:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	785b      	ldrb	r3, [r3, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e24:	78bb      	ldrb	r3, [r7, #2]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d102      	bne.n	8003e30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_PCD_EP_Open+0xaa>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e00e      	b.n	8003e5c <HAL_PCD_EP_Open+0xc8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68f9      	ldr	r1, [r7, #12]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f003 f849 	bl	8006ee4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da0f      	bge.n	8003e98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	f003 020f 	and.w	r2, r3, #15
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3338      	adds	r3, #56	; 0x38
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	705a      	strb	r2, [r3, #1]
 8003e96:	e00f      	b.n	8003eb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	f003 020f 	and.w	r2, r3, #15
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	3304      	adds	r3, #4
 8003eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_PCD_EP_Close+0x6e>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e00e      	b.n	8003ef0 <HAL_PCD_EP_Close+0x8c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f003 f887 	bl	8006ff4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	460b      	mov	r3, r1
 8003f06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f08:	7afb      	ldrb	r3, [r7, #11]
 8003f0a:	f003 020f 	and.w	r2, r3, #15
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3304      	adds	r3, #4
 8003f20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2200      	movs	r2, #0
 8003f38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f3a:	7afb      	ldrb	r3, [r7, #11]
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d102      	bne.n	8003f54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f54:	7afb      	ldrb	r3, [r7, #11]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	f003 fb6e 	bl	800764c <USB_EP0StartXfer>
 8003f70:	e008      	b.n	8003f84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6979      	ldr	r1, [r7, #20]
 8003f80:	f003 f914 	bl	80071ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b083      	sub	sp, #12
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	f003 020f 	and.w	r2, r3, #15
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003fb0:	681b      	ldr	r3, [r3, #0]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b086      	sub	sp, #24
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fce:	7afb      	ldrb	r3, [r7, #11]
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	3338      	adds	r3, #56	; 0x38
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ffe:	7afb      	ldrb	r3, [r7, #11]
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	b2da      	uxtb	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d102      	bne.n	8004018 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004018:	7afb      	ldrb	r3, [r7, #11]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	6979      	ldr	r1, [r7, #20]
 8004030:	f003 fb0c 	bl	800764c <USB_EP0StartXfer>
 8004034:	e008      	b.n	8004048 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6818      	ldr	r0, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	461a      	mov	r2, r3
 8004042:	6979      	ldr	r1, [r7, #20]
 8004044:	f003 f8b2 	bl	80071ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	460b      	mov	r3, r1
 800405c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	f003 020f 	and.w	r2, r3, #15
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	429a      	cmp	r2, r3
 800406a:	d901      	bls.n	8004070 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e050      	b.n	8004112 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004074:	2b00      	cmp	r3, #0
 8004076:	da0f      	bge.n	8004098 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	f003 020f 	and.w	r2, r3, #15
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	3338      	adds	r3, #56	; 0x38
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4413      	add	r3, r2
 800408c:	3304      	adds	r3, #4
 800408e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	705a      	strb	r2, [r3, #1]
 8004096:	e00d      	b.n	80040b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	4613      	mov	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	3304      	adds	r3, #4
 80040ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_PCD_EP_SetStall+0x82>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e01e      	b.n	8004112 <HAL_PCD_EP_SetStall+0xc0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68f9      	ldr	r1, [r7, #12]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f003 fd4e 	bl	8007b84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	b2d9      	uxtb	r1, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004102:	461a      	mov	r2, r3
 8004104:	f003 ff40 	bl	8007f88 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	460b      	mov	r3, r1
 8004124:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	f003 020f 	and.w	r2, r3, #15
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d901      	bls.n	8004138 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e042      	b.n	80041be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800413c:	2b00      	cmp	r3, #0
 800413e:	da0f      	bge.n	8004160 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	f003 020f 	and.w	r2, r3, #15
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	3338      	adds	r3, #56	; 0x38
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4413      	add	r3, r2
 8004154:	3304      	adds	r3, #4
 8004156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	705a      	strb	r2, [r3, #1]
 800415e:	e00f      	b.n	8004180 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	3304      	adds	r3, #4
 8004178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_PCD_EP_ClrStall+0x86>
 800419c:	2302      	movs	r3, #2
 800419e:	e00e      	b.n	80041be <HAL_PCD_EP_ClrStall+0xa4>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68f9      	ldr	r1, [r7, #12]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f003 fd56 	bl	8007c60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	460b      	mov	r3, r1
 80041d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80041d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	da0c      	bge.n	80041f4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	f003 020f 	and.w	r2, r3, #15
 80041e0:	4613      	mov	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	4413      	add	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	3338      	adds	r3, #56	; 0x38
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4413      	add	r3, r2
 80041ee:	3304      	adds	r3, #4
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	e00c      	b.n	800420e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	f003 020f 	and.w	r2, r3, #15
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	3304      	adds	r3, #4
 800420c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68f9      	ldr	r1, [r7, #12]
 8004214:	4618      	mov	r0, r3
 8004216:	f003 fb75 	bl	8007904 <USB_EPStopXfer>
 800421a:	4603      	mov	r3, r0
 800421c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800421e:	7afb      	ldrb	r3, [r7, #11]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af02      	add	r7, sp, #8
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	3338      	adds	r3, #56	; 0x38
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	3304      	adds	r3, #4
 800424e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1a      	ldr	r2, [r3, #32]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	429a      	cmp	r2, r3
 800425a:	d901      	bls.n	8004260 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e06c      	b.n	800433a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	429a      	cmp	r2, r3
 8004274:	d902      	bls.n	800427c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	3303      	adds	r3, #3
 8004280:	089b      	lsrs	r3, r3, #2
 8004282:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004284:	e02b      	b.n	80042de <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	429a      	cmp	r2, r3
 800429a:	d902      	bls.n	80042a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	3303      	adds	r3, #3
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6919      	ldr	r1, [r3, #16]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	4603      	mov	r3, r0
 80042c0:	6978      	ldr	r0, [r7, #20]
 80042c2:	f003 fbc9 	bl	8007a58 <USB_WritePacket>

    ep->xfer_buff  += len;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	441a      	add	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1a      	ldr	r2, [r3, #32]
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	441a      	add	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d809      	bhi.n	8004308 <PCD_WriteEmptyTxFifo+0xe0>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1a      	ldr	r2, [r3, #32]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d203      	bcs.n	8004308 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1be      	bne.n	8004286 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	429a      	cmp	r2, r3
 8004312:	d811      	bhi.n	8004338 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	2201      	movs	r2, #1
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	43db      	mvns	r3, r3
 800432e:	6939      	ldr	r1, [r7, #16]
 8004330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004334:	4013      	ands	r3, r2
 8004336:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3720      	adds	r7, #32
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	333c      	adds	r3, #60	; 0x3c
 800435c:	3304      	adds	r3, #4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d17b      	bne.n	8004472 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d015      	beq.n	80043b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	4a61      	ldr	r2, [pc, #388]	; (800450c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	f240 80b9 	bls.w	8004500 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80b3 	beq.w	8004500 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	461a      	mov	r2, r3
 80043a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ac:	6093      	str	r3, [r2, #8]
 80043ae:	e0a7      	b.n	8004500 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f003 0320 	and.w	r3, r3, #32
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d009      	beq.n	80043ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	461a      	mov	r2, r3
 80043c8:	2320      	movs	r3, #32
 80043ca:	6093      	str	r3, [r2, #8]
 80043cc:	e098      	b.n	8004500 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f040 8093 	bne.w	8004500 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	4a4b      	ldr	r2, [pc, #300]	; (800450c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d90f      	bls.n	8004402 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00a      	beq.n	8004402 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	461a      	mov	r2, r3
 80043fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fe:	6093      	str	r3, [r2, #8]
 8004400:	e07e      	b.n	8004500 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	4413      	add	r3, r2
 8004414:	3304      	adds	r3, #4
 8004416:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	0159      	lsls	r1, r3, #5
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	440b      	add	r3, r1
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442e:	1ad2      	subs	r2, r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d114      	bne.n	8004464 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800444c:	461a      	mov	r2, r3
 800444e:	2101      	movs	r1, #1
 8004450:	f003 fd9a 	bl	8007f88 <USB_EP0_OutStart>
 8004454:	e006      	b.n	8004464 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	441a      	add	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	4619      	mov	r1, r3
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f006 f8b6 	bl	800a5dc <HAL_PCD_DataOutStageCallback>
 8004470:	e046      	b.n	8004500 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	4a26      	ldr	r2, [pc, #152]	; (8004510 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d124      	bne.n	80044c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004490:	461a      	mov	r2, r3
 8004492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004496:	6093      	str	r3, [r2, #8]
 8004498:	e032      	b.n	8004500 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f003 0320 	and.w	r3, r3, #32
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d008      	beq.n	80044b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b0:	461a      	mov	r2, r3
 80044b2:	2320      	movs	r3, #32
 80044b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	4619      	mov	r1, r3
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f006 f88d 	bl	800a5dc <HAL_PCD_DataOutStageCallback>
 80044c2:	e01d      	b.n	8004500 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d114      	bne.n	80044f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	4613      	mov	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d108      	bne.n	80044f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044ec:	461a      	mov	r2, r3
 80044ee:	2100      	movs	r1, #0
 80044f0:	f003 fd4a 	bl	8007f88 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	4619      	mov	r1, r3
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f006 f86e 	bl	800a5dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	4f54300a 	.word	0x4f54300a
 8004510:	4f54310a 	.word	0x4f54310a

08004514 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	333c      	adds	r3, #60	; 0x3c
 800452c:	3304      	adds	r3, #4
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4a15      	ldr	r2, [pc, #84]	; (800459c <PCD_EP_OutSetupPacket_int+0x88>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d90e      	bls.n	8004568 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004560:	461a      	mov	r2, r3
 8004562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004566:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f006 f825 	bl	800a5b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4a0a      	ldr	r2, [pc, #40]	; (800459c <PCD_EP_OutSetupPacket_int+0x88>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d90c      	bls.n	8004590 <PCD_EP_OutSetupPacket_int+0x7c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d108      	bne.n	8004590 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004588:	461a      	mov	r2, r3
 800458a:	2101      	movs	r1, #1
 800458c:	f003 fcfc 	bl	8007f88 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	4f54300a 	.word	0x4f54300a

080045a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	70fb      	strb	r3, [r7, #3]
 80045ac:	4613      	mov	r3, r2
 80045ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d107      	bne.n	80045ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80045be:	883b      	ldrh	r3, [r7, #0]
 80045c0:	0419      	lsls	r1, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
 80045cc:	e028      	b.n	8004620 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045dc:	2300      	movs	r3, #0
 80045de:	73fb      	strb	r3, [r7, #15]
 80045e0:	e00d      	b.n	80045fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	3340      	adds	r3, #64	; 0x40
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	0c1b      	lsrs	r3, r3, #16
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	4413      	add	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	3301      	adds	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
 80045fe:	7bfa      	ldrb	r2, [r7, #15]
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	3b01      	subs	r3, #1
 8004604:	429a      	cmp	r2, r3
 8004606:	d3ec      	bcc.n	80045e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004608:	883b      	ldrh	r3, [r7, #0]
 800460a:	0418      	lsls	r0, r3, #16
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6819      	ldr	r1, [r3, #0]
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	3b01      	subs	r3, #1
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	4302      	orrs	r2, r0
 8004618:	3340      	adds	r3, #64	; 0x40
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	887a      	ldrh	r2, [r7, #2]
 8004640:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_PCDEx_ActivateLPM+0x44>)
 8004680:	4313      	orrs	r3, r2
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	10000003 	.word	0x10000003

08004698 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a04      	ldr	r2, [pc, #16]	; (80046b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40007000 	.word	0x40007000

080046b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046c0:	2300      	movs	r3, #0
 80046c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e291      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 8087 	beq.w	80047ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046dc:	4b96      	ldr	r3, [pc, #600]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 030c 	and.w	r3, r3, #12
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d00c      	beq.n	8004702 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e8:	4b93      	ldr	r3, [pc, #588]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d112      	bne.n	800471a <HAL_RCC_OscConfig+0x62>
 80046f4:	4b90      	ldr	r3, [pc, #576]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004700:	d10b      	bne.n	800471a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004702:	4b8d      	ldr	r3, [pc, #564]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d06c      	beq.n	80047e8 <HAL_RCC_OscConfig+0x130>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d168      	bne.n	80047e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e26b      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004722:	d106      	bne.n	8004732 <HAL_RCC_OscConfig+0x7a>
 8004724:	4b84      	ldr	r3, [pc, #528]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a83      	ldr	r2, [pc, #524]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 800472a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e02e      	b.n	8004790 <HAL_RCC_OscConfig+0xd8>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10c      	bne.n	8004754 <HAL_RCC_OscConfig+0x9c>
 800473a:	4b7f      	ldr	r3, [pc, #508]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a7e      	ldr	r2, [pc, #504]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	4b7c      	ldr	r3, [pc, #496]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a7b      	ldr	r2, [pc, #492]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 800474c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e01d      	b.n	8004790 <HAL_RCC_OscConfig+0xd8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800475c:	d10c      	bne.n	8004778 <HAL_RCC_OscConfig+0xc0>
 800475e:	4b76      	ldr	r3, [pc, #472]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a75      	ldr	r2, [pc, #468]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	4b73      	ldr	r3, [pc, #460]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a72      	ldr	r2, [pc, #456]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e00b      	b.n	8004790 <HAL_RCC_OscConfig+0xd8>
 8004778:	4b6f      	ldr	r3, [pc, #444]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a6e      	ldr	r2, [pc, #440]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 800477e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	4b6c      	ldr	r3, [pc, #432]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a6b      	ldr	r2, [pc, #428]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 800478a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800478e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d013      	beq.n	80047c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fc fe42 	bl	8001420 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a0:	f7fc fe3e 	bl	8001420 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b64      	cmp	r3, #100	; 0x64
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e21f      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b2:	4b61      	ldr	r3, [pc, #388]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0xe8>
 80047be:	e014      	b.n	80047ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fc fe2e 	bl	8001420 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c8:	f7fc fe2a 	bl	8001420 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	; 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e20b      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047da:	4b57      	ldr	r3, [pc, #348]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x110>
 80047e6:	e000      	b.n	80047ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d069      	beq.n	80048ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047f6:	4b50      	ldr	r3, [pc, #320]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00b      	beq.n	800481a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004802:	4b4d      	ldr	r3, [pc, #308]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b08      	cmp	r3, #8
 800480c:	d11c      	bne.n	8004848 <HAL_RCC_OscConfig+0x190>
 800480e:	4b4a      	ldr	r3, [pc, #296]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d116      	bne.n	8004848 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800481a:	4b47      	ldr	r3, [pc, #284]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_RCC_OscConfig+0x17a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d001      	beq.n	8004832 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e1df      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004832:	4b41      	ldr	r3, [pc, #260]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	493d      	ldr	r1, [pc, #244]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004842:	4313      	orrs	r3, r2
 8004844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004846:	e040      	b.n	80048ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d023      	beq.n	8004898 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004850:	4b39      	ldr	r3, [pc, #228]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a38      	ldr	r2, [pc, #224]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fc fde0 	bl	8001420 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004864:	f7fc fddc 	bl	8001420 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e1bd      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004876:	4b30      	ldr	r3, [pc, #192]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004882:	4b2d      	ldr	r3, [pc, #180]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4929      	ldr	r1, [pc, #164]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004892:	4313      	orrs	r3, r2
 8004894:	600b      	str	r3, [r1, #0]
 8004896:	e018      	b.n	80048ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004898:	4b27      	ldr	r3, [pc, #156]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a26      	ldr	r2, [pc, #152]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fc fdbc 	bl	8001420 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ac:	f7fc fdb8 	bl	8001420 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e199      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048be:	4b1e      	ldr	r3, [pc, #120]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d038      	beq.n	8004948 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d019      	beq.n	8004912 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048de:	4b16      	ldr	r3, [pc, #88]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 80048e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e2:	4a15      	ldr	r2, [pc, #84]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ea:	f7fc fd99 	bl	8001420 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f2:	f7fc fd95 	bl	8001420 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e176      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x23a>
 8004910:	e01a      	b.n	8004948 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004916:	4a08      	ldr	r2, [pc, #32]	; (8004938 <HAL_RCC_OscConfig+0x280>)
 8004918:	f023 0301 	bic.w	r3, r3, #1
 800491c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491e:	f7fc fd7f 	bl	8001420 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004924:	e00a      	b.n	800493c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004926:	f7fc fd7b 	bl	8001420 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d903      	bls.n	800493c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e15c      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
 8004938:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800493c:	4b91      	ldr	r3, [pc, #580]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 800493e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1ee      	bne.n	8004926 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80a4 	beq.w	8004a9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004956:	4b8b      	ldr	r3, [pc, #556]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10d      	bne.n	800497e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	4b88      	ldr	r3, [pc, #544]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	4a87      	ldr	r2, [pc, #540]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496c:	6413      	str	r3, [r2, #64]	; 0x40
 800496e:	4b85      	ldr	r3, [pc, #532]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	60bb      	str	r3, [r7, #8]
 8004978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800497e:	4b82      	ldr	r3, [pc, #520]	; (8004b88 <HAL_RCC_OscConfig+0x4d0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004986:	2b00      	cmp	r3, #0
 8004988:	d118      	bne.n	80049bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800498a:	4b7f      	ldr	r3, [pc, #508]	; (8004b88 <HAL_RCC_OscConfig+0x4d0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a7e      	ldr	r2, [pc, #504]	; (8004b88 <HAL_RCC_OscConfig+0x4d0>)
 8004990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004996:	f7fc fd43 	bl	8001420 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800499e:	f7fc fd3f 	bl	8001420 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b64      	cmp	r3, #100	; 0x64
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e120      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b0:	4b75      	ldr	r3, [pc, #468]	; (8004b88 <HAL_RCC_OscConfig+0x4d0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d106      	bne.n	80049d2 <HAL_RCC_OscConfig+0x31a>
 80049c4:	4b6f      	ldr	r3, [pc, #444]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	4a6e      	ldr	r2, [pc, #440]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6713      	str	r3, [r2, #112]	; 0x70
 80049d0:	e02d      	b.n	8004a2e <HAL_RCC_OscConfig+0x376>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x33c>
 80049da:	4b6a      	ldr	r3, [pc, #424]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	4a69      	ldr	r2, [pc, #420]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 80049e0:	f023 0301 	bic.w	r3, r3, #1
 80049e4:	6713      	str	r3, [r2, #112]	; 0x70
 80049e6:	4b67      	ldr	r3, [pc, #412]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	4a66      	ldr	r2, [pc, #408]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 80049ec:	f023 0304 	bic.w	r3, r3, #4
 80049f0:	6713      	str	r3, [r2, #112]	; 0x70
 80049f2:	e01c      	b.n	8004a2e <HAL_RCC_OscConfig+0x376>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d10c      	bne.n	8004a16 <HAL_RCC_OscConfig+0x35e>
 80049fc:	4b61      	ldr	r3, [pc, #388]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 80049fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a00:	4a60      	ldr	r2, [pc, #384]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004a02:	f043 0304 	orr.w	r3, r3, #4
 8004a06:	6713      	str	r3, [r2, #112]	; 0x70
 8004a08:	4b5e      	ldr	r3, [pc, #376]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0c:	4a5d      	ldr	r2, [pc, #372]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6713      	str	r3, [r2, #112]	; 0x70
 8004a14:	e00b      	b.n	8004a2e <HAL_RCC_OscConfig+0x376>
 8004a16:	4b5b      	ldr	r3, [pc, #364]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	4a5a      	ldr	r2, [pc, #360]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	6713      	str	r3, [r2, #112]	; 0x70
 8004a22:	4b58      	ldr	r3, [pc, #352]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	4a57      	ldr	r2, [pc, #348]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004a28:	f023 0304 	bic.w	r3, r3, #4
 8004a2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d015      	beq.n	8004a62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a36:	f7fc fcf3 	bl	8001420 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3c:	e00a      	b.n	8004a54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3e:	f7fc fcef 	bl	8001420 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e0ce      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a54:	4b4b      	ldr	r3, [pc, #300]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0ee      	beq.n	8004a3e <HAL_RCC_OscConfig+0x386>
 8004a60:	e014      	b.n	8004a8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a62:	f7fc fcdd 	bl	8001420 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a68:	e00a      	b.n	8004a80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6a:	f7fc fcd9 	bl	8001420 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e0b8      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a80:	4b40      	ldr	r3, [pc, #256]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1ee      	bne.n	8004a6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d105      	bne.n	8004a9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a92:	4b3c      	ldr	r3, [pc, #240]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	4a3b      	ldr	r2, [pc, #236]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 80a4 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa8:	4b36      	ldr	r3, [pc, #216]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 030c 	and.w	r3, r3, #12
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d06b      	beq.n	8004b8c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d149      	bne.n	8004b50 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004abc:	4b31      	ldr	r3, [pc, #196]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a30      	ldr	r2, [pc, #192]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fc fcaa 	bl	8001420 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7fc fca6 	bl	8001420 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e087      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae2:	4b28      	ldr	r3, [pc, #160]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69da      	ldr	r2, [r3, #28]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	019b      	lsls	r3, r3, #6
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	3b01      	subs	r3, #1
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	061b      	lsls	r3, r3, #24
 8004b12:	4313      	orrs	r3, r2
 8004b14:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004b16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b1a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004b22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b28:	f7fc fc7a 	bl	8001420 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b30:	f7fc fc76 	bl	8001420 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e057      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f0      	beq.n	8004b30 <HAL_RCC_OscConfig+0x478>
 8004b4e:	e04f      	b.n	8004bf0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a0b      	ldr	r2, [pc, #44]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5c:	f7fc fc60 	bl	8001420 <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b64:	f7fc fc5c 	bl	8001420 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e03d      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b76:	4b03      	ldr	r3, [pc, #12]	; (8004b84 <HAL_RCC_OscConfig+0x4cc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f0      	bne.n	8004b64 <HAL_RCC_OscConfig+0x4ac>
 8004b82:	e035      	b.n	8004bf0 <HAL_RCC_OscConfig+0x538>
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_RCC_OscConfig+0x544>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d028      	beq.n	8004bec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d121      	bne.n	8004bec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d11a      	bne.n	8004bec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bc2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d111      	bne.n	8004bec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d107      	bne.n	8004bec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40023800 	.word	0x40023800

08004c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0d0      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c18:	4b6a      	ldr	r3, [pc, #424]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d910      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c26:	4b67      	ldr	r3, [pc, #412]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 020f 	bic.w	r2, r3, #15
 8004c2e:	4965      	ldr	r1, [pc, #404]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b63      	ldr	r3, [pc, #396]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0b8      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c60:	4b59      	ldr	r3, [pc, #356]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a58      	ldr	r2, [pc, #352]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c78:	4b53      	ldr	r3, [pc, #332]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b50      	ldr	r3, [pc, #320]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	494d      	ldr	r1, [pc, #308]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d040      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b47      	ldr	r3, [pc, #284]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d115      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d107      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc2:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e073      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd2:	4b3d      	ldr	r3, [pc, #244]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e06b      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ce2:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f023 0203 	bic.w	r2, r3, #3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	4936      	ldr	r1, [pc, #216]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf4:	f7fc fb94 	bl	8001420 <HAL_GetTick>
 8004cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfc:	f7fc fb90 	bl	8001420 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e053      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	4b2d      	ldr	r3, [pc, #180]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 020c 	and.w	r2, r3, #12
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d1eb      	bne.n	8004cfc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d24:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d210      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 020f 	bic.w	r2, r3, #15
 8004d3a:	4922      	ldr	r1, [pc, #136]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e032      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4916      	ldr	r1, [pc, #88]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d7e:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	490e      	ldr	r1, [pc, #56]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d92:	f000 f821 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	490a      	ldr	r1, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x1cc>)
 8004da4:	5ccb      	ldrb	r3, [r1, r3]
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	4a09      	ldr	r2, [pc, #36]	; (8004dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8004dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RCC_ClockConfig+0x1d4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fc faf0 	bl	8001398 <HAL_InitTick>

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023c00 	.word	0x40023c00
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	0800b584 	.word	0x0800b584
 8004dd0:	20000000 	.word	0x20000000
 8004dd4:	20000004 	.word	0x20000004

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b094      	sub	sp, #80	; 0x50
 8004dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	647b      	str	r3, [r7, #68]	; 0x44
 8004de4:	2300      	movs	r3, #0
 8004de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004de8:	2300      	movs	r3, #0
 8004dea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df0:	4b79      	ldr	r3, [pc, #484]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d00d      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x40>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	f200 80e1 	bhi.w	8004fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x34>
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e0a:	e0db      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b73      	ldr	r3, [pc, #460]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e10:	e0db      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e12:	4b73      	ldr	r3, [pc, #460]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e16:	e0d8      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e18:	4b6f      	ldr	r3, [pc, #444]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e20:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e22:	4b6d      	ldr	r3, [pc, #436]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d063      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2e:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	099b      	lsrs	r3, r3, #6
 8004e34:	2200      	movs	r2, #0
 8004e36:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e40:	633b      	str	r3, [r7, #48]	; 0x30
 8004e42:	2300      	movs	r3, #0
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
 8004e46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	462b      	mov	r3, r5
 8004e4e:	f04f 0000 	mov.w	r0, #0
 8004e52:	f04f 0100 	mov.w	r1, #0
 8004e56:	0159      	lsls	r1, r3, #5
 8004e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e5c:	0150      	lsls	r0, r2, #5
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4621      	mov	r1, r4
 8004e64:	1a51      	subs	r1, r2, r1
 8004e66:	6139      	str	r1, [r7, #16]
 8004e68:	4629      	mov	r1, r5
 8004e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	018b      	lsls	r3, r1, #6
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e86:	4651      	mov	r1, sl
 8004e88:	018a      	lsls	r2, r1, #6
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e90:	4659      	mov	r1, fp
 8004e92:	eb63 0901 	sbc.w	r9, r3, r1
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eaa:	4690      	mov	r8, r2
 8004eac:	4699      	mov	r9, r3
 8004eae:	4623      	mov	r3, r4
 8004eb0:	eb18 0303 	adds.w	r3, r8, r3
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	462b      	mov	r3, r5
 8004eb8:	eb49 0303 	adc.w	r3, r9, r3
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eca:	4629      	mov	r1, r5
 8004ecc:	024b      	lsls	r3, r1, #9
 8004ece:	4621      	mov	r1, r4
 8004ed0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	024a      	lsls	r2, r1, #9
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ede:	2200      	movs	r2, #0
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ee8:	f7fb f9ea 	bl	80002c0 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef4:	e058      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef6:	4b38      	ldr	r3, [pc, #224]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	2200      	movs	r2, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	4611      	mov	r1, r2
 8004f02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f06:	623b      	str	r3, [r7, #32]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f10:	4642      	mov	r2, r8
 8004f12:	464b      	mov	r3, r9
 8004f14:	f04f 0000 	mov.w	r0, #0
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	0159      	lsls	r1, r3, #5
 8004f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f22:	0150      	lsls	r0, r2, #5
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4641      	mov	r1, r8
 8004f2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f2e:	4649      	mov	r1, r9
 8004f30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f48:	ebb2 040a 	subs.w	r4, r2, sl
 8004f4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	00eb      	lsls	r3, r5, #3
 8004f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5e:	00e2      	lsls	r2, r4, #3
 8004f60:	4614      	mov	r4, r2
 8004f62:	461d      	mov	r5, r3
 8004f64:	4643      	mov	r3, r8
 8004f66:	18e3      	adds	r3, r4, r3
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	eb45 0303 	adc.w	r3, r5, r3
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f7e:	4629      	mov	r1, r5
 8004f80:	028b      	lsls	r3, r1, #10
 8004f82:	4621      	mov	r1, r4
 8004f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f88:	4621      	mov	r1, r4
 8004f8a:	028a      	lsls	r2, r1, #10
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f92:	2200      	movs	r2, #0
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	61fa      	str	r2, [r7, #28]
 8004f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f9c:	f7fb f990 	bl	80002c0 <__aeabi_uldivmod>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004fb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc2:	e002      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc4:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8004fc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3750      	adds	r7, #80	; 0x50
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	00f42400 	.word	0x00f42400
 8004fe0:	007a1200 	.word	0x007a1200

08004fe4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20000000 	.word	0x20000000

08004ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005000:	f7ff fff0 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0a9b      	lsrs	r3, r3, #10
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4903      	ldr	r1, [pc, #12]	; (8005020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40023800 	.word	0x40023800
 8005020:	0800b594 	.word	0x0800b594

08005024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005028:	f7ff ffdc 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	0b5b      	lsrs	r3, r3, #13
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4903      	ldr	r1, [pc, #12]	; (8005048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40023800 	.word	0x40023800
 8005048:	0800b594 	.word	0x0800b594

0800504c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d012      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005074:	4b69      	ldr	r3, [pc, #420]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	4a68      	ldr	r2, [pc, #416]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800507e:	6093      	str	r3, [r2, #8]
 8005080:	4b66      	ldr	r3, [pc, #408]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005088:	4964      	ldr	r1, [pc, #400]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508a:	4313      	orrs	r3, r2
 800508c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005096:	2301      	movs	r3, #1
 8005098:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d017      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050a6:	4b5d      	ldr	r3, [pc, #372]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b4:	4959      	ldr	r1, [pc, #356]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c4:	d101      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80050c6:	2301      	movs	r3, #1
 80050c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80050d2:	2301      	movs	r3, #1
 80050d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d017      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050e2:	4b4e      	ldr	r3, [pc, #312]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	494a      	ldr	r1, [pc, #296]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005100:	d101      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005102:	2301      	movs	r3, #1
 8005104:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800510e:	2301      	movs	r3, #1
 8005110:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800511e:	2301      	movs	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 808b 	beq.w	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005130:	4b3a      	ldr	r3, [pc, #232]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	4a39      	ldr	r2, [pc, #228]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800513a:	6413      	str	r3, [r2, #64]	; 0x40
 800513c:	4b37      	ldr	r3, [pc, #220]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005148:	4b35      	ldr	r3, [pc, #212]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a34      	ldr	r2, [pc, #208]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800514e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005154:	f7fc f964 	bl	8001420 <HAL_GetTick>
 8005158:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800515a:	e008      	b.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515c:	f7fc f960 	bl	8001420 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	; 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e357      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800516e:	4b2c      	ldr	r3, [pc, #176]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800517a:	4b28      	ldr	r3, [pc, #160]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005182:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d035      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	429a      	cmp	r2, r3
 8005196:	d02e      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005198:	4b20      	ldr	r3, [pc, #128]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051a2:	4b1e      	ldr	r3, [pc, #120]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a6:	4a1d      	ldr	r2, [pc, #116]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051ae:	4b1b      	ldr	r3, [pc, #108]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b2:	4a1a      	ldr	r2, [pc, #104]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80051ba:	4a18      	ldr	r2, [pc, #96]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051c0:	4b16      	ldr	r3, [pc, #88]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d114      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fc f928 	bl	8001420 <HAL_GetTick>
 80051d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d2:	e00a      	b.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d4:	f7fc f924 	bl	8001420 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e319      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ea:	4b0c      	ldr	r3, [pc, #48]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0ee      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005202:	d111      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005212:	400b      	ands	r3, r1
 8005214:	4901      	ldr	r1, [pc, #4]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]
 800521a:	e00b      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800521c:	40023800 	.word	0x40023800
 8005220:	40007000 	.word	0x40007000
 8005224:	0ffffcff 	.word	0x0ffffcff
 8005228:	4baa      	ldr	r3, [pc, #680]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	4aa9      	ldr	r2, [pc, #676]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800522e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005232:	6093      	str	r3, [r2, #8]
 8005234:	4ba7      	ldr	r3, [pc, #668]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005236:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005240:	49a4      	ldr	r1, [pc, #656]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005242:	4313      	orrs	r3, r2
 8005244:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	2b00      	cmp	r3, #0
 8005250:	d010      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005252:	4ba0      	ldr	r3, [pc, #640]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005258:	4a9e      	ldr	r2, [pc, #632]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800525a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800525e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005262:	4b9c      	ldr	r3, [pc, #624]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005264:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526c:	4999      	ldr	r1, [pc, #612]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005280:	4b94      	ldr	r3, [pc, #592]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800528e:	4991      	ldr	r1, [pc, #580]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052a2:	4b8c      	ldr	r3, [pc, #560]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052b0:	4988      	ldr	r1, [pc, #544]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052c4:	4b83      	ldr	r3, [pc, #524]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d2:	4980      	ldr	r1, [pc, #512]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052e6:	4b7b      	ldr	r3, [pc, #492]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f4:	4977      	ldr	r1, [pc, #476]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005308:	4b72      	ldr	r3, [pc, #456]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	496f      	ldr	r1, [pc, #444]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800532a:	4b6a      	ldr	r3, [pc, #424]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005330:	f023 020c 	bic.w	r2, r3, #12
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005338:	4966      	ldr	r1, [pc, #408]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800534c:	4b61      	ldr	r3, [pc, #388]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535a:	495e      	ldr	r1, [pc, #376]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800536e:	4b59      	ldr	r3, [pc, #356]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005374:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537c:	4955      	ldr	r1, [pc, #340]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800537e:	4313      	orrs	r3, r2
 8005380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005390:	4b50      	ldr	r3, [pc, #320]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539e:	494d      	ldr	r1, [pc, #308]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80053b2:	4b48      	ldr	r3, [pc, #288]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c0:	4944      	ldr	r1, [pc, #272]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80053d4:	4b3f      	ldr	r3, [pc, #252]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e2:	493c      	ldr	r1, [pc, #240]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80053f6:	4b37      	ldr	r3, [pc, #220]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005404:	4933      	ldr	r1, [pc, #204]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005418:	4b2e      	ldr	r3, [pc, #184]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005426:	492b      	ldr	r1, [pc, #172]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d011      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800543a:	4b26      	ldr	r3, [pc, #152]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800543c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005440:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005448:	4922      	ldr	r1, [pc, #136]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005458:	d101      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800545a:	2301      	movs	r3, #1
 800545c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800546a:	2301      	movs	r3, #1
 800546c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800547a:	4b16      	ldr	r3, [pc, #88]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800547c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005480:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005488:	4912      	ldr	r1, [pc, #72]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800549c:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ac:	4909      	ldr	r1, [pc, #36]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d006      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80d9 	beq.w	800567a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054c8:	4b02      	ldr	r3, [pc, #8]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a01      	ldr	r2, [pc, #4]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054d2:	e001      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80054d4:	40023800 	.word	0x40023800
 80054d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054da:	f7fb ffa1 	bl	8001420 <HAL_GetTick>
 80054de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054e0:	e008      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054e2:	f7fb ff9d 	bl	8001420 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b64      	cmp	r3, #100	; 0x64
 80054ee:	d901      	bls.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e194      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054f4:	4b6c      	ldr	r3, [pc, #432]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1f0      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d021      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	2b00      	cmp	r3, #0
 8005512:	d11d      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005514:	4b64      	ldr	r3, [pc, #400]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551a:	0c1b      	lsrs	r3, r3, #16
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005522:	4b61      	ldr	r3, [pc, #388]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005528:	0e1b      	lsrs	r3, r3, #24
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	019a      	lsls	r2, r3, #6
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	041b      	lsls	r3, r3, #16
 800553a:	431a      	orrs	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	061b      	lsls	r3, r3, #24
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	071b      	lsls	r3, r3, #28
 8005548:	4957      	ldr	r1, [pc, #348]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005564:	d00a      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800556e:	2b00      	cmp	r3, #0
 8005570:	d02e      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800557a:	d129      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800557c:	4b4a      	ldr	r3, [pc, #296]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800557e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005582:	0c1b      	lsrs	r3, r3, #16
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800558a:	4b47      	ldr	r3, [pc, #284]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800558c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005590:	0f1b      	lsrs	r3, r3, #28
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	019a      	lsls	r2, r3, #6
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	061b      	lsls	r3, r3, #24
 80055aa:	431a      	orrs	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	071b      	lsls	r3, r3, #28
 80055b0:	493d      	ldr	r1, [pc, #244]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80055b8:	4b3b      	ldr	r3, [pc, #236]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055be:	f023 021f 	bic.w	r2, r3, #31
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	3b01      	subs	r3, #1
 80055c8:	4937      	ldr	r1, [pc, #220]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01d      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055dc:	4b32      	ldr	r3, [pc, #200]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e2:	0e1b      	lsrs	r3, r3, #24
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055ea:	4b2f      	ldr	r3, [pc, #188]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f0:	0f1b      	lsrs	r3, r3, #28
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	019a      	lsls	r2, r3, #6
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	041b      	lsls	r3, r3, #16
 8005604:	431a      	orrs	r2, r3
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	061b      	lsls	r3, r3, #24
 800560a:	431a      	orrs	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	071b      	lsls	r3, r3, #28
 8005610:	4925      	ldr	r1, [pc, #148]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d011      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	019a      	lsls	r2, r3, #6
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	041b      	lsls	r3, r3, #16
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	061b      	lsls	r3, r3, #24
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	071b      	lsls	r3, r3, #28
 8005640:	4919      	ldr	r1, [pc, #100]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005648:	4b17      	ldr	r3, [pc, #92]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a16      	ldr	r2, [pc, #88]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005654:	f7fb fee4 	bl	8001420 <HAL_GetTick>
 8005658:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800565a:	e008      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800565c:	f7fb fee0 	bl	8001420 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b64      	cmp	r3, #100	; 0x64
 8005668:	d901      	bls.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e0d7      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800566e:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0f0      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b01      	cmp	r3, #1
 800567e:	f040 80cd 	bne.w	800581c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005682:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800568c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568e:	f7fb fec7 	bl	8001420 <HAL_GetTick>
 8005692:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005694:	e00a      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005696:	f7fb fec3 	bl	8001420 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b64      	cmp	r3, #100	; 0x64
 80056a2:	d903      	bls.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e0ba      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80056a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056ac:	4b5e      	ldr	r3, [pc, #376]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b8:	d0ed      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x682>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d02e      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d12a      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056e2:	4b51      	ldr	r3, [pc, #324]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e8:	0c1b      	lsrs	r3, r3, #16
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056f0:	4b4d      	ldr	r3, [pc, #308]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	0f1b      	lsrs	r3, r3, #28
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	019a      	lsls	r2, r3, #6
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	061b      	lsls	r3, r3, #24
 8005710:	431a      	orrs	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	071b      	lsls	r3, r3, #28
 8005716:	4944      	ldr	r1, [pc, #272]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800571e:	4b42      	ldr	r3, [pc, #264]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005724:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	3b01      	subs	r3, #1
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	493d      	ldr	r1, [pc, #244]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d022      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800574c:	d11d      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800574e:	4b36      	ldr	r3, [pc, #216]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005754:	0e1b      	lsrs	r3, r3, #24
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800575c:	4b32      	ldr	r3, [pc, #200]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800575e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005762:	0f1b      	lsrs	r3, r3, #28
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	019a      	lsls	r2, r3, #6
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	041b      	lsls	r3, r3, #16
 8005776:	431a      	orrs	r2, r3
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	431a      	orrs	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	071b      	lsls	r3, r3, #28
 8005782:	4929      	ldr	r1, [pc, #164]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d028      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005796:	4b24      	ldr	r3, [pc, #144]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	0e1b      	lsrs	r3, r3, #24
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80057a4:	4b20      	ldr	r3, [pc, #128]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	0c1b      	lsrs	r3, r3, #16
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	019a      	lsls	r2, r3, #6
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	041b      	lsls	r3, r3, #16
 80057bc:	431a      	orrs	r2, r3
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	061b      	lsls	r3, r3, #24
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	071b      	lsls	r3, r3, #28
 80057ca:	4917      	ldr	r1, [pc, #92]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80057d2:	4b15      	ldr	r3, [pc, #84]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	4911      	ldr	r1, [pc, #68]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80057e8:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a0e      	ldr	r2, [pc, #56]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f4:	f7fb fe14 	bl	8001420 <HAL_GetTick>
 80057f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057fc:	f7fb fe10 	bl	8001420 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b64      	cmp	r3, #100	; 0x64
 8005808:	d901      	bls.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e007      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800580e:	4b06      	ldr	r3, [pc, #24]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800581a:	d1ef      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40023800 	.word	0x40023800

0800582c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e09d      	b.n	800597a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	2b00      	cmp	r3, #0
 8005844:	d108      	bne.n	8005858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800584e:	d009      	beq.n	8005864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	61da      	str	r2, [r3, #28]
 8005856:	e005      	b.n	8005864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb fbb4 	bl	8000fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058a4:	d902      	bls.n	80058ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e002      	b.n	80058b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058ba:	d007      	beq.n	80058cc <HAL_SPI_Init+0xa0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058c4:	d002      	beq.n	80058cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	431a      	orrs	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	ea42 0103 	orr.w	r1, r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	0c1b      	lsrs	r3, r3, #16
 8005928:	f003 0204 	and.w	r2, r3, #4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005948:	ea42 0103 	orr.w	r1, r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b088      	sub	sp, #32
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d101      	bne.n	80059a4 <HAL_SPI_Transmit+0x22>
 80059a0:	2302      	movs	r3, #2
 80059a2:	e158      	b.n	8005c56 <HAL_SPI_Transmit+0x2d4>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059ac:	f7fb fd38 	bl	8001420 <HAL_GetTick>
 80059b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d002      	beq.n	80059c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059c2:	2302      	movs	r3, #2
 80059c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059c6:	e13d      	b.n	8005c44 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_SPI_Transmit+0x52>
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d102      	bne.n	80059da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059d8:	e134      	b.n	8005c44 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2203      	movs	r2, #3
 80059de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	88fa      	ldrh	r2, [r7, #6]
 80059f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	88fa      	ldrh	r2, [r7, #6]
 80059f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a24:	d10f      	bne.n	8005a46 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b40      	cmp	r3, #64	; 0x40
 8005a52:	d007      	beq.n	8005a64 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a6c:	d94b      	bls.n	8005b06 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_SPI_Transmit+0xfa>
 8005a76:	8afb      	ldrh	r3, [r7, #22]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d13e      	bne.n	8005afa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	881a      	ldrh	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	1c9a      	adds	r2, r3, #2
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005aa0:	e02b      	b.n	8005afa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d112      	bne.n	8005ad6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	881a      	ldrh	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	1c9a      	adds	r2, r3, #2
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ad4:	e011      	b.n	8005afa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ad6:	f7fb fca3 	bl	8001420 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d803      	bhi.n	8005aee <HAL_SPI_Transmit+0x16c>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d102      	bne.n	8005af4 <HAL_SPI_Transmit+0x172>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005af8:	e0a4      	b.n	8005c44 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1ce      	bne.n	8005aa2 <HAL_SPI_Transmit+0x120>
 8005b04:	e07c      	b.n	8005c00 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_SPI_Transmit+0x192>
 8005b0e:	8afb      	ldrh	r3, [r7, #22]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d170      	bne.n	8005bf6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d912      	bls.n	8005b44 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	881a      	ldrh	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b02      	subs	r3, #2
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b42:	e058      	b.n	8005bf6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	7812      	ldrb	r2, [r2, #0]
 8005b50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b6a:	e044      	b.n	8005bf6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d12b      	bne.n	8005bd2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d912      	bls.n	8005baa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	881a      	ldrh	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	1c9a      	adds	r2, r3, #2
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b02      	subs	r3, #2
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ba8:	e025      	b.n	8005bf6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bd0:	e011      	b.n	8005bf6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bd2:	f7fb fc25 	bl	8001420 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d803      	bhi.n	8005bea <HAL_SPI_Transmit+0x268>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be8:	d102      	bne.n	8005bf0 <HAL_SPI_Transmit+0x26e>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d102      	bne.n	8005bf6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bf4:	e026      	b.n	8005c44 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1b5      	bne.n	8005b6c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f949 	bl	8005e9c <SPI_EndRxTxTransaction>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10a      	bne.n	8005c34 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	77fb      	strb	r3, [r7, #31]
 8005c40:	e000      	b.n	8005c44 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005c42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3720      	adds	r7, #32
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c70:	f7fb fbd6 	bl	8001420 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	1a9b      	subs	r3, r3, r2
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c80:	f7fb fbce 	bl	8001420 <HAL_GetTick>
 8005c84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c86:	4b39      	ldr	r3, [pc, #228]	; (8005d6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	015b      	lsls	r3, r3, #5
 8005c8c:	0d1b      	lsrs	r3, r3, #20
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	fb02 f303 	mul.w	r3, r2, r3
 8005c94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c96:	e054      	b.n	8005d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d050      	beq.n	8005d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ca0:	f7fb fbbe 	bl	8001420 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	69fa      	ldr	r2, [r7, #28]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d902      	bls.n	8005cb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d13d      	bne.n	8005d32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cce:	d111      	bne.n	8005cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd8:	d004      	beq.n	8005ce4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce2:	d107      	bne.n	8005cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfc:	d10f      	bne.n	8005d1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e017      	b.n	8005d62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d101      	bne.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	bf0c      	ite	eq
 8005d52:	2301      	moveq	r3, #1
 8005d54:	2300      	movne	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d19b      	bne.n	8005c98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3720      	adds	r7, #32
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000000 	.word	0x20000000

08005d70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	; 0x28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d82:	f7fb fb4d 	bl	8001420 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	1a9b      	subs	r3, r3, r2
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	4413      	add	r3, r2
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005d92:	f7fb fb45 	bl	8001420 <HAL_GetTick>
 8005d96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005da0:	4b3d      	ldr	r3, [pc, #244]	; (8005e98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	00da      	lsls	r2, r3, #3
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	0d1b      	lsrs	r3, r3, #20
 8005db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db2:	fb02 f303 	mul.w	r3, r2, r3
 8005db6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005db8:	e060      	b.n	8005e7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005dc0:	d107      	bne.n	8005dd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d050      	beq.n	8005e7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dda:	f7fb fb21 	bl	8001420 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d902      	bls.n	8005df0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d13d      	bne.n	8005e6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005dfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e08:	d111      	bne.n	8005e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e12:	d004      	beq.n	8005e1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1c:	d107      	bne.n	8005e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e36:	d10f      	bne.n	8005e58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e010      	b.n	8005e8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	4013      	ands	r3, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d196      	bne.n	8005dba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3728      	adds	r7, #40	; 0x28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000000 	.word	0x20000000

08005e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7ff ff5b 	bl	8005d70 <SPI_WaitFifoStateUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec4:	f043 0220 	orr.w	r2, r3, #32
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e046      	b.n	8005f5e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ed0:	4b25      	ldr	r3, [pc, #148]	; (8005f68 <SPI_EndRxTxTransaction+0xcc>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a25      	ldr	r2, [pc, #148]	; (8005f6c <SPI_EndRxTxTransaction+0xd0>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	0d5b      	lsrs	r3, r3, #21
 8005edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ee0:	fb02 f303 	mul.w	r3, r2, r3
 8005ee4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eee:	d112      	bne.n	8005f16 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2180      	movs	r1, #128	; 0x80
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f7ff feb0 	bl	8005c60 <SPI_WaitFlagStateUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d016      	beq.n	8005f34 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0a:	f043 0220 	orr.w	r2, r3, #32
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e023      	b.n	8005f5e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2c:	2b80      	cmp	r3, #128	; 0x80
 8005f2e:	d0f2      	beq.n	8005f16 <SPI_EndRxTxTransaction+0x7a>
 8005f30:	e000      	b.n	8005f34 <SPI_EndRxTxTransaction+0x98>
        break;
 8005f32:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7ff ff15 	bl	8005d70 <SPI_WaitFifoStateUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f50:	f043 0220 	orr.w	r2, r3, #32
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e000      	b.n	8005f5e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000000 	.word	0x20000000
 8005f6c:	165e9f81 	.word	0x165e9f81

08005f70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e040      	b.n	8006004 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fb f8aa 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2224      	movs	r2, #36	; 0x24
 8005f9c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0201 	bic.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f82c 	bl	800600c <UART_SetConfig>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e022      	b.n	8006004 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fa84 	bl	80064d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0201 	orr.w	r2, r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fb0b 	bl	8006618 <UART_CheckIdleState>
 8006002:	4603      	mov	r3, r0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	431a      	orrs	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4ba6      	ldr	r3, [pc, #664]	; (80062d0 <UART_SetConfig+0x2c4>)
 8006038:	4013      	ands	r3, r2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6812      	ldr	r2, [r2, #0]
 800603e:	6979      	ldr	r1, [r7, #20]
 8006040:	430b      	orrs	r3, r1
 8006042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	430a      	orrs	r2, r1
 800607c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a94      	ldr	r2, [pc, #592]	; (80062d4 <UART_SetConfig+0x2c8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d120      	bne.n	80060ca <UART_SetConfig+0xbe>
 8006088:	4b93      	ldr	r3, [pc, #588]	; (80062d8 <UART_SetConfig+0x2cc>)
 800608a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b03      	cmp	r3, #3
 8006094:	d816      	bhi.n	80060c4 <UART_SetConfig+0xb8>
 8006096:	a201      	add	r2, pc, #4	; (adr r2, 800609c <UART_SetConfig+0x90>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060ad 	.word	0x080060ad
 80060a0:	080060b9 	.word	0x080060b9
 80060a4:	080060b3 	.word	0x080060b3
 80060a8:	080060bf 	.word	0x080060bf
 80060ac:	2301      	movs	r3, #1
 80060ae:	77fb      	strb	r3, [r7, #31]
 80060b0:	e150      	b.n	8006354 <UART_SetConfig+0x348>
 80060b2:	2302      	movs	r3, #2
 80060b4:	77fb      	strb	r3, [r7, #31]
 80060b6:	e14d      	b.n	8006354 <UART_SetConfig+0x348>
 80060b8:	2304      	movs	r3, #4
 80060ba:	77fb      	strb	r3, [r7, #31]
 80060bc:	e14a      	b.n	8006354 <UART_SetConfig+0x348>
 80060be:	2308      	movs	r3, #8
 80060c0:	77fb      	strb	r3, [r7, #31]
 80060c2:	e147      	b.n	8006354 <UART_SetConfig+0x348>
 80060c4:	2310      	movs	r3, #16
 80060c6:	77fb      	strb	r3, [r7, #31]
 80060c8:	e144      	b.n	8006354 <UART_SetConfig+0x348>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a83      	ldr	r2, [pc, #524]	; (80062dc <UART_SetConfig+0x2d0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d132      	bne.n	800613a <UART_SetConfig+0x12e>
 80060d4:	4b80      	ldr	r3, [pc, #512]	; (80062d8 <UART_SetConfig+0x2cc>)
 80060d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060da:	f003 030c 	and.w	r3, r3, #12
 80060de:	2b0c      	cmp	r3, #12
 80060e0:	d828      	bhi.n	8006134 <UART_SetConfig+0x128>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <UART_SetConfig+0xdc>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	0800611d 	.word	0x0800611d
 80060ec:	08006135 	.word	0x08006135
 80060f0:	08006135 	.word	0x08006135
 80060f4:	08006135 	.word	0x08006135
 80060f8:	08006129 	.word	0x08006129
 80060fc:	08006135 	.word	0x08006135
 8006100:	08006135 	.word	0x08006135
 8006104:	08006135 	.word	0x08006135
 8006108:	08006123 	.word	0x08006123
 800610c:	08006135 	.word	0x08006135
 8006110:	08006135 	.word	0x08006135
 8006114:	08006135 	.word	0x08006135
 8006118:	0800612f 	.word	0x0800612f
 800611c:	2300      	movs	r3, #0
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e118      	b.n	8006354 <UART_SetConfig+0x348>
 8006122:	2302      	movs	r3, #2
 8006124:	77fb      	strb	r3, [r7, #31]
 8006126:	e115      	b.n	8006354 <UART_SetConfig+0x348>
 8006128:	2304      	movs	r3, #4
 800612a:	77fb      	strb	r3, [r7, #31]
 800612c:	e112      	b.n	8006354 <UART_SetConfig+0x348>
 800612e:	2308      	movs	r3, #8
 8006130:	77fb      	strb	r3, [r7, #31]
 8006132:	e10f      	b.n	8006354 <UART_SetConfig+0x348>
 8006134:	2310      	movs	r3, #16
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	e10c      	b.n	8006354 <UART_SetConfig+0x348>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a68      	ldr	r2, [pc, #416]	; (80062e0 <UART_SetConfig+0x2d4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d120      	bne.n	8006186 <UART_SetConfig+0x17a>
 8006144:	4b64      	ldr	r3, [pc, #400]	; (80062d8 <UART_SetConfig+0x2cc>)
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800614e:	2b30      	cmp	r3, #48	; 0x30
 8006150:	d013      	beq.n	800617a <UART_SetConfig+0x16e>
 8006152:	2b30      	cmp	r3, #48	; 0x30
 8006154:	d814      	bhi.n	8006180 <UART_SetConfig+0x174>
 8006156:	2b20      	cmp	r3, #32
 8006158:	d009      	beq.n	800616e <UART_SetConfig+0x162>
 800615a:	2b20      	cmp	r3, #32
 800615c:	d810      	bhi.n	8006180 <UART_SetConfig+0x174>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <UART_SetConfig+0x15c>
 8006162:	2b10      	cmp	r3, #16
 8006164:	d006      	beq.n	8006174 <UART_SetConfig+0x168>
 8006166:	e00b      	b.n	8006180 <UART_SetConfig+0x174>
 8006168:	2300      	movs	r3, #0
 800616a:	77fb      	strb	r3, [r7, #31]
 800616c:	e0f2      	b.n	8006354 <UART_SetConfig+0x348>
 800616e:	2302      	movs	r3, #2
 8006170:	77fb      	strb	r3, [r7, #31]
 8006172:	e0ef      	b.n	8006354 <UART_SetConfig+0x348>
 8006174:	2304      	movs	r3, #4
 8006176:	77fb      	strb	r3, [r7, #31]
 8006178:	e0ec      	b.n	8006354 <UART_SetConfig+0x348>
 800617a:	2308      	movs	r3, #8
 800617c:	77fb      	strb	r3, [r7, #31]
 800617e:	e0e9      	b.n	8006354 <UART_SetConfig+0x348>
 8006180:	2310      	movs	r3, #16
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e0e6      	b.n	8006354 <UART_SetConfig+0x348>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a56      	ldr	r2, [pc, #344]	; (80062e4 <UART_SetConfig+0x2d8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d120      	bne.n	80061d2 <UART_SetConfig+0x1c6>
 8006190:	4b51      	ldr	r3, [pc, #324]	; (80062d8 <UART_SetConfig+0x2cc>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800619a:	2bc0      	cmp	r3, #192	; 0xc0
 800619c:	d013      	beq.n	80061c6 <UART_SetConfig+0x1ba>
 800619e:	2bc0      	cmp	r3, #192	; 0xc0
 80061a0:	d814      	bhi.n	80061cc <UART_SetConfig+0x1c0>
 80061a2:	2b80      	cmp	r3, #128	; 0x80
 80061a4:	d009      	beq.n	80061ba <UART_SetConfig+0x1ae>
 80061a6:	2b80      	cmp	r3, #128	; 0x80
 80061a8:	d810      	bhi.n	80061cc <UART_SetConfig+0x1c0>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <UART_SetConfig+0x1a8>
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d006      	beq.n	80061c0 <UART_SetConfig+0x1b4>
 80061b2:	e00b      	b.n	80061cc <UART_SetConfig+0x1c0>
 80061b4:	2300      	movs	r3, #0
 80061b6:	77fb      	strb	r3, [r7, #31]
 80061b8:	e0cc      	b.n	8006354 <UART_SetConfig+0x348>
 80061ba:	2302      	movs	r3, #2
 80061bc:	77fb      	strb	r3, [r7, #31]
 80061be:	e0c9      	b.n	8006354 <UART_SetConfig+0x348>
 80061c0:	2304      	movs	r3, #4
 80061c2:	77fb      	strb	r3, [r7, #31]
 80061c4:	e0c6      	b.n	8006354 <UART_SetConfig+0x348>
 80061c6:	2308      	movs	r3, #8
 80061c8:	77fb      	strb	r3, [r7, #31]
 80061ca:	e0c3      	b.n	8006354 <UART_SetConfig+0x348>
 80061cc:	2310      	movs	r3, #16
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e0c0      	b.n	8006354 <UART_SetConfig+0x348>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a44      	ldr	r2, [pc, #272]	; (80062e8 <UART_SetConfig+0x2dc>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d125      	bne.n	8006228 <UART_SetConfig+0x21c>
 80061dc:	4b3e      	ldr	r3, [pc, #248]	; (80062d8 <UART_SetConfig+0x2cc>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ea:	d017      	beq.n	800621c <UART_SetConfig+0x210>
 80061ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061f0:	d817      	bhi.n	8006222 <UART_SetConfig+0x216>
 80061f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f6:	d00b      	beq.n	8006210 <UART_SetConfig+0x204>
 80061f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061fc:	d811      	bhi.n	8006222 <UART_SetConfig+0x216>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <UART_SetConfig+0x1fe>
 8006202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006206:	d006      	beq.n	8006216 <UART_SetConfig+0x20a>
 8006208:	e00b      	b.n	8006222 <UART_SetConfig+0x216>
 800620a:	2300      	movs	r3, #0
 800620c:	77fb      	strb	r3, [r7, #31]
 800620e:	e0a1      	b.n	8006354 <UART_SetConfig+0x348>
 8006210:	2302      	movs	r3, #2
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e09e      	b.n	8006354 <UART_SetConfig+0x348>
 8006216:	2304      	movs	r3, #4
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e09b      	b.n	8006354 <UART_SetConfig+0x348>
 800621c:	2308      	movs	r3, #8
 800621e:	77fb      	strb	r3, [r7, #31]
 8006220:	e098      	b.n	8006354 <UART_SetConfig+0x348>
 8006222:	2310      	movs	r3, #16
 8006224:	77fb      	strb	r3, [r7, #31]
 8006226:	e095      	b.n	8006354 <UART_SetConfig+0x348>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a2f      	ldr	r2, [pc, #188]	; (80062ec <UART_SetConfig+0x2e0>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d125      	bne.n	800627e <UART_SetConfig+0x272>
 8006232:	4b29      	ldr	r3, [pc, #164]	; (80062d8 <UART_SetConfig+0x2cc>)
 8006234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006238:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800623c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006240:	d017      	beq.n	8006272 <UART_SetConfig+0x266>
 8006242:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006246:	d817      	bhi.n	8006278 <UART_SetConfig+0x26c>
 8006248:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800624c:	d00b      	beq.n	8006266 <UART_SetConfig+0x25a>
 800624e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006252:	d811      	bhi.n	8006278 <UART_SetConfig+0x26c>
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <UART_SetConfig+0x254>
 8006258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625c:	d006      	beq.n	800626c <UART_SetConfig+0x260>
 800625e:	e00b      	b.n	8006278 <UART_SetConfig+0x26c>
 8006260:	2301      	movs	r3, #1
 8006262:	77fb      	strb	r3, [r7, #31]
 8006264:	e076      	b.n	8006354 <UART_SetConfig+0x348>
 8006266:	2302      	movs	r3, #2
 8006268:	77fb      	strb	r3, [r7, #31]
 800626a:	e073      	b.n	8006354 <UART_SetConfig+0x348>
 800626c:	2304      	movs	r3, #4
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e070      	b.n	8006354 <UART_SetConfig+0x348>
 8006272:	2308      	movs	r3, #8
 8006274:	77fb      	strb	r3, [r7, #31]
 8006276:	e06d      	b.n	8006354 <UART_SetConfig+0x348>
 8006278:	2310      	movs	r3, #16
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e06a      	b.n	8006354 <UART_SetConfig+0x348>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1b      	ldr	r2, [pc, #108]	; (80062f0 <UART_SetConfig+0x2e4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d138      	bne.n	80062fa <UART_SetConfig+0x2ee>
 8006288:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <UART_SetConfig+0x2cc>)
 800628a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006292:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006296:	d017      	beq.n	80062c8 <UART_SetConfig+0x2bc>
 8006298:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800629c:	d82a      	bhi.n	80062f4 <UART_SetConfig+0x2e8>
 800629e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a2:	d00b      	beq.n	80062bc <UART_SetConfig+0x2b0>
 80062a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062a8:	d824      	bhi.n	80062f4 <UART_SetConfig+0x2e8>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <UART_SetConfig+0x2aa>
 80062ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b2:	d006      	beq.n	80062c2 <UART_SetConfig+0x2b6>
 80062b4:	e01e      	b.n	80062f4 <UART_SetConfig+0x2e8>
 80062b6:	2300      	movs	r3, #0
 80062b8:	77fb      	strb	r3, [r7, #31]
 80062ba:	e04b      	b.n	8006354 <UART_SetConfig+0x348>
 80062bc:	2302      	movs	r3, #2
 80062be:	77fb      	strb	r3, [r7, #31]
 80062c0:	e048      	b.n	8006354 <UART_SetConfig+0x348>
 80062c2:	2304      	movs	r3, #4
 80062c4:	77fb      	strb	r3, [r7, #31]
 80062c6:	e045      	b.n	8006354 <UART_SetConfig+0x348>
 80062c8:	2308      	movs	r3, #8
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	e042      	b.n	8006354 <UART_SetConfig+0x348>
 80062ce:	bf00      	nop
 80062d0:	efff69f3 	.word	0xefff69f3
 80062d4:	40011000 	.word	0x40011000
 80062d8:	40023800 	.word	0x40023800
 80062dc:	40004400 	.word	0x40004400
 80062e0:	40004800 	.word	0x40004800
 80062e4:	40004c00 	.word	0x40004c00
 80062e8:	40005000 	.word	0x40005000
 80062ec:	40011400 	.word	0x40011400
 80062f0:	40007800 	.word	0x40007800
 80062f4:	2310      	movs	r3, #16
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e02c      	b.n	8006354 <UART_SetConfig+0x348>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a72      	ldr	r2, [pc, #456]	; (80064c8 <UART_SetConfig+0x4bc>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d125      	bne.n	8006350 <UART_SetConfig+0x344>
 8006304:	4b71      	ldr	r3, [pc, #452]	; (80064cc <UART_SetConfig+0x4c0>)
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800630e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006312:	d017      	beq.n	8006344 <UART_SetConfig+0x338>
 8006314:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006318:	d817      	bhi.n	800634a <UART_SetConfig+0x33e>
 800631a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800631e:	d00b      	beq.n	8006338 <UART_SetConfig+0x32c>
 8006320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006324:	d811      	bhi.n	800634a <UART_SetConfig+0x33e>
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <UART_SetConfig+0x326>
 800632a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800632e:	d006      	beq.n	800633e <UART_SetConfig+0x332>
 8006330:	e00b      	b.n	800634a <UART_SetConfig+0x33e>
 8006332:	2300      	movs	r3, #0
 8006334:	77fb      	strb	r3, [r7, #31]
 8006336:	e00d      	b.n	8006354 <UART_SetConfig+0x348>
 8006338:	2302      	movs	r3, #2
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e00a      	b.n	8006354 <UART_SetConfig+0x348>
 800633e:	2304      	movs	r3, #4
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e007      	b.n	8006354 <UART_SetConfig+0x348>
 8006344:	2308      	movs	r3, #8
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e004      	b.n	8006354 <UART_SetConfig+0x348>
 800634a:	2310      	movs	r3, #16
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e001      	b.n	8006354 <UART_SetConfig+0x348>
 8006350:	2310      	movs	r3, #16
 8006352:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69db      	ldr	r3, [r3, #28]
 8006358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635c:	d15b      	bne.n	8006416 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800635e:	7ffb      	ldrb	r3, [r7, #31]
 8006360:	2b08      	cmp	r3, #8
 8006362:	d828      	bhi.n	80063b6 <UART_SetConfig+0x3aa>
 8006364:	a201      	add	r2, pc, #4	; (adr r2, 800636c <UART_SetConfig+0x360>)
 8006366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636a:	bf00      	nop
 800636c:	08006391 	.word	0x08006391
 8006370:	08006399 	.word	0x08006399
 8006374:	080063a1 	.word	0x080063a1
 8006378:	080063b7 	.word	0x080063b7
 800637c:	080063a7 	.word	0x080063a7
 8006380:	080063b7 	.word	0x080063b7
 8006384:	080063b7 	.word	0x080063b7
 8006388:	080063b7 	.word	0x080063b7
 800638c:	080063af 	.word	0x080063af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006390:	f7fe fe34 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8006394:	61b8      	str	r0, [r7, #24]
        break;
 8006396:	e013      	b.n	80063c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006398:	f7fe fe44 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 800639c:	61b8      	str	r0, [r7, #24]
        break;
 800639e:	e00f      	b.n	80063c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063a0:	4b4b      	ldr	r3, [pc, #300]	; (80064d0 <UART_SetConfig+0x4c4>)
 80063a2:	61bb      	str	r3, [r7, #24]
        break;
 80063a4:	e00c      	b.n	80063c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063a6:	f7fe fd17 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 80063aa:	61b8      	str	r0, [r7, #24]
        break;
 80063ac:	e008      	b.n	80063c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b2:	61bb      	str	r3, [r7, #24]
        break;
 80063b4:	e004      	b.n	80063c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	77bb      	strb	r3, [r7, #30]
        break;
 80063be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d074      	beq.n	80064b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	005a      	lsls	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	441a      	add	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	2b0f      	cmp	r3, #15
 80063e0:	d916      	bls.n	8006410 <UART_SetConfig+0x404>
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e8:	d212      	bcs.n	8006410 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	f023 030f 	bic.w	r3, r3, #15
 80063f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	b29a      	uxth	r2, r3
 8006400:	89fb      	ldrh	r3, [r7, #14]
 8006402:	4313      	orrs	r3, r2
 8006404:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	89fa      	ldrh	r2, [r7, #14]
 800640c:	60da      	str	r2, [r3, #12]
 800640e:	e04f      	b.n	80064b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	77bb      	strb	r3, [r7, #30]
 8006414:	e04c      	b.n	80064b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006416:	7ffb      	ldrb	r3, [r7, #31]
 8006418:	2b08      	cmp	r3, #8
 800641a:	d828      	bhi.n	800646e <UART_SetConfig+0x462>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <UART_SetConfig+0x418>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006449 	.word	0x08006449
 8006428:	08006451 	.word	0x08006451
 800642c:	08006459 	.word	0x08006459
 8006430:	0800646f 	.word	0x0800646f
 8006434:	0800645f 	.word	0x0800645f
 8006438:	0800646f 	.word	0x0800646f
 800643c:	0800646f 	.word	0x0800646f
 8006440:	0800646f 	.word	0x0800646f
 8006444:	08006467 	.word	0x08006467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006448:	f7fe fdd8 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 800644c:	61b8      	str	r0, [r7, #24]
        break;
 800644e:	e013      	b.n	8006478 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006450:	f7fe fde8 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 8006454:	61b8      	str	r0, [r7, #24]
        break;
 8006456:	e00f      	b.n	8006478 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006458:	4b1d      	ldr	r3, [pc, #116]	; (80064d0 <UART_SetConfig+0x4c4>)
 800645a:	61bb      	str	r3, [r7, #24]
        break;
 800645c:	e00c      	b.n	8006478 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800645e:	f7fe fcbb 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8006462:	61b8      	str	r0, [r7, #24]
        break;
 8006464:	e008      	b.n	8006478 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646a:	61bb      	str	r3, [r7, #24]
        break;
 800646c:	e004      	b.n	8006478 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	77bb      	strb	r3, [r7, #30]
        break;
 8006476:	bf00      	nop
    }

    if (pclk != 0U)
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d018      	beq.n	80064b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	085a      	lsrs	r2, r3, #1
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	441a      	add	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006490:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	2b0f      	cmp	r3, #15
 8006496:	d909      	bls.n	80064ac <UART_SetConfig+0x4a0>
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649e:	d205      	bcs.n	80064ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	60da      	str	r2, [r3, #12]
 80064aa:	e001      	b.n	80064b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80064bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3720      	adds	r7, #32
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	40007c00 	.word	0x40007c00
 80064cc:	40023800 	.word	0x40023800
 80064d0:	00f42400 	.word	0x00f42400

080064d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	f003 0310 	and.w	r3, r3, #16
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01a      	beq.n	80065ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d2:	d10a      	bne.n	80065ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af02      	add	r7, sp, #8
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006628:	f7fa fefa 	bl	8001420 <HAL_GetTick>
 800662c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b08      	cmp	r3, #8
 800663a:	d10e      	bne.n	800665a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800663c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f81b 	bl	8006686 <UART_WaitOnFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e011      	b.n	800667e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b09c      	sub	sp, #112	; 0x70
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	603b      	str	r3, [r7, #0]
 8006692:	4613      	mov	r3, r2
 8006694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006696:	e0a7      	b.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800669a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669e:	f000 80a3 	beq.w	80067e8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a2:	f7fa febd 	bl	8001420 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d302      	bcc.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80066b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d13f      	bne.n	8006738 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066cc:	667b      	str	r3, [r7, #100]	; 0x64
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80066e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e6      	bne.n	80066b8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3308      	adds	r3, #8
 80066f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	663b      	str	r3, [r7, #96]	; 0x60
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3308      	adds	r3, #8
 8006708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800670a:	64ba      	str	r2, [r7, #72]	; 0x48
 800670c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006712:	e841 2300 	strex	r3, r2, [r1]
 8006716:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1e5      	bne.n	80066ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2220      	movs	r2, #32
 8006722:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e068      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	d050      	beq.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006754:	d148      	bne.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800675e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006774:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800677e:	637b      	str	r3, [r7, #52]	; 0x34
 8006780:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006784:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e6      	bne.n	8006760 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	613b      	str	r3, [r7, #16]
   return(result);
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3308      	adds	r3, #8
 80067b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80067b2:	623a      	str	r2, [r7, #32]
 80067b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	69f9      	ldr	r1, [r7, #28]
 80067b8:	6a3a      	ldr	r2, [r7, #32]
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	61bb      	str	r3, [r7, #24]
   return(result);
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e5      	bne.n	8006792 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2220      	movs	r2, #32
 80067ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e010      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69da      	ldr	r2, [r3, #28]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	4013      	ands	r3, r2
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	bf0c      	ite	eq
 80067f8:	2301      	moveq	r3, #1
 80067fa:	2300      	movne	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	461a      	mov	r2, r3
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	429a      	cmp	r2, r3
 8006804:	f43f af48 	beq.w	8006698 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3770      	adds	r7, #112	; 0x70
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006814:	b084      	sub	sp, #16
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	f107 001c 	add.w	r0, r7, #28
 8006822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	2b01      	cmp	r3, #1
 800682a:	d120      	bne.n	800686e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <USB_CoreInit+0xac>)
 800683e:	4013      	ands	r3, r2
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006852:	2b01      	cmp	r3, #1
 8006854:	d105      	bne.n	8006862 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 fbee 	bl	8008044 <USB_CoreReset>
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
 800686c:	e010      	b.n	8006890 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fbe2 	bl	8008044 <USB_CoreReset>
 8006880:	4603      	mov	r3, r0
 8006882:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	2b01      	cmp	r3, #1
 8006894:	d10b      	bne.n	80068ae <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f043 0206 	orr.w	r2, r3, #6
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f043 0220 	orr.w	r2, r3, #32
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068ba:	b004      	add	sp, #16
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	ffbdffbf 	.word	0xffbdffbf

080068c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d165      	bne.n	80069a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4a41      	ldr	r2, [pc, #260]	; (80069e0 <USB_SetTurnaroundTime+0x11c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d906      	bls.n	80068ee <USB_SetTurnaroundTime+0x2a>
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	4a40      	ldr	r2, [pc, #256]	; (80069e4 <USB_SetTurnaroundTime+0x120>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d202      	bcs.n	80068ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80068e8:	230f      	movs	r3, #15
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	e062      	b.n	80069b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <USB_SetTurnaroundTime+0x120>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d306      	bcc.n	8006904 <USB_SetTurnaroundTime+0x40>
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4a3b      	ldr	r2, [pc, #236]	; (80069e8 <USB_SetTurnaroundTime+0x124>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d202      	bcs.n	8006904 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80068fe:	230e      	movs	r3, #14
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	e057      	b.n	80069b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4a38      	ldr	r2, [pc, #224]	; (80069e8 <USB_SetTurnaroundTime+0x124>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d306      	bcc.n	800691a <USB_SetTurnaroundTime+0x56>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	4a37      	ldr	r2, [pc, #220]	; (80069ec <USB_SetTurnaroundTime+0x128>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d202      	bcs.n	800691a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006914:	230d      	movs	r3, #13
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	e04c      	b.n	80069b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	4a33      	ldr	r2, [pc, #204]	; (80069ec <USB_SetTurnaroundTime+0x128>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d306      	bcc.n	8006930 <USB_SetTurnaroundTime+0x6c>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	4a32      	ldr	r2, [pc, #200]	; (80069f0 <USB_SetTurnaroundTime+0x12c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d802      	bhi.n	8006930 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800692a:	230c      	movs	r3, #12
 800692c:	617b      	str	r3, [r7, #20]
 800692e:	e041      	b.n	80069b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4a2f      	ldr	r2, [pc, #188]	; (80069f0 <USB_SetTurnaroundTime+0x12c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d906      	bls.n	8006946 <USB_SetTurnaroundTime+0x82>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4a2e      	ldr	r2, [pc, #184]	; (80069f4 <USB_SetTurnaroundTime+0x130>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d802      	bhi.n	8006946 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006940:	230b      	movs	r3, #11
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	e036      	b.n	80069b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	4a2a      	ldr	r2, [pc, #168]	; (80069f4 <USB_SetTurnaroundTime+0x130>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d906      	bls.n	800695c <USB_SetTurnaroundTime+0x98>
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4a29      	ldr	r2, [pc, #164]	; (80069f8 <USB_SetTurnaroundTime+0x134>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d802      	bhi.n	800695c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006956:	230a      	movs	r3, #10
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	e02b      	b.n	80069b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4a26      	ldr	r2, [pc, #152]	; (80069f8 <USB_SetTurnaroundTime+0x134>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d906      	bls.n	8006972 <USB_SetTurnaroundTime+0xae>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4a25      	ldr	r2, [pc, #148]	; (80069fc <USB_SetTurnaroundTime+0x138>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d202      	bcs.n	8006972 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800696c:	2309      	movs	r3, #9
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	e020      	b.n	80069b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4a21      	ldr	r2, [pc, #132]	; (80069fc <USB_SetTurnaroundTime+0x138>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d306      	bcc.n	8006988 <USB_SetTurnaroundTime+0xc4>
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	4a20      	ldr	r2, [pc, #128]	; (8006a00 <USB_SetTurnaroundTime+0x13c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d802      	bhi.n	8006988 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006982:	2308      	movs	r3, #8
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	e015      	b.n	80069b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	4a1d      	ldr	r2, [pc, #116]	; (8006a00 <USB_SetTurnaroundTime+0x13c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d906      	bls.n	800699e <USB_SetTurnaroundTime+0xda>
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	4a1c      	ldr	r2, [pc, #112]	; (8006a04 <USB_SetTurnaroundTime+0x140>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d202      	bcs.n	800699e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006998:	2307      	movs	r3, #7
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	e00a      	b.n	80069b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800699e:	2306      	movs	r3, #6
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	e007      	b.n	80069b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d102      	bne.n	80069b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80069aa:	2309      	movs	r3, #9
 80069ac:	617b      	str	r3, [r7, #20]
 80069ae:	e001      	b.n	80069b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80069b0:	2309      	movs	r3, #9
 80069b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	029b      	lsls	r3, r3, #10
 80069c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80069cc:	431a      	orrs	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	00d8acbf 	.word	0x00d8acbf
 80069e4:	00e4e1c0 	.word	0x00e4e1c0
 80069e8:	00f42400 	.word	0x00f42400
 80069ec:	01067380 	.word	0x01067380
 80069f0:	011a499f 	.word	0x011a499f
 80069f4:	01312cff 	.word	0x01312cff
 80069f8:	014ca43f 	.word	0x014ca43f
 80069fc:	016e3600 	.word	0x016e3600
 8006a00:	01a6ab1f 	.word	0x01a6ab1f
 8006a04:	01e84800 	.word	0x01e84800

08006a08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f043 0201 	orr.w	r2, r3, #1
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f023 0201 	bic.w	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d115      	bne.n	8006a9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a7a:	2001      	movs	r0, #1
 8006a7c:	f7fa fcdc 	bl	8001438 <HAL_Delay>
      ms++;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 fa4b 	bl	8007f22 <USB_GetMode>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d01e      	beq.n	8006ad0 <USB_SetCurrentMode+0x84>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2b31      	cmp	r3, #49	; 0x31
 8006a96:	d9f0      	bls.n	8006a7a <USB_SetCurrentMode+0x2e>
 8006a98:	e01a      	b.n	8006ad0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d115      	bne.n	8006acc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006aac:	2001      	movs	r0, #1
 8006aae:	f7fa fcc3 	bl	8001438 <HAL_Delay>
      ms++;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fa32 	bl	8007f22 <USB_GetMode>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <USB_SetCurrentMode+0x84>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b31      	cmp	r3, #49	; 0x31
 8006ac8:	d9f0      	bls.n	8006aac <USB_SetCurrentMode+0x60>
 8006aca:	e001      	b.n	8006ad0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e005      	b.n	8006adc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b32      	cmp	r3, #50	; 0x32
 8006ad4:	d101      	bne.n	8006ada <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b086      	sub	sp, #24
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006afe:	2300      	movs	r3, #0
 8006b00:	613b      	str	r3, [r7, #16]
 8006b02:	e009      	b.n	8006b18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	3340      	adds	r3, #64	; 0x40
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	2200      	movs	r2, #0
 8006b10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	3301      	adds	r3, #1
 8006b16:	613b      	str	r3, [r7, #16]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2b0e      	cmp	r3, #14
 8006b1c:	d9f2      	bls.n	8006b04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d11c      	bne.n	8006b5e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b32:	f043 0302 	orr.w	r3, r3, #2
 8006b36:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	e005      	b.n	8006b6a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b70:	461a      	mov	r2, r3
 8006b72:	2300      	movs	r3, #0
 8006b74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b84:	461a      	mov	r2, r3
 8006b86:	680b      	ldr	r3, [r1, #0]
 8006b88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d10c      	bne.n	8006baa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d104      	bne.n	8006ba0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b96:	2100      	movs	r1, #0
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f965 	bl	8006e68 <USB_SetDevSpeed>
 8006b9e:	e008      	b.n	8006bb2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f960 	bl	8006e68 <USB_SetDevSpeed>
 8006ba8:	e003      	b.n	8006bb2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006baa:	2103      	movs	r1, #3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f95b 	bl	8006e68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bb2:	2110      	movs	r1, #16
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f8f3 	bl	8006da0 <USB_FlushTxFifo>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d001      	beq.n	8006bc4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f91f 	bl	8006e08 <USB_FlushRxFifo>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d001      	beq.n	8006bd4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	461a      	mov	r2, r3
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be6:	461a      	mov	r2, r3
 8006be8:	2300      	movs	r3, #0
 8006bea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	613b      	str	r3, [r7, #16]
 8006bfc:	e043      	b.n	8006c86 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c14:	d118      	bne.n	8006c48 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	e013      	b.n	8006c5a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3e:	461a      	mov	r2, r3
 8006c40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	e008      	b.n	8006c5a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	461a      	mov	r2, r3
 8006c56:	2300      	movs	r3, #0
 8006c58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c66:	461a      	mov	r2, r3
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	3301      	adds	r3, #1
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d3b7      	bcc.n	8006bfe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c8e:	2300      	movs	r3, #0
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	e043      	b.n	8006d1c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006caa:	d118      	bne.n	8006cde <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	e013      	b.n	8006cf0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	e008      	b.n	8006cf0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cea:	461a      	mov	r2, r3
 8006cec:	2300      	movs	r3, #0
 8006cee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	015a      	lsls	r2, r3, #5
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d3b7      	bcc.n	8006c94 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f043 0210 	orr.w	r2, r3, #16
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699a      	ldr	r2, [r3, #24]
 8006d5c:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <USB_DevInit+0x2b4>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d005      	beq.n	8006d76 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f043 0208 	orr.w	r2, r3, #8
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d105      	bne.n	8006d88 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699a      	ldr	r2, [r3, #24]
 8006d80:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <USB_DevInit+0x2b8>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d94:	b004      	add	sp, #16
 8006d96:	4770      	bx	lr
 8006d98:	803c3800 	.word	0x803c3800
 8006d9c:	40000004 	.word	0x40000004

08006da0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3301      	adds	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4a13      	ldr	r2, [pc, #76]	; (8006e04 <USB_FlushTxFifo+0x64>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d901      	bls.n	8006dc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e01b      	b.n	8006df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	daf2      	bge.n	8006dae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	019b      	lsls	r3, r3, #6
 8006dd0:	f043 0220 	orr.w	r2, r3, #32
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4a08      	ldr	r2, [pc, #32]	; (8006e04 <USB_FlushTxFifo+0x64>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d901      	bls.n	8006dea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e006      	b.n	8006df8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d0f0      	beq.n	8006dd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	00030d40 	.word	0x00030d40

08006e08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4a11      	ldr	r2, [pc, #68]	; (8006e64 <USB_FlushRxFifo+0x5c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d901      	bls.n	8006e26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e018      	b.n	8006e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	daf2      	bge.n	8006e14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2210      	movs	r2, #16
 8006e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4a08      	ldr	r2, [pc, #32]	; (8006e64 <USB_FlushRxFifo+0x5c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d901      	bls.n	8006e4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e006      	b.n	8006e58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0310 	and.w	r3, r3, #16
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d0f0      	beq.n	8006e38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	00030d40 	.word	0x00030d40

08006e68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b087      	sub	sp, #28
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 0306 	and.w	r3, r3, #6
 8006eb2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d102      	bne.n	8006ec0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	75fb      	strb	r3, [r7, #23]
 8006ebe:	e00a      	b.n	8006ed6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d002      	beq.n	8006ecc <USB_GetDevSpeed+0x32>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b06      	cmp	r3, #6
 8006eca:	d102      	bne.n	8006ed2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ecc:	2302      	movs	r3, #2
 8006ece:	75fb      	strb	r3, [r7, #23]
 8006ed0:	e001      	b.n	8006ed6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ed2:	230f      	movs	r3, #15
 8006ed4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	371c      	adds	r7, #28
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d139      	bne.n	8006f74 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f06:	69da      	ldr	r2, [r3, #28]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	2101      	movs	r1, #1
 8006f12:	fa01 f303 	lsl.w	r3, r1, r3
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	68f9      	ldr	r1, [r7, #12]
 8006f1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d153      	bne.n	8006fe0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	791b      	ldrb	r3, [r3, #4]
 8006f52:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f54:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	059b      	lsls	r3, r3, #22
 8006f5a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	0159      	lsls	r1, r3, #5
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	440b      	add	r3, r1
 8006f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4b20      	ldr	r3, [pc, #128]	; (8006ff0 <USB_ActivateEndpoint+0x10c>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	600b      	str	r3, [r1, #0]
 8006f72:	e035      	b.n	8006fe0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	f003 030f 	and.w	r3, r3, #15
 8006f84:	2101      	movs	r1, #1
 8006f86:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8a:	041b      	lsls	r3, r3, #16
 8006f8c:	68f9      	ldr	r1, [r7, #12]
 8006f8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f92:	4313      	orrs	r3, r2
 8006f94:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d119      	bne.n	8006fe0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	791b      	ldrb	r3, [r3, #4]
 8006fc6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	0159      	lsls	r1, r3, #5
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	440b      	add	r3, r1
 8006fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <USB_ActivateEndpoint+0x10c>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	10008000 	.word	0x10008000

08006ff4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d161      	bne.n	80070d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007026:	d11f      	bne.n	8007068 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	440a      	add	r2, r1
 800703e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007042:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007046:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	0151      	lsls	r1, r2, #5
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	440a      	add	r2, r1
 800705e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007062:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007066:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	f003 030f 	and.w	r3, r3, #15
 8007078:	2101      	movs	r1, #1
 800707a:	fa01 f303 	lsl.w	r3, r1, r3
 800707e:	b29b      	uxth	r3, r3
 8007080:	43db      	mvns	r3, r3
 8007082:	68f9      	ldr	r1, [r7, #12]
 8007084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007088:	4013      	ands	r3, r2
 800708a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007092:	69da      	ldr	r2, [r3, #28]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	2101      	movs	r1, #1
 800709e:	fa01 f303 	lsl.w	r3, r1, r3
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	43db      	mvns	r3, r3
 80070a6:	68f9      	ldr	r1, [r7, #12]
 80070a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ac:	4013      	ands	r3, r2
 80070ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	0159      	lsls	r1, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	440b      	add	r3, r1
 80070c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ca:	4619      	mov	r1, r3
 80070cc:	4b35      	ldr	r3, [pc, #212]	; (80071a4 <USB_DeactivateEndpoint+0x1b0>)
 80070ce:	4013      	ands	r3, r2
 80070d0:	600b      	str	r3, [r1, #0]
 80070d2:	e060      	b.n	8007196 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ea:	d11f      	bne.n	800712c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	0151      	lsls	r1, r2, #5
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	440a      	add	r2, r1
 8007102:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007106:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800710a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	0151      	lsls	r1, r2, #5
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	440a      	add	r2, r1
 8007122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007126:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800712a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	2101      	movs	r1, #1
 800713e:	fa01 f303 	lsl.w	r3, r1, r3
 8007142:	041b      	lsls	r3, r3, #16
 8007144:	43db      	mvns	r3, r3
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800714c:	4013      	ands	r3, r2
 800714e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007156:	69da      	ldr	r2, [r3, #28]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	f003 030f 	and.w	r3, r3, #15
 8007160:	2101      	movs	r1, #1
 8007162:	fa01 f303 	lsl.w	r3, r1, r3
 8007166:	041b      	lsls	r3, r3, #16
 8007168:	43db      	mvns	r3, r3
 800716a:	68f9      	ldr	r1, [r7, #12]
 800716c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007170:	4013      	ands	r3, r2
 8007172:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	0159      	lsls	r1, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	440b      	add	r3, r1
 800718a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718e:	4619      	mov	r1, r3
 8007190:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <USB_DeactivateEndpoint+0x1b4>)
 8007192:	4013      	ands	r3, r2
 8007194:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	ec337800 	.word	0xec337800
 80071a8:	eff37800 	.word	0xeff37800

080071ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08a      	sub	sp, #40	; 0x28
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	4613      	mov	r3, r2
 80071b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	785b      	ldrb	r3, [r3, #1]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	f040 8163 	bne.w	8007494 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d132      	bne.n	800723c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	0159      	lsls	r1, r3, #5
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	440b      	add	r3, r1
 80071ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f0:	4619      	mov	r1, r3
 80071f2:	4ba5      	ldr	r3, [pc, #660]	; (8007488 <USB_EPStartXfer+0x2dc>)
 80071f4:	4013      	ands	r3, r2
 80071f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	440a      	add	r2, r1
 800720e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007216:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007224:	691a      	ldr	r2, [r3, #16]
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	0159      	lsls	r1, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	440b      	add	r3, r1
 800722e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007232:	4619      	mov	r1, r3
 8007234:	4b95      	ldr	r3, [pc, #596]	; (800748c <USB_EPStartXfer+0x2e0>)
 8007236:	4013      	ands	r3, r2
 8007238:	610b      	str	r3, [r1, #16]
 800723a:	e074      	b.n	8007326 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	691a      	ldr	r2, [r3, #16]
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	0159      	lsls	r1, r3, #5
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	440b      	add	r3, r1
 8007252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007256:	4619      	mov	r1, r3
 8007258:	4b8c      	ldr	r3, [pc, #560]	; (800748c <USB_EPStartXfer+0x2e0>)
 800725a:	4013      	ands	r3, r2
 800725c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	0159      	lsls	r1, r3, #5
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	440b      	add	r3, r1
 8007274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007278:	4619      	mov	r1, r3
 800727a:	4b83      	ldr	r3, [pc, #524]	; (8007488 <USB_EPStartXfer+0x2dc>)
 800727c:	4013      	ands	r3, r2
 800727e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	6999      	ldr	r1, [r3, #24]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	440b      	add	r3, r1
 8007298:	1e59      	subs	r1, r3, #1
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	fbb1 f3f3 	udiv	r3, r1, r3
 80072a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80072a4:	4b7a      	ldr	r3, [pc, #488]	; (8007490 <USB_EPStartXfer+0x2e4>)
 80072a6:	400b      	ands	r3, r1
 80072a8:	69b9      	ldr	r1, [r7, #24]
 80072aa:	0148      	lsls	r0, r1, #5
 80072ac:	69f9      	ldr	r1, [r7, #28]
 80072ae:	4401      	add	r1, r0
 80072b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072b4:	4313      	orrs	r3, r2
 80072b6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c4:	691a      	ldr	r2, [r3, #16]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ce:	69b9      	ldr	r1, [r7, #24]
 80072d0:	0148      	lsls	r0, r1, #5
 80072d2:	69f9      	ldr	r1, [r7, #28]
 80072d4:	4401      	add	r1, r0
 80072d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072da:	4313      	orrs	r3, r2
 80072dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	791b      	ldrb	r3, [r3, #4]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d11f      	bne.n	8007326 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007300:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007304:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	0151      	lsls	r1, r2, #5
 8007318:	69fa      	ldr	r2, [r7, #28]
 800731a:	440a      	add	r2, r1
 800731c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007320:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007324:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d14b      	bne.n	80073c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d009      	beq.n	8007348 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007340:	461a      	mov	r2, r3
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	791b      	ldrb	r3, [r3, #4]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d128      	bne.n	80073a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735c:	2b00      	cmp	r3, #0
 800735e:	d110      	bne.n	8007382 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	0151      	lsls	r1, r2, #5
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	440a      	add	r2, r1
 8007376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800737a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	e00f      	b.n	80073a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	0151      	lsls	r1, r2, #5
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	440a      	add	r2, r1
 8007398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800739c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	e137      	b.n	8007634 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	0151      	lsls	r1, r2, #5
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	440a      	add	r2, r1
 80073da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	791b      	ldrb	r3, [r3, #4]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d015      	beq.n	8007418 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 811f 	beq.w	8007634 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	f003 030f 	and.w	r3, r3, #15
 8007406:	2101      	movs	r1, #1
 8007408:	fa01 f303 	lsl.w	r3, r1, r3
 800740c:	69f9      	ldr	r1, [r7, #28]
 800740e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007412:	4313      	orrs	r3, r2
 8007414:	634b      	str	r3, [r1, #52]	; 0x34
 8007416:	e10d      	b.n	8007634 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007424:	2b00      	cmp	r3, #0
 8007426:	d110      	bne.n	800744a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69ba      	ldr	r2, [r7, #24]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	69fa      	ldr	r2, [r7, #28]
 800743c:	440a      	add	r2, r1
 800743e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007442:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	e00f      	b.n	800746a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	0151      	lsls	r1, r2, #5
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	440a      	add	r2, r1
 8007460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007468:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	6919      	ldr	r1, [r3, #16]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	781a      	ldrb	r2, [r3, #0]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	b298      	uxth	r0, r3
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	4603      	mov	r3, r0
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 faea 	bl	8007a58 <USB_WritePacket>
 8007484:	e0d6      	b.n	8007634 <USB_EPStartXfer+0x488>
 8007486:	bf00      	nop
 8007488:	e007ffff 	.word	0xe007ffff
 800748c:	fff80000 	.word	0xfff80000
 8007490:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a0:	691a      	ldr	r2, [r3, #16]
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	0159      	lsls	r1, r3, #5
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	440b      	add	r3, r1
 80074aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ae:	4619      	mov	r1, r3
 80074b0:	4b63      	ldr	r3, [pc, #396]	; (8007640 <USB_EPStartXfer+0x494>)
 80074b2:	4013      	ands	r3, r2
 80074b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	0159      	lsls	r1, r3, #5
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	440b      	add	r3, r1
 80074cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d0:	4619      	mov	r1, r3
 80074d2:	4b5c      	ldr	r3, [pc, #368]	; (8007644 <USB_EPStartXfer+0x498>)
 80074d4:	4013      	ands	r3, r2
 80074d6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d123      	bne.n	8007528 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ec:	691a      	ldr	r2, [r3, #16]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f6:	69b9      	ldr	r1, [r7, #24]
 80074f8:	0148      	lsls	r0, r1, #5
 80074fa:	69f9      	ldr	r1, [r7, #28]
 80074fc:	4401      	add	r1, r0
 80074fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007502:	4313      	orrs	r3, r2
 8007504:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	440a      	add	r2, r1
 800751c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007524:	6113      	str	r3, [r2, #16]
 8007526:	e037      	b.n	8007598 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	699a      	ldr	r2, [r3, #24]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	4413      	add	r3, r2
 8007532:	1e5a      	subs	r2, r3, #1
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	fbb2 f3f3 	udiv	r3, r2, r3
 800753c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	8afa      	ldrh	r2, [r7, #22]
 8007544:	fb03 f202 	mul.w	r2, r3, r2
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	691a      	ldr	r2, [r3, #16]
 800755a:	8afb      	ldrh	r3, [r7, #22]
 800755c:	04d9      	lsls	r1, r3, #19
 800755e:	4b3a      	ldr	r3, [pc, #232]	; (8007648 <USB_EPStartXfer+0x49c>)
 8007560:	400b      	ands	r3, r1
 8007562:	69b9      	ldr	r1, [r7, #24]
 8007564:	0148      	lsls	r0, r1, #5
 8007566:	69f9      	ldr	r1, [r7, #28]
 8007568:	4401      	add	r1, r0
 800756a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800756e:	4313      	orrs	r3, r2
 8007570:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4413      	add	r3, r2
 800757a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757e:	691a      	ldr	r2, [r3, #16]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007588:	69b9      	ldr	r1, [r7, #24]
 800758a:	0148      	lsls	r0, r1, #5
 800758c:	69f9      	ldr	r1, [r7, #28]
 800758e:	4401      	add	r1, r0
 8007590:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007594:	4313      	orrs	r3, r2
 8007596:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d10d      	bne.n	80075ba <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6919      	ldr	r1, [r3, #16]
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b6:	460a      	mov	r2, r1
 80075b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	791b      	ldrb	r3, [r3, #4]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d128      	bne.n	8007614 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d110      	bne.n	80075f4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	0151      	lsls	r1, r2, #5
 80075e4:	69fa      	ldr	r2, [r7, #28]
 80075e6:	440a      	add	r2, r1
 80075e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	e00f      	b.n	8007614 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	0151      	lsls	r1, r2, #5
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	440a      	add	r2, r1
 800760a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800760e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007612:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	0151      	lsls	r1, r2, #5
 8007626:	69fa      	ldr	r2, [r7, #28]
 8007628:	440a      	add	r2, r1
 800762a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800762e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007632:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3720      	adds	r7, #32
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	fff80000 	.word	0xfff80000
 8007644:	e007ffff 	.word	0xe007ffff
 8007648:	1ff80000 	.word	0x1ff80000

0800764c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	4613      	mov	r3, r2
 8007658:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	785b      	ldrb	r3, [r3, #1]
 8007668:	2b01      	cmp	r3, #1
 800766a:	f040 80ce 	bne.w	800780a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d132      	bne.n	80076dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007682:	691a      	ldr	r2, [r3, #16]
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	0159      	lsls	r1, r3, #5
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	440b      	add	r3, r1
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	4619      	mov	r1, r3
 8007692:	4b9a      	ldr	r3, [pc, #616]	; (80078fc <USB_EP0StartXfer+0x2b0>)
 8007694:	4013      	ands	r3, r2
 8007696:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	0151      	lsls	r1, r2, #5
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	440a      	add	r2, r1
 80076ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	0159      	lsls	r1, r3, #5
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	440b      	add	r3, r1
 80076ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d2:	4619      	mov	r1, r3
 80076d4:	4b8a      	ldr	r3, [pc, #552]	; (8007900 <USB_EP0StartXfer+0x2b4>)
 80076d6:	4013      	ands	r3, r2
 80076d8:	610b      	str	r3, [r1, #16]
 80076da:	e04e      	b.n	800777a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e8:	691a      	ldr	r2, [r3, #16]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	0159      	lsls	r1, r3, #5
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	440b      	add	r3, r1
 80076f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f6:	4619      	mov	r1, r3
 80076f8:	4b81      	ldr	r3, [pc, #516]	; (8007900 <USB_EP0StartXfer+0x2b4>)
 80076fa:	4013      	ands	r3, r2
 80076fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	0159      	lsls	r1, r3, #5
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	440b      	add	r3, r1
 8007714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007718:	4619      	mov	r1, r3
 800771a:	4b78      	ldr	r3, [pc, #480]	; (80078fc <USB_EP0StartXfer+0x2b0>)
 800771c:	4013      	ands	r3, r2
 800771e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	429a      	cmp	r2, r3
 800772a:	d903      	bls.n	8007734 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	440a      	add	r2, r1
 800774a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800774e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007752:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007760:	691a      	ldr	r2, [r3, #16]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800776a:	6939      	ldr	r1, [r7, #16]
 800776c:	0148      	lsls	r0, r1, #5
 800776e:	6979      	ldr	r1, [r7, #20]
 8007770:	4401      	add	r1, r0
 8007772:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007776:	4313      	orrs	r3, r2
 8007778:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800777a:	79fb      	ldrb	r3, [r7, #7]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d11e      	bne.n	80077be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d009      	beq.n	800779c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	4413      	add	r3, r2
 8007790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007794:	461a      	mov	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	0151      	lsls	r1, r2, #5
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	440a      	add	r2, r1
 80077b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	e097      	b.n	80078ee <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	0151      	lsls	r1, r2, #5
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	440a      	add	r2, r1
 80077d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 8083 	beq.w	80078ee <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	2101      	movs	r1, #1
 80077fa:	fa01 f303 	lsl.w	r3, r1, r3
 80077fe:	6979      	ldr	r1, [r7, #20]
 8007800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007804:	4313      	orrs	r3, r2
 8007806:	634b      	str	r3, [r1, #52]	; 0x34
 8007808:	e071      	b.n	80078ee <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007816:	691a      	ldr	r2, [r3, #16]
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	0159      	lsls	r1, r3, #5
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	440b      	add	r3, r1
 8007820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007824:	4619      	mov	r1, r3
 8007826:	4b36      	ldr	r3, [pc, #216]	; (8007900 <USB_EP0StartXfer+0x2b4>)
 8007828:	4013      	ands	r3, r2
 800782a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007838:	691a      	ldr	r2, [r3, #16]
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	0159      	lsls	r1, r3, #5
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	440b      	add	r3, r1
 8007842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007846:	4619      	mov	r1, r3
 8007848:	4b2c      	ldr	r3, [pc, #176]	; (80078fc <USB_EP0StartXfer+0x2b0>)
 800784a:	4013      	ands	r3, r2
 800784c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	440a      	add	r2, r1
 800787c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007884:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007892:	691a      	ldr	r2, [r3, #16]
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800789c:	6939      	ldr	r1, [r7, #16]
 800789e:	0148      	lsls	r0, r1, #5
 80078a0:	6979      	ldr	r1, [r7, #20]
 80078a2:	4401      	add	r1, r0
 80078a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078a8:	4313      	orrs	r3, r2
 80078aa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d10d      	bne.n	80078ce <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d009      	beq.n	80078ce <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6919      	ldr	r1, [r3, #16]
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ca:	460a      	mov	r2, r1
 80078cc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	e007ffff 	.word	0xe007ffff
 8007900:	fff80000 	.word	0xfff80000

08007904 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d14a      	bne.n	80079b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800793a:	f040 8086 	bne.w	8007a4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	7812      	ldrb	r2, [r2, #0]
 8007952:	0151      	lsls	r1, r2, #5
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	440a      	add	r2, r1
 8007958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800795c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007960:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	7812      	ldrb	r2, [r2, #0]
 8007976:	0151      	lsls	r1, r2, #5
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	440a      	add	r2, r1
 800797c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007984:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3301      	adds	r3, #1
 800798a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007992:	4293      	cmp	r3, r2
 8007994:	d902      	bls.n	800799c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]
          break;
 800799a:	e056      	b.n	8007a4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b4:	d0e7      	beq.n	8007986 <USB_EPStopXfer+0x82>
 80079b6:	e048      	b.n	8007a4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d0:	d13b      	bne.n	8007a4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	7812      	ldrb	r2, [r2, #0]
 80079e6:	0151      	lsls	r1, r2, #5
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	440a      	add	r2, r1
 80079ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	7812      	ldrb	r2, [r2, #0]
 8007a0a:	0151      	lsls	r1, r2, #5
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	440a      	add	r2, r1
 8007a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f242 7210 	movw	r2, #10000	; 0x2710
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d902      	bls.n	8007a30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a2e:	e00c      	b.n	8007a4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a48:	d0e7      	beq.n	8007a1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b089      	sub	sp, #36	; 0x24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4611      	mov	r1, r2
 8007a64:	461a      	mov	r2, r3
 8007a66:	460b      	mov	r3, r1
 8007a68:	71fb      	strb	r3, [r7, #7]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d123      	bne.n	8007ac6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a7e:	88bb      	ldrh	r3, [r7, #4]
 8007a80:	3303      	adds	r3, #3
 8007a82:	089b      	lsrs	r3, r3, #2
 8007a84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a86:	2300      	movs	r3, #0
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	e018      	b.n	8007abe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a8c:	79fb      	ldrb	r3, [r7, #7]
 8007a8e:	031a      	lsls	r2, r3, #12
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a98:	461a      	mov	r2, r3
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	3301      	adds	r3, #1
 8007abc:	61bb      	str	r3, [r7, #24]
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d3e2      	bcc.n	8007a8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3724      	adds	r7, #36	; 0x24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b08b      	sub	sp, #44	; 0x2c
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	089b      	lsrs	r3, r3, #2
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007af2:	88fb      	ldrh	r3, [r7, #6]
 8007af4:	f003 0303 	and.w	r3, r3, #3
 8007af8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007afa:	2300      	movs	r3, #0
 8007afc:	623b      	str	r3, [r7, #32]
 8007afe:	e014      	b.n	8007b2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	3301      	adds	r3, #1
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	3301      	adds	r3, #1
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	3301      	adds	r3, #1
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	3301      	adds	r3, #1
 8007b28:	623b      	str	r3, [r7, #32]
 8007b2a:	6a3a      	ldr	r2, [r7, #32]
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d3e6      	bcc.n	8007b00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b32:	8bfb      	ldrh	r3, [r7, #30]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d01e      	beq.n	8007b76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b42:	461a      	mov	r2, r3
 8007b44:	f107 0310 	add.w	r3, r7, #16
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	fa22 f303 	lsr.w	r3, r2, r3
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	701a      	strb	r2, [r3, #0]
      i++;
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	3301      	adds	r3, #1
 8007b62:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	3301      	adds	r3, #1
 8007b68:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b6a:	8bfb      	ldrh	r3, [r7, #30]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b70:	8bfb      	ldrh	r3, [r7, #30]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1ea      	bne.n	8007b4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	372c      	adds	r7, #44	; 0x2c
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	785b      	ldrb	r3, [r3, #1]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d12c      	bne.n	8007bfa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	db12      	blt.n	8007bd8 <USB_EPSetStall+0x54>
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00f      	beq.n	8007bd8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	0151      	lsls	r1, r2, #5
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	440a      	add	r2, r1
 8007bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bd6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	0151      	lsls	r1, r2, #5
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	440a      	add	r2, r1
 8007bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	e02b      	b.n	8007c52 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	db12      	blt.n	8007c32 <USB_EPSetStall+0xae>
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00f      	beq.n	8007c32 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	0151      	lsls	r1, r2, #5
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	440a      	add	r2, r1
 8007c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c30:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	0151      	lsls	r1, r2, #5
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	440a      	add	r2, r1
 8007c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	785b      	ldrb	r3, [r3, #1]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d128      	bne.n	8007cce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	0151      	lsls	r1, r2, #5
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	440a      	add	r2, r1
 8007c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	791b      	ldrb	r3, [r3, #4]
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d003      	beq.n	8007cac <USB_EPClearStall+0x4c>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	791b      	ldrb	r3, [r3, #4]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d138      	bne.n	8007d1e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	0151      	lsls	r1, r2, #5
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	440a      	add	r2, r1
 8007cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	e027      	b.n	8007d1e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	0151      	lsls	r1, r2, #5
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	440a      	add	r2, r1
 8007ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	791b      	ldrb	r3, [r3, #4]
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d003      	beq.n	8007cfe <USB_EPClearStall+0x9e>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	791b      	ldrb	r3, [r3, #4]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d10f      	bne.n	8007d1e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	0151      	lsls	r1, r2, #5
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	440a      	add	r2, r1
 8007d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d1c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d4e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	011b      	lsls	r3, r3, #4
 8007d5c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d60:	68f9      	ldr	r1, [r7, #12]
 8007d62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d66:	4313      	orrs	r3, r2
 8007d68:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d92:	f023 0303 	bic.w	r3, r3, #3
 8007d96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007da6:	f023 0302 	bic.w	r3, r3, #2
 8007daa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dd4:	f023 0303 	bic.w	r3, r3, #3
 8007dd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007de8:	f043 0302 	orr.w	r3, r3, #2
 8007dec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4013      	ands	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e14:	68fb      	ldr	r3, [r7, #12]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b085      	sub	sp, #20
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	4013      	ands	r3, r2
 8007e44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	0c1b      	lsrs	r3, r3, #16
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b085      	sub	sp, #20
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	4013      	ands	r3, r2
 8007e78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	b29b      	uxth	r3, r3
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007eb8:	68bb      	ldr	r3, [r7, #8]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b087      	sub	sp, #28
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	f003 030f 	and.w	r3, r3, #15
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef6:	01db      	lsls	r3, r3, #7
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4013      	ands	r3, r2
 8007f12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f14:	68bb      	ldr	r3, [r7, #8]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
	...

08007f40 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <USB_ActivateSetup+0x44>)
 8007f5e:	4013      	ands	r3, r2
 8007f60:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	fffff800 	.word	0xfffff800

08007f88 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	460b      	mov	r3, r1
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	333c      	adds	r3, #60	; 0x3c
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	4a26      	ldr	r2, [pc, #152]	; (8008040 <USB_EP0_OutStart+0xb8>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d90a      	bls.n	8007fc2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fbc:	d101      	bne.n	8007fc2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e037      	b.n	8008032 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	697a      	ldr	r2, [r7, #20]
 8007fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff0:	f043 0318 	orr.w	r3, r3, #24
 8007ff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008004:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008008:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800800a:	7afb      	ldrb	r3, [r7, #11]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d10f      	bne.n	8008030 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008016:	461a      	mov	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800802a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800802e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	4f54300a 	.word	0x4f54300a

08008044 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4a13      	ldr	r2, [pc, #76]	; (80080a8 <USB_CoreReset+0x64>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d901      	bls.n	8008062 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e01b      	b.n	800809a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	daf2      	bge.n	8008050 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f043 0201 	orr.w	r2, r3, #1
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3301      	adds	r3, #1
 800807e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4a09      	ldr	r2, [pc, #36]	; (80080a8 <USB_CoreReset+0x64>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d901      	bls.n	800808c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e006      	b.n	800809a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	2b01      	cmp	r3, #1
 8008096:	d0f0      	beq.n	800807a <USB_CoreReset+0x36>

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	00030d40 	.word	0x00030d40

080080ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	460b      	mov	r3, r1
 80080b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80080b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80080bc:	f002 fd78 	bl	800abb0 <malloc>
 80080c0:	4603      	mov	r3, r0
 80080c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d109      	bne.n	80080de <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	32b0      	adds	r2, #176	; 0xb0
 80080d4:	2100      	movs	r1, #0
 80080d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80080da:	2302      	movs	r3, #2
 80080dc:	e0d4      	b.n	8008288 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80080de:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80080e2:	2100      	movs	r1, #0
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f002 fe3f 	bl	800ad68 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	32b0      	adds	r2, #176	; 0xb0
 80080f4:	68f9      	ldr	r1, [r7, #12]
 80080f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	32b0      	adds	r2, #176	; 0xb0
 8008104:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	7c1b      	ldrb	r3, [r3, #16]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d138      	bne.n	8008188 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008116:	4b5e      	ldr	r3, [pc, #376]	; (8008290 <USBD_CDC_Init+0x1e4>)
 8008118:	7819      	ldrb	r1, [r3, #0]
 800811a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800811e:	2202      	movs	r2, #2
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f002 fba2 	bl	800a86a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008126:	4b5a      	ldr	r3, [pc, #360]	; (8008290 <USBD_CDC_Init+0x1e4>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	f003 020f 	and.w	r2, r3, #15
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	4613      	mov	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	440b      	add	r3, r1
 800813a:	3324      	adds	r3, #36	; 0x24
 800813c:	2201      	movs	r2, #1
 800813e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008140:	4b54      	ldr	r3, [pc, #336]	; (8008294 <USBD_CDC_Init+0x1e8>)
 8008142:	7819      	ldrb	r1, [r3, #0]
 8008144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008148:	2202      	movs	r2, #2
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f002 fb8d 	bl	800a86a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008150:	4b50      	ldr	r3, [pc, #320]	; (8008294 <USBD_CDC_Init+0x1e8>)
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	f003 020f 	and.w	r2, r3, #15
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	440b      	add	r3, r1
 8008164:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008168:	2201      	movs	r2, #1
 800816a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800816c:	4b4a      	ldr	r3, [pc, #296]	; (8008298 <USBD_CDC_Init+0x1ec>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 020f 	and.w	r2, r3, #15
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	4613      	mov	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	440b      	add	r3, r1
 8008180:	3326      	adds	r3, #38	; 0x26
 8008182:	2210      	movs	r2, #16
 8008184:	801a      	strh	r2, [r3, #0]
 8008186:	e035      	b.n	80081f4 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008188:	4b41      	ldr	r3, [pc, #260]	; (8008290 <USBD_CDC_Init+0x1e4>)
 800818a:	7819      	ldrb	r1, [r3, #0]
 800818c:	2340      	movs	r3, #64	; 0x40
 800818e:	2202      	movs	r2, #2
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f002 fb6a 	bl	800a86a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008196:	4b3e      	ldr	r3, [pc, #248]	; (8008290 <USBD_CDC_Init+0x1e4>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	f003 020f 	and.w	r2, r3, #15
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	3324      	adds	r3, #36	; 0x24
 80081ac:	2201      	movs	r2, #1
 80081ae:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80081b0:	4b38      	ldr	r3, [pc, #224]	; (8008294 <USBD_CDC_Init+0x1e8>)
 80081b2:	7819      	ldrb	r1, [r3, #0]
 80081b4:	2340      	movs	r3, #64	; 0x40
 80081b6:	2202      	movs	r2, #2
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f002 fb56 	bl	800a86a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80081be:	4b35      	ldr	r3, [pc, #212]	; (8008294 <USBD_CDC_Init+0x1e8>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	f003 020f 	and.w	r2, r3, #15
 80081c6:	6879      	ldr	r1, [r7, #4]
 80081c8:	4613      	mov	r3, r2
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	440b      	add	r3, r1
 80081d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80081d6:	2201      	movs	r2, #1
 80081d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80081da:	4b2f      	ldr	r3, [pc, #188]	; (8008298 <USBD_CDC_Init+0x1ec>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f003 020f 	and.w	r2, r3, #15
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	3326      	adds	r3, #38	; 0x26
 80081f0:	2210      	movs	r2, #16
 80081f2:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081f4:	4b28      	ldr	r3, [pc, #160]	; (8008298 <USBD_CDC_Init+0x1ec>)
 80081f6:	7819      	ldrb	r1, [r3, #0]
 80081f8:	2308      	movs	r3, #8
 80081fa:	2203      	movs	r2, #3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f002 fb34 	bl	800a86a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008202:	4b25      	ldr	r3, [pc, #148]	; (8008298 <USBD_CDC_Init+0x1ec>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	f003 020f 	and.w	r2, r3, #15
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	3324      	adds	r3, #36	; 0x24
 8008218:	2201      	movs	r2, #1
 800821a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	33b0      	adds	r3, #176	; 0xb0
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008252:	2302      	movs	r3, #2
 8008254:	e018      	b.n	8008288 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	7c1b      	ldrb	r3, [r3, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10a      	bne.n	8008274 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800825e:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <USBD_CDC_Init+0x1e8>)
 8008260:	7819      	ldrb	r1, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f002 fbeb 	bl	800aa48 <USBD_LL_PrepareReceive>
 8008272:	e008      	b.n	8008286 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008274:	4b07      	ldr	r3, [pc, #28]	; (8008294 <USBD_CDC_Init+0x1e8>)
 8008276:	7819      	ldrb	r1, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800827e:	2340      	movs	r3, #64	; 0x40
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f002 fbe1 	bl	800aa48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20000093 	.word	0x20000093
 8008294:	20000094 	.word	0x20000094
 8008298:	20000095 	.word	0x20000095

0800829c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80082a8:	4b3a      	ldr	r3, [pc, #232]	; (8008394 <USBD_CDC_DeInit+0xf8>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f002 fb01 	bl	800a8b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80082b4:	4b37      	ldr	r3, [pc, #220]	; (8008394 <USBD_CDC_DeInit+0xf8>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	f003 020f 	and.w	r2, r3, #15
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	440b      	add	r3, r1
 80082c8:	3324      	adds	r3, #36	; 0x24
 80082ca:	2200      	movs	r2, #0
 80082cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80082ce:	4b32      	ldr	r3, [pc, #200]	; (8008398 <USBD_CDC_DeInit+0xfc>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f002 faee 	bl	800a8b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80082da:	4b2f      	ldr	r3, [pc, #188]	; (8008398 <USBD_CDC_DeInit+0xfc>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	f003 020f 	and.w	r2, r3, #15
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	440b      	add	r3, r1
 80082ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082f2:	2200      	movs	r2, #0
 80082f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80082f6:	4b29      	ldr	r3, [pc, #164]	; (800839c <USBD_CDC_DeInit+0x100>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f002 fada 	bl	800a8b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008302:	4b26      	ldr	r3, [pc, #152]	; (800839c <USBD_CDC_DeInit+0x100>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	f003 020f 	and.w	r2, r3, #15
 800830a:	6879      	ldr	r1, [r7, #4]
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	440b      	add	r3, r1
 8008316:	3324      	adds	r3, #36	; 0x24
 8008318:	2200      	movs	r2, #0
 800831a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800831c:	4b1f      	ldr	r3, [pc, #124]	; (800839c <USBD_CDC_DeInit+0x100>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	f003 020f 	and.w	r2, r3, #15
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	440b      	add	r3, r1
 8008330:	3326      	adds	r3, #38	; 0x26
 8008332:	2200      	movs	r2, #0
 8008334:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	32b0      	adds	r2, #176	; 0xb0
 8008340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d01f      	beq.n	8008388 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	33b0      	adds	r3, #176	; 0xb0
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	32b0      	adds	r2, #176	; 0xb0
 8008366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836a:	4618      	mov	r0, r3
 800836c:	f002 fc28 	bl	800abc0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	32b0      	adds	r2, #176	; 0xb0
 800837a:	2100      	movs	r1, #0
 800837c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20000093 	.word	0x20000093
 8008398:	20000094 	.word	0x20000094
 800839c:	20000095 	.word	0x20000095

080083a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	32b0      	adds	r2, #176	; 0xb0
 80083b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e0bf      	b.n	8008550 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d050      	beq.n	800847e <USBD_CDC_Setup+0xde>
 80083dc:	2b20      	cmp	r3, #32
 80083de:	f040 80af 	bne.w	8008540 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	88db      	ldrh	r3, [r3, #6]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d03a      	beq.n	8008460 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	b25b      	sxtb	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	da1b      	bge.n	800842c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	33b0      	adds	r3, #176	; 0xb0
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800840a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	88d2      	ldrh	r2, [r2, #6]
 8008410:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	88db      	ldrh	r3, [r3, #6]
 8008416:	2b07      	cmp	r3, #7
 8008418:	bf28      	it	cs
 800841a:	2307      	movcs	r3, #7
 800841c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	89fa      	ldrh	r2, [r7, #14]
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 fdad 	bl	8009f84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800842a:	e090      	b.n	800854e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	785a      	ldrb	r2, [r3, #1]
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	88db      	ldrh	r3, [r3, #6]
 800843a:	2b3f      	cmp	r3, #63	; 0x3f
 800843c:	d803      	bhi.n	8008446 <USBD_CDC_Setup+0xa6>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	88db      	ldrh	r3, [r3, #6]
 8008442:	b2da      	uxtb	r2, r3
 8008444:	e000      	b.n	8008448 <USBD_CDC_Setup+0xa8>
 8008446:	2240      	movs	r2, #64	; 0x40
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800844e:	6939      	ldr	r1, [r7, #16]
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008456:	461a      	mov	r2, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 fdbf 	bl	8009fdc <USBD_CtlPrepareRx>
      break;
 800845e:	e076      	b.n	800854e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	33b0      	adds	r3, #176	; 0xb0
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	7850      	ldrb	r0, [r2, #1]
 8008476:	2200      	movs	r2, #0
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	4798      	blx	r3
      break;
 800847c:	e067      	b.n	800854e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	2b0b      	cmp	r3, #11
 8008484:	d851      	bhi.n	800852a <USBD_CDC_Setup+0x18a>
 8008486:	a201      	add	r2, pc, #4	; (adr r2, 800848c <USBD_CDC_Setup+0xec>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	080084bd 	.word	0x080084bd
 8008490:	08008539 	.word	0x08008539
 8008494:	0800852b 	.word	0x0800852b
 8008498:	0800852b 	.word	0x0800852b
 800849c:	0800852b 	.word	0x0800852b
 80084a0:	0800852b 	.word	0x0800852b
 80084a4:	0800852b 	.word	0x0800852b
 80084a8:	0800852b 	.word	0x0800852b
 80084ac:	0800852b 	.word	0x0800852b
 80084b0:	0800852b 	.word	0x0800852b
 80084b4:	080084e7 	.word	0x080084e7
 80084b8:	08008511 	.word	0x08008511
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d107      	bne.n	80084d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80084c8:	f107 030a 	add.w	r3, r7, #10
 80084cc:	2202      	movs	r2, #2
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f001 fd57 	bl	8009f84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084d6:	e032      	b.n	800853e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f001 fce1 	bl	8009ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 80084e0:	2303      	movs	r3, #3
 80084e2:	75fb      	strb	r3, [r7, #23]
          break;
 80084e4:	e02b      	b.n	800853e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d107      	bne.n	8008502 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80084f2:	f107 030d 	add.w	r3, r7, #13
 80084f6:	2201      	movs	r2, #1
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f001 fd42 	bl	8009f84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008500:	e01d      	b.n	800853e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 fccc 	bl	8009ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 800850a:	2303      	movs	r3, #3
 800850c:	75fb      	strb	r3, [r7, #23]
          break;
 800850e:	e016      	b.n	800853e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b03      	cmp	r3, #3
 800851a:	d00f      	beq.n	800853c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f001 fcbf 	bl	8009ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008524:	2303      	movs	r3, #3
 8008526:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008528:	e008      	b.n	800853c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 fcb8 	bl	8009ea2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008532:	2303      	movs	r3, #3
 8008534:	75fb      	strb	r3, [r7, #23]
          break;
 8008536:	e002      	b.n	800853e <USBD_CDC_Setup+0x19e>
          break;
 8008538:	bf00      	nop
 800853a:	e008      	b.n	800854e <USBD_CDC_Setup+0x1ae>
          break;
 800853c:	bf00      	nop
      }
      break;
 800853e:	e006      	b.n	800854e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 fcad 	bl	8009ea2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008548:	2303      	movs	r3, #3
 800854a:	75fb      	strb	r3, [r7, #23]
      break;
 800854c:	bf00      	nop
  }

  return (uint8_t)ret;
 800854e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800856a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	32b0      	adds	r2, #176	; 0xb0
 8008576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800857e:	2303      	movs	r3, #3
 8008580:	e065      	b.n	800864e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	32b0      	adds	r2, #176	; 0xb0
 800858c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008590:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008592:	78fb      	ldrb	r3, [r7, #3]
 8008594:	f003 020f 	and.w	r2, r3, #15
 8008598:	6879      	ldr	r1, [r7, #4]
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	440b      	add	r3, r1
 80085a4:	3318      	adds	r3, #24
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d02f      	beq.n	800860c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80085ac:	78fb      	ldrb	r3, [r7, #3]
 80085ae:	f003 020f 	and.w	r2, r3, #15
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	4613      	mov	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	440b      	add	r3, r1
 80085be:	3318      	adds	r3, #24
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	78fb      	ldrb	r3, [r7, #3]
 80085c4:	f003 010f 	and.w	r1, r3, #15
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	460b      	mov	r3, r1
 80085cc:	00db      	lsls	r3, r3, #3
 80085ce:	440b      	add	r3, r1
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4403      	add	r3, r0
 80085d4:	3348      	adds	r3, #72	; 0x48
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80085dc:	fb01 f303 	mul.w	r3, r1, r3
 80085e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d112      	bne.n	800860c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	f003 020f 	and.w	r2, r3, #15
 80085ec:	6879      	ldr	r1, [r7, #4]
 80085ee:	4613      	mov	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	440b      	add	r3, r1
 80085f8:	3318      	adds	r3, #24
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085fe:	78f9      	ldrb	r1, [r7, #3]
 8008600:	2300      	movs	r3, #0
 8008602:	2200      	movs	r2, #0
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f002 f9fe 	bl	800aa06 <USBD_LL_Transmit>
 800860a:	e01f      	b.n	800864c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2200      	movs	r2, #0
 8008610:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	33b0      	adds	r3, #176	; 0xb0
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d010      	beq.n	800864c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	33b0      	adds	r3, #176	; 0xb0
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008648:	78fa      	ldrb	r2, [r7, #3]
 800864a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	460b      	mov	r3, r1
 8008660:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	32b0      	adds	r2, #176	; 0xb0
 800866c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008670:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	32b0      	adds	r2, #176	; 0xb0
 800867c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008684:	2303      	movs	r3, #3
 8008686:	e01a      	b.n	80086be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008688:	78fb      	ldrb	r3, [r7, #3]
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f002 f9fc 	bl	800aa8a <USBD_LL_GetRxDataSize>
 8008692:	4602      	mov	r2, r0
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	33b0      	adds	r3, #176	; 0xb0
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	4413      	add	r3, r2
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80086b8:	4611      	mov	r1, r2
 80086ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	32b0      	adds	r2, #176	; 0xb0
 80086d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e025      	b.n	8008734 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	33b0      	adds	r3, #176	; 0xb0
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d01a      	beq.n	8008732 <USBD_CDC_EP0_RxReady+0x6c>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008702:	2bff      	cmp	r3, #255	; 0xff
 8008704:	d015      	beq.n	8008732 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	33b0      	adds	r3, #176	; 0xb0
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800871e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008726:	b292      	uxth	r2, r2
 8008728:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	22ff      	movs	r2, #255	; 0xff
 800872e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008744:	2182      	movs	r1, #130	; 0x82
 8008746:	4818      	ldr	r0, [pc, #96]	; (80087a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008748:	f000 fd49 	bl	80091de <USBD_GetEpDesc>
 800874c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800874e:	2101      	movs	r1, #1
 8008750:	4815      	ldr	r0, [pc, #84]	; (80087a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008752:	f000 fd44 	bl	80091de <USBD_GetEpDesc>
 8008756:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008758:	2181      	movs	r1, #129	; 0x81
 800875a:	4813      	ldr	r0, [pc, #76]	; (80087a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800875c:	f000 fd3f 	bl	80091de <USBD_GetEpDesc>
 8008760:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d002      	beq.n	800876e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2210      	movs	r2, #16
 800876c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d006      	beq.n	8008782 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	2200      	movs	r2, #0
 8008778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800877c:	711a      	strb	r2, [r3, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d006      	beq.n	8008796 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008790:	711a      	strb	r2, [r3, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2243      	movs	r2, #67	; 0x43
 800879a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800879c:	4b02      	ldr	r3, [pc, #8]	; (80087a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000050 	.word	0x20000050

080087ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087b4:	2182      	movs	r1, #130	; 0x82
 80087b6:	4818      	ldr	r0, [pc, #96]	; (8008818 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80087b8:	f000 fd11 	bl	80091de <USBD_GetEpDesc>
 80087bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087be:	2101      	movs	r1, #1
 80087c0:	4815      	ldr	r0, [pc, #84]	; (8008818 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80087c2:	f000 fd0c 	bl	80091de <USBD_GetEpDesc>
 80087c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087c8:	2181      	movs	r1, #129	; 0x81
 80087ca:	4813      	ldr	r0, [pc, #76]	; (8008818 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80087cc:	f000 fd07 	bl	80091de <USBD_GetEpDesc>
 80087d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d002      	beq.n	80087de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2210      	movs	r2, #16
 80087dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d006      	beq.n	80087f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	2200      	movs	r2, #0
 80087e8:	711a      	strb	r2, [r3, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f042 0202 	orr.w	r2, r2, #2
 80087f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d006      	beq.n	8008806 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	711a      	strb	r2, [r3, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f042 0202 	orr.w	r2, r2, #2
 8008804:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2243      	movs	r2, #67	; 0x43
 800880a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800880c:	4b02      	ldr	r3, [pc, #8]	; (8008818 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	20000050 	.word	0x20000050

0800881c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008824:	2182      	movs	r1, #130	; 0x82
 8008826:	4818      	ldr	r0, [pc, #96]	; (8008888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008828:	f000 fcd9 	bl	80091de <USBD_GetEpDesc>
 800882c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800882e:	2101      	movs	r1, #1
 8008830:	4815      	ldr	r0, [pc, #84]	; (8008888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008832:	f000 fcd4 	bl	80091de <USBD_GetEpDesc>
 8008836:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008838:	2181      	movs	r1, #129	; 0x81
 800883a:	4813      	ldr	r0, [pc, #76]	; (8008888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800883c:	f000 fccf 	bl	80091de <USBD_GetEpDesc>
 8008840:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2210      	movs	r2, #16
 800884c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d006      	beq.n	8008862 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	2200      	movs	r2, #0
 8008858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800885c:	711a      	strb	r2, [r3, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d006      	beq.n	8008876 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008870:	711a      	strb	r2, [r3, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2243      	movs	r2, #67	; 0x43
 800887a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800887c:	4b02      	ldr	r3, [pc, #8]	; (8008888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000050 	.word	0x20000050

0800888c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	220a      	movs	r2, #10
 8008898:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800889a:	4b03      	ldr	r3, [pc, #12]	; (80088a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	2000000c 	.word	0x2000000c

080088ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80088bc:	2303      	movs	r3, #3
 80088be:	e009      	b.n	80088d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	33b0      	adds	r3, #176	; 0xb0
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	32b0      	adds	r2, #176	; 0xb0
 80088f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008902:	2303      	movs	r3, #3
 8008904:	e008      	b.n	8008918 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	371c      	adds	r7, #28
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	32b0      	adds	r2, #176	; 0xb0
 8008938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800893c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008944:	2303      	movs	r3, #3
 8008946:	e004      	b.n	8008952 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
	...

08008960 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	32b0      	adds	r2, #176	; 0xb0
 8008972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008976:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008978:	2301      	movs	r3, #1
 800897a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008982:	2303      	movs	r3, #3
 8008984:	e025      	b.n	80089d2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800898c:	2b00      	cmp	r3, #0
 800898e:	d11f      	bne.n	80089d0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2201      	movs	r2, #1
 8008994:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008998:	4b10      	ldr	r3, [pc, #64]	; (80089dc <USBD_CDC_TransmitPacket+0x7c>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	f003 020f 	and.w	r2, r3, #15
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4613      	mov	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4403      	add	r3, r0
 80089b2:	3318      	adds	r3, #24
 80089b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80089b6:	4b09      	ldr	r3, [pc, #36]	; (80089dc <USBD_CDC_TransmitPacket+0x7c>)
 80089b8:	7819      	ldrb	r1, [r3, #0]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f002 f81d 	bl	800aa06 <USBD_LL_Transmit>

    ret = USBD_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20000093 	.word	0x20000093

080089e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	32b0      	adds	r2, #176	; 0xb0
 80089f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	32b0      	adds	r2, #176	; 0xb0
 8008a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e018      	b.n	8008a40 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	7c1b      	ldrb	r3, [r3, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10a      	bne.n	8008a2c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a16:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <USBD_CDC_ReceivePacket+0x68>)
 8008a18:	7819      	ldrb	r1, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f002 f80f 	bl	800aa48 <USBD_LL_PrepareReceive>
 8008a2a:	e008      	b.n	8008a3e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a2c:	4b06      	ldr	r3, [pc, #24]	; (8008a48 <USBD_CDC_ReceivePacket+0x68>)
 8008a2e:	7819      	ldrb	r1, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a36:	2340      	movs	r3, #64	; 0x40
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f002 f805 	bl	800aa48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	20000094 	.word	0x20000094

08008a4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	4613      	mov	r3, r2
 8008a58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e01f      	b.n	8008aa4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d003      	beq.n	8008a8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	79fa      	ldrb	r2, [r7, #7]
 8008a96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f001 fe7f 	bl	800a79c <USBD_LL_Init>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e025      	b.n	8008b10 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	32ae      	adds	r2, #174	; 0xae
 8008ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00f      	beq.n	8008b00 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	32ae      	adds	r2, #174	; 0xae
 8008aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	f107 020e 	add.w	r2, r7, #14
 8008af4:	4610      	mov	r0, r2
 8008af6:	4798      	blx	r3
 8008af8:	4602      	mov	r2, r0
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008b06:	1c5a      	adds	r2, r3, #1
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f001 fe87 	bl	800a834 <USBD_LL_Start>
 8008b26:	4603      	mov	r3, r0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b38:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d009      	beq.n	8008b74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	78fa      	ldrb	r2, [r7, #3]
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	4798      	blx	r3
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	78fa      	ldrb	r2, [r7, #3]
 8008b98:	4611      	mov	r1, r2
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	4798      	blx	r3
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f001 f932 	bl	8009e2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008bd8:	461a      	mov	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008be6:	f003 031f 	and.w	r3, r3, #31
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d01a      	beq.n	8008c24 <USBD_LL_SetupStage+0x72>
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d822      	bhi.n	8008c38 <USBD_LL_SetupStage+0x86>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d002      	beq.n	8008bfc <USBD_LL_SetupStage+0x4a>
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d00a      	beq.n	8008c10 <USBD_LL_SetupStage+0x5e>
 8008bfa:	e01d      	b.n	8008c38 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c02:	4619      	mov	r1, r3
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fb5f 	bl	80092c8 <USBD_StdDevReq>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c0e:	e020      	b.n	8008c52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fbc7 	bl	80093ac <USBD_StdItfReq>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	73fb      	strb	r3, [r7, #15]
      break;
 8008c22:	e016      	b.n	8008c52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fc29 	bl	8009484 <USBD_StdEPReq>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73fb      	strb	r3, [r7, #15]
      break;
 8008c36:	e00c      	b.n	8008c52 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f001 fe54 	bl	800a8f4 <USBD_LL_StallEP>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c50:	bf00      	nop
  }

  return ret;
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	460b      	mov	r3, r1
 8008c66:	607a      	str	r2, [r7, #4]
 8008c68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008c6e:	7afb      	ldrb	r3, [r7, #11]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d16e      	bne.n	8008d52 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	f040 8098 	bne.w	8008db8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d913      	bls.n	8008cbc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	1ad2      	subs	r2, r2, r3
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	68da      	ldr	r2, [r3, #12]
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	4293      	cmp	r3, r2
 8008cac:	bf28      	it	cs
 8008cae:	4613      	movcs	r3, r2
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f001 f9ae 	bl	800a016 <USBD_CtlContinueRx>
 8008cba:	e07d      	b.n	8008db8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008cc2:	f003 031f 	and.w	r3, r3, #31
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d014      	beq.n	8008cf4 <USBD_LL_DataOutStage+0x98>
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d81d      	bhi.n	8008d0a <USBD_LL_DataOutStage+0xae>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <USBD_LL_DataOutStage+0x7c>
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d003      	beq.n	8008cde <USBD_LL_DataOutStage+0x82>
 8008cd6:	e018      	b.n	8008d0a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	75bb      	strb	r3, [r7, #22]
            break;
 8008cdc:	e018      	b.n	8008d10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 fa5e 	bl	80091aa <USBD_CoreFindIF>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	75bb      	strb	r3, [r7, #22]
            break;
 8008cf2:	e00d      	b.n	8008d10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f000 fa60 	bl	80091c4 <USBD_CoreFindEP>
 8008d04:	4603      	mov	r3, r0
 8008d06:	75bb      	strb	r3, [r7, #22]
            break;
 8008d08:	e002      	b.n	8008d10 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	75bb      	strb	r3, [r7, #22]
            break;
 8008d0e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008d10:	7dbb      	ldrb	r3, [r7, #22]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d119      	bne.n	8008d4a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	d113      	bne.n	8008d4a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008d22:	7dba      	ldrb	r2, [r7, #22]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	32ae      	adds	r2, #174	; 0xae
 8008d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00b      	beq.n	8008d4a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008d32:	7dba      	ldrb	r2, [r7, #22]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008d3a:	7dba      	ldrb	r2, [r7, #22]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	32ae      	adds	r2, #174	; 0xae
 8008d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f001 f974 	bl	800a038 <USBD_CtlSendStatus>
 8008d50:	e032      	b.n	8008db8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008d52:	7afb      	ldrb	r3, [r7, #11]
 8008d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 fa31 	bl	80091c4 <USBD_CoreFindEP>
 8008d62:	4603      	mov	r3, r0
 8008d64:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d66:	7dbb      	ldrb	r3, [r7, #22]
 8008d68:	2bff      	cmp	r3, #255	; 0xff
 8008d6a:	d025      	beq.n	8008db8 <USBD_LL_DataOutStage+0x15c>
 8008d6c:	7dbb      	ldrb	r3, [r7, #22]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d122      	bne.n	8008db8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b03      	cmp	r3, #3
 8008d7c:	d117      	bne.n	8008dae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008d7e:	7dba      	ldrb	r2, [r7, #22]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	32ae      	adds	r2, #174	; 0xae
 8008d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00f      	beq.n	8008dae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008d8e:	7dba      	ldrb	r2, [r7, #22]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008d96:	7dba      	ldrb	r2, [r7, #22]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	32ae      	adds	r2, #174	; 0xae
 8008d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da0:	699b      	ldr	r3, [r3, #24]
 8008da2:	7afa      	ldrb	r2, [r7, #11]
 8008da4:	4611      	mov	r1, r2
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	4798      	blx	r3
 8008daa:	4603      	mov	r3, r0
 8008dac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
 8008db6:	e000      	b.n	8008dba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b086      	sub	sp, #24
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	60f8      	str	r0, [r7, #12]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	607a      	str	r2, [r7, #4]
 8008dce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008dd0:	7afb      	ldrb	r3, [r7, #11]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d16f      	bne.n	8008eb6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3314      	adds	r3, #20
 8008dda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d15a      	bne.n	8008e9c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	689a      	ldr	r2, [r3, #8]
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d914      	bls.n	8008e1c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	689a      	ldr	r2, [r3, #8]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	1ad2      	subs	r2, r2, r3
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	461a      	mov	r2, r3
 8008e06:	6879      	ldr	r1, [r7, #4]
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f001 f8d6 	bl	8009fba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e0e:	2300      	movs	r3, #0
 8008e10:	2200      	movs	r2, #0
 8008e12:	2100      	movs	r1, #0
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f001 fe17 	bl	800aa48 <USBD_LL_PrepareReceive>
 8008e1a:	e03f      	b.n	8008e9c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d11c      	bne.n	8008e62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d316      	bcc.n	8008e62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d20f      	bcs.n	8008e62 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e42:	2200      	movs	r2, #0
 8008e44:	2100      	movs	r1, #0
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f001 f8b7 	bl	8009fba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e54:	2300      	movs	r3, #0
 8008e56:	2200      	movs	r2, #0
 8008e58:	2100      	movs	r1, #0
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f001 fdf4 	bl	800aa48 <USBD_LL_PrepareReceive>
 8008e60:	e01c      	b.n	8008e9c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d10f      	bne.n	8008e8e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d009      	beq.n	8008e8e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e8e:	2180      	movs	r1, #128	; 0x80
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f001 fd2f 	bl	800a8f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f001 f8e1 	bl	800a05e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d03a      	beq.n	8008f1c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f7ff fe42 	bl	8008b30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008eb4:	e032      	b.n	8008f1c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008eb6:	7afb      	ldrb	r3, [r7, #11]
 8008eb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f97f 	bl	80091c4 <USBD_CoreFindEP>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2bff      	cmp	r3, #255	; 0xff
 8008ece:	d025      	beq.n	8008f1c <USBD_LL_DataInStage+0x15a>
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d122      	bne.n	8008f1c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d11c      	bne.n	8008f1c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008ee2:	7dfa      	ldrb	r2, [r7, #23]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	32ae      	adds	r2, #174	; 0xae
 8008ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eec:	695b      	ldr	r3, [r3, #20]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d014      	beq.n	8008f1c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008ef2:	7dfa      	ldrb	r2, [r7, #23]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008efa:	7dfa      	ldrb	r2, [r7, #23]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	32ae      	adds	r2, #174	; 0xae
 8008f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	7afa      	ldrb	r2, [r7, #11]
 8008f08:	4611      	mov	r1, r2
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	4798      	blx	r3
 8008f0e:	4603      	mov	r3, r0
 8008f10:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008f12:	7dbb      	ldrb	r3, [r7, #22]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008f18:	7dbb      	ldrb	r3, [r7, #22]
 8008f1a:	e000      	b.n	8008f1e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b084      	sub	sp, #16
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d014      	beq.n	8008f8c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00e      	beq.n	8008f8c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	6852      	ldr	r2, [r2, #4]
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	4611      	mov	r1, r2
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	4798      	blx	r3
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f8c:	2340      	movs	r3, #64	; 0x40
 8008f8e:	2200      	movs	r2, #0
 8008f90:	2100      	movs	r1, #0
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f001 fc69 	bl	800a86a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2240      	movs	r2, #64	; 0x40
 8008fa4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fa8:	2340      	movs	r3, #64	; 0x40
 8008faa:	2200      	movs	r2, #0
 8008fac:	2180      	movs	r1, #128	; 0x80
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 fc5b 	bl	800a86a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2240      	movs	r2, #64	; 0x40
 8008fbe:	621a      	str	r2, [r3, #32]

  return ret;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b083      	sub	sp, #12
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	78fa      	ldrb	r2, [r7, #3]
 8008fda:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2204      	movs	r2, #4
 8009004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b04      	cmp	r3, #4
 8009028:	d106      	bne.n	8009038 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009030:	b2da      	uxtb	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b082      	sub	sp, #8
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b03      	cmp	r3, #3
 8009058:	d110      	bne.n	800907c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00b      	beq.n	800907c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	32ae      	adds	r2, #174	; 0xae
 800909c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e01c      	b.n	80090e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b03      	cmp	r3, #3
 80090b2:	d115      	bne.n	80090e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	32ae      	adds	r2, #174	; 0xae
 80090be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c2:	6a1b      	ldr	r3, [r3, #32]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	32ae      	adds	r2, #174	; 0xae
 80090d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d6:	6a1b      	ldr	r3, [r3, #32]
 80090d8:	78fa      	ldrb	r2, [r7, #3]
 80090da:	4611      	mov	r1, r2
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	32ae      	adds	r2, #174	; 0xae
 8009100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d101      	bne.n	800910c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009108:	2303      	movs	r3, #3
 800910a:	e01c      	b.n	8009146 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b03      	cmp	r3, #3
 8009116:	d115      	bne.n	8009144 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	32ae      	adds	r2, #174	; 0xae
 8009122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00b      	beq.n	8009144 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	32ae      	adds	r2, #174	; 0xae
 8009136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	78fa      	ldrb	r2, [r7, #3]
 800913e:	4611      	mov	r1, r2
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}

0800914e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800914e:	b480      	push	{r7}
 8009150:	b083      	sub	sp, #12
 8009152:	af00      	add	r7, sp, #0
 8009154:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00e      	beq.n	80091a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	6852      	ldr	r2, [r2, #4]
 800918e:	b2d2      	uxtb	r2, r2
 8009190:	4611      	mov	r1, r2
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	4798      	blx	r3
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d001      	beq.n	80091a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800919c:	2303      	movs	r3, #3
 800919e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80091b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	460b      	mov	r3, r1
 80091ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80091d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	370c      	adds	r7, #12
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b086      	sub	sp, #24
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	885b      	ldrh	r3, [r3, #2]
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	b29b      	uxth	r3, r3
 8009202:	429a      	cmp	r2, r3
 8009204:	d920      	bls.n	8009248 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800920e:	e013      	b.n	8009238 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009210:	f107 030a 	add.w	r3, r7, #10
 8009214:	4619      	mov	r1, r3
 8009216:	6978      	ldr	r0, [r7, #20]
 8009218:	f000 f81b 	bl	8009252 <USBD_GetNextDesc>
 800921c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	785b      	ldrb	r3, [r3, #1]
 8009222:	2b05      	cmp	r3, #5
 8009224:	d108      	bne.n	8009238 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	789b      	ldrb	r3, [r3, #2]
 800922e:	78fa      	ldrb	r2, [r7, #3]
 8009230:	429a      	cmp	r2, r3
 8009232:	d008      	beq.n	8009246 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009234:	2300      	movs	r3, #0
 8009236:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	885b      	ldrh	r3, [r3, #2]
 800923c:	b29a      	uxth	r2, r3
 800923e:	897b      	ldrh	r3, [r7, #10]
 8009240:	429a      	cmp	r2, r3
 8009242:	d8e5      	bhi.n	8009210 <USBD_GetEpDesc+0x32>
 8009244:	e000      	b.n	8009248 <USBD_GetEpDesc+0x6a>
          break;
 8009246:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009248:	693b      	ldr	r3, [r7, #16]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009252:	b480      	push	{r7}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	881a      	ldrh	r2, [r3, #0]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	b29b      	uxth	r3, r3
 800926a:	4413      	add	r3, r2
 800926c:	b29a      	uxth	r2, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4413      	add	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800927e:	68fb      	ldr	r3, [r7, #12]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	3301      	adds	r3, #1
 80092a2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80092aa:	8a3b      	ldrh	r3, [r7, #16]
 80092ac:	021b      	lsls	r3, r3, #8
 80092ae:	b21a      	sxth	r2, r3
 80092b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	b21b      	sxth	r3, r3
 80092b8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80092ba:	89fb      	ldrh	r3, [r7, #14]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092de:	2b40      	cmp	r3, #64	; 0x40
 80092e0:	d005      	beq.n	80092ee <USBD_StdDevReq+0x26>
 80092e2:	2b40      	cmp	r3, #64	; 0x40
 80092e4:	d857      	bhi.n	8009396 <USBD_StdDevReq+0xce>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00f      	beq.n	800930a <USBD_StdDevReq+0x42>
 80092ea:	2b20      	cmp	r3, #32
 80092ec:	d153      	bne.n	8009396 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	32ae      	adds	r2, #174	; 0xae
 80092f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	4798      	blx	r3
 8009304:	4603      	mov	r3, r0
 8009306:	73fb      	strb	r3, [r7, #15]
      break;
 8009308:	e04a      	b.n	80093a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	785b      	ldrb	r3, [r3, #1]
 800930e:	2b09      	cmp	r3, #9
 8009310:	d83b      	bhi.n	800938a <USBD_StdDevReq+0xc2>
 8009312:	a201      	add	r2, pc, #4	; (adr r2, 8009318 <USBD_StdDevReq+0x50>)
 8009314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009318:	0800936d 	.word	0x0800936d
 800931c:	08009381 	.word	0x08009381
 8009320:	0800938b 	.word	0x0800938b
 8009324:	08009377 	.word	0x08009377
 8009328:	0800938b 	.word	0x0800938b
 800932c:	0800934b 	.word	0x0800934b
 8009330:	08009341 	.word	0x08009341
 8009334:	0800938b 	.word	0x0800938b
 8009338:	08009363 	.word	0x08009363
 800933c:	08009355 	.word	0x08009355
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 fa3c 	bl	80097c0 <USBD_GetDescriptor>
          break;
 8009348:	e024      	b.n	8009394 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fbcb 	bl	8009ae8 <USBD_SetAddress>
          break;
 8009352:	e01f      	b.n	8009394 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fc0a 	bl	8009b70 <USBD_SetConfig>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]
          break;
 8009360:	e018      	b.n	8009394 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fcad 	bl	8009cc4 <USBD_GetConfig>
          break;
 800936a:	e013      	b.n	8009394 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fcde 	bl	8009d30 <USBD_GetStatus>
          break;
 8009374:	e00e      	b.n	8009394 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fd0d 	bl	8009d98 <USBD_SetFeature>
          break;
 800937e:	e009      	b.n	8009394 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fd31 	bl	8009dea <USBD_ClrFeature>
          break;
 8009388:	e004      	b.n	8009394 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 fd88 	bl	8009ea2 <USBD_CtlError>
          break;
 8009392:	bf00      	nop
      }
      break;
 8009394:	e004      	b.n	80093a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fd82 	bl	8009ea2 <USBD_CtlError>
      break;
 800939e:	bf00      	nop
  }

  return ret;
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop

080093ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093c2:	2b40      	cmp	r3, #64	; 0x40
 80093c4:	d005      	beq.n	80093d2 <USBD_StdItfReq+0x26>
 80093c6:	2b40      	cmp	r3, #64	; 0x40
 80093c8:	d852      	bhi.n	8009470 <USBD_StdItfReq+0xc4>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <USBD_StdItfReq+0x26>
 80093ce:	2b20      	cmp	r3, #32
 80093d0:	d14e      	bne.n	8009470 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	3b01      	subs	r3, #1
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d840      	bhi.n	8009462 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	889b      	ldrh	r3, [r3, #4]
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d836      	bhi.n	8009458 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	889b      	ldrh	r3, [r3, #4]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7ff fed9 	bl	80091aa <USBD_CoreFindIF>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	2bff      	cmp	r3, #255	; 0xff
 8009400:	d01d      	beq.n	800943e <USBD_StdItfReq+0x92>
 8009402:	7bbb      	ldrb	r3, [r7, #14]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d11a      	bne.n	800943e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009408:	7bba      	ldrb	r2, [r7, #14]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	32ae      	adds	r2, #174	; 0xae
 800940e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00f      	beq.n	8009438 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009418:	7bba      	ldrb	r2, [r7, #14]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009420:	7bba      	ldrb	r2, [r7, #14]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	32ae      	adds	r2, #174	; 0xae
 8009426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	4798      	blx	r3
 8009432:	4603      	mov	r3, r0
 8009434:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009436:	e004      	b.n	8009442 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009438:	2303      	movs	r3, #3
 800943a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800943c:	e001      	b.n	8009442 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800943e:	2303      	movs	r3, #3
 8009440:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	88db      	ldrh	r3, [r3, #6]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d110      	bne.n	800946c <USBD_StdItfReq+0xc0>
 800944a:	7bfb      	ldrb	r3, [r7, #15]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10d      	bne.n	800946c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fdf1 	bl	800a038 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009456:	e009      	b.n	800946c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fd21 	bl	8009ea2 <USBD_CtlError>
          break;
 8009460:	e004      	b.n	800946c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 fd1c 	bl	8009ea2 <USBD_CtlError>
          break;
 800946a:	e000      	b.n	800946e <USBD_StdItfReq+0xc2>
          break;
 800946c:	bf00      	nop
      }
      break;
 800946e:	e004      	b.n	800947a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fd15 	bl	8009ea2 <USBD_CtlError>
      break;
 8009478:	bf00      	nop
  }

  return ret;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	889b      	ldrh	r3, [r3, #4]
 8009496:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094a0:	2b40      	cmp	r3, #64	; 0x40
 80094a2:	d007      	beq.n	80094b4 <USBD_StdEPReq+0x30>
 80094a4:	2b40      	cmp	r3, #64	; 0x40
 80094a6:	f200 817f 	bhi.w	80097a8 <USBD_StdEPReq+0x324>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d02a      	beq.n	8009504 <USBD_StdEPReq+0x80>
 80094ae:	2b20      	cmp	r3, #32
 80094b0:	f040 817a 	bne.w	80097a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7ff fe83 	bl	80091c4 <USBD_CoreFindEP>
 80094be:	4603      	mov	r3, r0
 80094c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094c2:	7b7b      	ldrb	r3, [r7, #13]
 80094c4:	2bff      	cmp	r3, #255	; 0xff
 80094c6:	f000 8174 	beq.w	80097b2 <USBD_StdEPReq+0x32e>
 80094ca:	7b7b      	ldrb	r3, [r7, #13]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f040 8170 	bne.w	80097b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80094d2:	7b7a      	ldrb	r2, [r7, #13]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80094da:	7b7a      	ldrb	r2, [r7, #13]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	32ae      	adds	r2, #174	; 0xae
 80094e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f000 8163 	beq.w	80097b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80094ec:	7b7a      	ldrb	r2, [r7, #13]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	32ae      	adds	r2, #174	; 0xae
 80094f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	4798      	blx	r3
 80094fe:	4603      	mov	r3, r0
 8009500:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009502:	e156      	b.n	80097b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	2b03      	cmp	r3, #3
 800950a:	d008      	beq.n	800951e <USBD_StdEPReq+0x9a>
 800950c:	2b03      	cmp	r3, #3
 800950e:	f300 8145 	bgt.w	800979c <USBD_StdEPReq+0x318>
 8009512:	2b00      	cmp	r3, #0
 8009514:	f000 809b 	beq.w	800964e <USBD_StdEPReq+0x1ca>
 8009518:	2b01      	cmp	r3, #1
 800951a:	d03c      	beq.n	8009596 <USBD_StdEPReq+0x112>
 800951c:	e13e      	b.n	800979c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b02      	cmp	r3, #2
 8009528:	d002      	beq.n	8009530 <USBD_StdEPReq+0xac>
 800952a:	2b03      	cmp	r3, #3
 800952c:	d016      	beq.n	800955c <USBD_StdEPReq+0xd8>
 800952e:	e02c      	b.n	800958a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00d      	beq.n	8009552 <USBD_StdEPReq+0xce>
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	2b80      	cmp	r3, #128	; 0x80
 800953a:	d00a      	beq.n	8009552 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f001 f9d7 	bl	800a8f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009546:	2180      	movs	r1, #128	; 0x80
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 f9d3 	bl	800a8f4 <USBD_LL_StallEP>
 800954e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009550:	e020      	b.n	8009594 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fca4 	bl	8009ea2 <USBD_CtlError>
              break;
 800955a:	e01b      	b.n	8009594 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	885b      	ldrh	r3, [r3, #2]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10e      	bne.n	8009582 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00b      	beq.n	8009582 <USBD_StdEPReq+0xfe>
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	2b80      	cmp	r3, #128	; 0x80
 800956e:	d008      	beq.n	8009582 <USBD_StdEPReq+0xfe>
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	88db      	ldrh	r3, [r3, #6]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d104      	bne.n	8009582 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f001 f9b9 	bl	800a8f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fd58 	bl	800a038 <USBD_CtlSendStatus>

              break;
 8009588:	e004      	b.n	8009594 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800958a:	6839      	ldr	r1, [r7, #0]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fc88 	bl	8009ea2 <USBD_CtlError>
              break;
 8009592:	bf00      	nop
          }
          break;
 8009594:	e107      	b.n	80097a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d002      	beq.n	80095a8 <USBD_StdEPReq+0x124>
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d016      	beq.n	80095d4 <USBD_StdEPReq+0x150>
 80095a6:	e04b      	b.n	8009640 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00d      	beq.n	80095ca <USBD_StdEPReq+0x146>
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
 80095b0:	2b80      	cmp	r3, #128	; 0x80
 80095b2:	d00a      	beq.n	80095ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 f99b 	bl	800a8f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095be:	2180      	movs	r1, #128	; 0x80
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f001 f997 	bl	800a8f4 <USBD_LL_StallEP>
 80095c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095c8:	e040      	b.n	800964c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fc68 	bl	8009ea2 <USBD_CtlError>
              break;
 80095d2:	e03b      	b.n	800964c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	885b      	ldrh	r3, [r3, #2]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d136      	bne.n	800964a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d004      	beq.n	80095f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 f9a1 	bl	800a932 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fd21 	bl	800a038 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80095f6:	7bbb      	ldrb	r3, [r7, #14]
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7ff fde2 	bl	80091c4 <USBD_CoreFindEP>
 8009600:	4603      	mov	r3, r0
 8009602:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009604:	7b7b      	ldrb	r3, [r7, #13]
 8009606:	2bff      	cmp	r3, #255	; 0xff
 8009608:	d01f      	beq.n	800964a <USBD_StdEPReq+0x1c6>
 800960a:	7b7b      	ldrb	r3, [r7, #13]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d11c      	bne.n	800964a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009610:	7b7a      	ldrb	r2, [r7, #13]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009618:	7b7a      	ldrb	r2, [r7, #13]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	32ae      	adds	r2, #174	; 0xae
 800961e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d010      	beq.n	800964a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009628:	7b7a      	ldrb	r2, [r7, #13]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	32ae      	adds	r2, #174	; 0xae
 800962e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	4798      	blx	r3
 800963a:	4603      	mov	r3, r0
 800963c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800963e:	e004      	b.n	800964a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fc2d 	bl	8009ea2 <USBD_CtlError>
              break;
 8009648:	e000      	b.n	800964c <USBD_StdEPReq+0x1c8>
              break;
 800964a:	bf00      	nop
          }
          break;
 800964c:	e0ab      	b.n	80097a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009654:	b2db      	uxtb	r3, r3
 8009656:	2b02      	cmp	r3, #2
 8009658:	d002      	beq.n	8009660 <USBD_StdEPReq+0x1dc>
 800965a:	2b03      	cmp	r3, #3
 800965c:	d032      	beq.n	80096c4 <USBD_StdEPReq+0x240>
 800965e:	e097      	b.n	8009790 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d007      	beq.n	8009676 <USBD_StdEPReq+0x1f2>
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b80      	cmp	r3, #128	; 0x80
 800966a:	d004      	beq.n	8009676 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fc17 	bl	8009ea2 <USBD_CtlError>
                break;
 8009674:	e091      	b.n	800979a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800967a:	2b00      	cmp	r3, #0
 800967c:	da0b      	bge.n	8009696 <USBD_StdEPReq+0x212>
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009684:	4613      	mov	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	3310      	adds	r3, #16
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	4413      	add	r3, r2
 8009692:	3304      	adds	r3, #4
 8009694:	e00b      	b.n	80096ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009696:	7bbb      	ldrb	r3, [r7, #14]
 8009698:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800969c:	4613      	mov	r3, r2
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4413      	add	r3, r2
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	4413      	add	r3, r2
 80096ac:	3304      	adds	r3, #4
 80096ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	2202      	movs	r2, #2
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fc61 	bl	8009f84 <USBD_CtlSendData>
              break;
 80096c2:	e06a      	b.n	800979a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80096c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	da11      	bge.n	80096f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
 80096ce:	f003 020f 	and.w	r2, r3, #15
 80096d2:	6879      	ldr	r1, [r7, #4]
 80096d4:	4613      	mov	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	440b      	add	r3, r1
 80096de:	3324      	adds	r3, #36	; 0x24
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d117      	bne.n	8009716 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fbda 	bl	8009ea2 <USBD_CtlError>
                  break;
 80096ee:	e054      	b.n	800979a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	f003 020f 	and.w	r2, r3, #15
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	4613      	mov	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4413      	add	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d104      	bne.n	8009716 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fbc7 	bl	8009ea2 <USBD_CtlError>
                  break;
 8009714:	e041      	b.n	800979a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009716:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800971a:	2b00      	cmp	r3, #0
 800971c:	da0b      	bge.n	8009736 <USBD_StdEPReq+0x2b2>
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009724:	4613      	mov	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	3310      	adds	r3, #16
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	4413      	add	r3, r2
 8009732:	3304      	adds	r3, #4
 8009734:	e00b      	b.n	800974e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009736:	7bbb      	ldrb	r3, [r7, #14]
 8009738:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	4413      	add	r3, r2
 800974c:	3304      	adds	r3, #4
 800974e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009750:	7bbb      	ldrb	r3, [r7, #14]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d002      	beq.n	800975c <USBD_StdEPReq+0x2d8>
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	2b80      	cmp	r3, #128	; 0x80
 800975a:	d103      	bne.n	8009764 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2200      	movs	r2, #0
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	e00e      	b.n	8009782 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009764:	7bbb      	ldrb	r3, [r7, #14]
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f001 f901 	bl	800a970 <USBD_LL_IsStallEP>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2201      	movs	r2, #1
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	e002      	b.n	8009782 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2200      	movs	r2, #0
 8009780:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	2202      	movs	r2, #2
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fbfb 	bl	8009f84 <USBD_CtlSendData>
              break;
 800978e:	e004      	b.n	800979a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fb85 	bl	8009ea2 <USBD_CtlError>
              break;
 8009798:	bf00      	nop
          }
          break;
 800979a:	e004      	b.n	80097a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fb7f 	bl	8009ea2 <USBD_CtlError>
          break;
 80097a4:	bf00      	nop
      }
      break;
 80097a6:	e005      	b.n	80097b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fb79 	bl	8009ea2 <USBD_CtlError>
      break;
 80097b0:	e000      	b.n	80097b4 <USBD_StdEPReq+0x330>
      break;
 80097b2:	bf00      	nop
  }

  return ret;
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80097ca:	2300      	movs	r3, #0
 80097cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	885b      	ldrh	r3, [r3, #2]
 80097da:	0a1b      	lsrs	r3, r3, #8
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	2b0e      	cmp	r3, #14
 80097e2:	f200 8152 	bhi.w	8009a8a <USBD_GetDescriptor+0x2ca>
 80097e6:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <USBD_GetDescriptor+0x2c>)
 80097e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ec:	0800985d 	.word	0x0800985d
 80097f0:	08009875 	.word	0x08009875
 80097f4:	080098b5 	.word	0x080098b5
 80097f8:	08009a8b 	.word	0x08009a8b
 80097fc:	08009a8b 	.word	0x08009a8b
 8009800:	08009a2b 	.word	0x08009a2b
 8009804:	08009a57 	.word	0x08009a57
 8009808:	08009a8b 	.word	0x08009a8b
 800980c:	08009a8b 	.word	0x08009a8b
 8009810:	08009a8b 	.word	0x08009a8b
 8009814:	08009a8b 	.word	0x08009a8b
 8009818:	08009a8b 	.word	0x08009a8b
 800981c:	08009a8b 	.word	0x08009a8b
 8009820:	08009a8b 	.word	0x08009a8b
 8009824:	08009829 	.word	0x08009829
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00b      	beq.n	800984c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800983a:	69db      	ldr	r3, [r3, #28]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	7c12      	ldrb	r2, [r2, #16]
 8009840:	f107 0108 	add.w	r1, r7, #8
 8009844:	4610      	mov	r0, r2
 8009846:	4798      	blx	r3
 8009848:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800984a:	e126      	b.n	8009a9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fb27 	bl	8009ea2 <USBD_CtlError>
        err++;
 8009854:	7afb      	ldrb	r3, [r7, #11]
 8009856:	3301      	adds	r3, #1
 8009858:	72fb      	strb	r3, [r7, #11]
      break;
 800985a:	e11e      	b.n	8009a9a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	7c12      	ldrb	r2, [r2, #16]
 8009868:	f107 0108 	add.w	r1, r7, #8
 800986c:	4610      	mov	r0, r2
 800986e:	4798      	blx	r3
 8009870:	60f8      	str	r0, [r7, #12]
      break;
 8009872:	e112      	b.n	8009a9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	7c1b      	ldrb	r3, [r3, #16]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10d      	bne.n	8009898 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009884:	f107 0208 	add.w	r2, r7, #8
 8009888:	4610      	mov	r0, r2
 800988a:	4798      	blx	r3
 800988c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3301      	adds	r3, #1
 8009892:	2202      	movs	r2, #2
 8009894:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009896:	e100      	b.n	8009a9a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a0:	f107 0208 	add.w	r2, r7, #8
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3301      	adds	r3, #1
 80098ae:	2202      	movs	r2, #2
 80098b0:	701a      	strb	r2, [r3, #0]
      break;
 80098b2:	e0f2      	b.n	8009a9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	885b      	ldrh	r3, [r3, #2]
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b05      	cmp	r3, #5
 80098bc:	f200 80ac 	bhi.w	8009a18 <USBD_GetDescriptor+0x258>
 80098c0:	a201      	add	r2, pc, #4	; (adr r2, 80098c8 <USBD_GetDescriptor+0x108>)
 80098c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c6:	bf00      	nop
 80098c8:	080098e1 	.word	0x080098e1
 80098cc:	08009915 	.word	0x08009915
 80098d0:	08009949 	.word	0x08009949
 80098d4:	0800997d 	.word	0x0800997d
 80098d8:	080099b1 	.word	0x080099b1
 80098dc:	080099e5 	.word	0x080099e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00b      	beq.n	8009904 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	7c12      	ldrb	r2, [r2, #16]
 80098f8:	f107 0108 	add.w	r1, r7, #8
 80098fc:	4610      	mov	r0, r2
 80098fe:	4798      	blx	r3
 8009900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009902:	e091      	b.n	8009a28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 facb 	bl	8009ea2 <USBD_CtlError>
            err++;
 800990c:	7afb      	ldrb	r3, [r7, #11]
 800990e:	3301      	adds	r3, #1
 8009910:	72fb      	strb	r3, [r7, #11]
          break;
 8009912:	e089      	b.n	8009a28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d00b      	beq.n	8009938 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	7c12      	ldrb	r2, [r2, #16]
 800992c:	f107 0108 	add.w	r1, r7, #8
 8009930:	4610      	mov	r0, r2
 8009932:	4798      	blx	r3
 8009934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009936:	e077      	b.n	8009a28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 fab1 	bl	8009ea2 <USBD_CtlError>
            err++;
 8009940:	7afb      	ldrb	r3, [r7, #11]
 8009942:	3301      	adds	r3, #1
 8009944:	72fb      	strb	r3, [r7, #11]
          break;
 8009946:	e06f      	b.n	8009a28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00b      	beq.n	800996c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	7c12      	ldrb	r2, [r2, #16]
 8009960:	f107 0108 	add.w	r1, r7, #8
 8009964:	4610      	mov	r0, r2
 8009966:	4798      	blx	r3
 8009968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800996a:	e05d      	b.n	8009a28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fa97 	bl	8009ea2 <USBD_CtlError>
            err++;
 8009974:	7afb      	ldrb	r3, [r7, #11]
 8009976:	3301      	adds	r3, #1
 8009978:	72fb      	strb	r3, [r7, #11]
          break;
 800997a:	e055      	b.n	8009a28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00b      	beq.n	80099a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	7c12      	ldrb	r2, [r2, #16]
 8009994:	f107 0108 	add.w	r1, r7, #8
 8009998:	4610      	mov	r0, r2
 800999a:	4798      	blx	r3
 800999c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800999e:	e043      	b.n	8009a28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fa7d 	bl	8009ea2 <USBD_CtlError>
            err++;
 80099a8:	7afb      	ldrb	r3, [r7, #11]
 80099aa:	3301      	adds	r3, #1
 80099ac:	72fb      	strb	r3, [r7, #11]
          break;
 80099ae:	e03b      	b.n	8009a28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b6:	695b      	ldr	r3, [r3, #20]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00b      	beq.n	80099d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	7c12      	ldrb	r2, [r2, #16]
 80099c8:	f107 0108 	add.w	r1, r7, #8
 80099cc:	4610      	mov	r0, r2
 80099ce:	4798      	blx	r3
 80099d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099d2:	e029      	b.n	8009a28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fa63 	bl	8009ea2 <USBD_CtlError>
            err++;
 80099dc:	7afb      	ldrb	r3, [r7, #11]
 80099de:	3301      	adds	r3, #1
 80099e0:	72fb      	strb	r3, [r7, #11]
          break;
 80099e2:	e021      	b.n	8009a28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00b      	beq.n	8009a08 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	7c12      	ldrb	r2, [r2, #16]
 80099fc:	f107 0108 	add.w	r1, r7, #8
 8009a00:	4610      	mov	r0, r2
 8009a02:	4798      	blx	r3
 8009a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a06:	e00f      	b.n	8009a28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fa49 	bl	8009ea2 <USBD_CtlError>
            err++;
 8009a10:	7afb      	ldrb	r3, [r7, #11]
 8009a12:	3301      	adds	r3, #1
 8009a14:	72fb      	strb	r3, [r7, #11]
          break;
 8009a16:	e007      	b.n	8009a28 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fa41 	bl	8009ea2 <USBD_CtlError>
          err++;
 8009a20:	7afb      	ldrb	r3, [r7, #11]
 8009a22:	3301      	adds	r3, #1
 8009a24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009a26:	bf00      	nop
      }
      break;
 8009a28:	e037      	b.n	8009a9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	7c1b      	ldrb	r3, [r3, #16]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d109      	bne.n	8009a46 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3a:	f107 0208 	add.w	r2, r7, #8
 8009a3e:	4610      	mov	r0, r2
 8009a40:	4798      	blx	r3
 8009a42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a44:	e029      	b.n	8009a9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fa2a 	bl	8009ea2 <USBD_CtlError>
        err++;
 8009a4e:	7afb      	ldrb	r3, [r7, #11]
 8009a50:	3301      	adds	r3, #1
 8009a52:	72fb      	strb	r3, [r7, #11]
      break;
 8009a54:	e021      	b.n	8009a9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	7c1b      	ldrb	r3, [r3, #16]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10d      	bne.n	8009a7a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a66:	f107 0208 	add.w	r2, r7, #8
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	4798      	blx	r3
 8009a6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3301      	adds	r3, #1
 8009a74:	2207      	movs	r2, #7
 8009a76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a78:	e00f      	b.n	8009a9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fa10 	bl	8009ea2 <USBD_CtlError>
        err++;
 8009a82:	7afb      	ldrb	r3, [r7, #11]
 8009a84:	3301      	adds	r3, #1
 8009a86:	72fb      	strb	r3, [r7, #11]
      break;
 8009a88:	e007      	b.n	8009a9a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fa08 	bl	8009ea2 <USBD_CtlError>
      err++;
 8009a92:	7afb      	ldrb	r3, [r7, #11]
 8009a94:	3301      	adds	r3, #1
 8009a96:	72fb      	strb	r3, [r7, #11]
      break;
 8009a98:	bf00      	nop
  }

  if (err != 0U)
 8009a9a:	7afb      	ldrb	r3, [r7, #11]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d11e      	bne.n	8009ade <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	88db      	ldrh	r3, [r3, #6]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d016      	beq.n	8009ad6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009aa8:	893b      	ldrh	r3, [r7, #8]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00e      	beq.n	8009acc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	88da      	ldrh	r2, [r3, #6]
 8009ab2:	893b      	ldrh	r3, [r7, #8]
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	bf28      	it	cs
 8009ab8:	4613      	movcs	r3, r2
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009abe:	893b      	ldrh	r3, [r7, #8]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	68f9      	ldr	r1, [r7, #12]
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 fa5d 	bl	8009f84 <USBD_CtlSendData>
 8009aca:	e009      	b.n	8009ae0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f9e7 	bl	8009ea2 <USBD_CtlError>
 8009ad4:	e004      	b.n	8009ae0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 faae 	bl	800a038 <USBD_CtlSendStatus>
 8009adc:	e000      	b.n	8009ae0 <USBD_GetDescriptor+0x320>
    return;
 8009ade:	bf00      	nop
  }
}
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop

08009ae8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	889b      	ldrh	r3, [r3, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d131      	bne.n	8009b5e <USBD_SetAddress+0x76>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	88db      	ldrh	r3, [r3, #6]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d12d      	bne.n	8009b5e <USBD_SetAddress+0x76>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	885b      	ldrh	r3, [r3, #2]
 8009b06:	2b7f      	cmp	r3, #127	; 0x7f
 8009b08:	d829      	bhi.n	8009b5e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	885b      	ldrh	r3, [r3, #2]
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d104      	bne.n	8009b2c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f9bc 	bl	8009ea2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b2a:	e01d      	b.n	8009b68 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	7bfa      	ldrb	r2, [r7, #15]
 8009b30:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 ff45 	bl	800a9c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fa7a 	bl	800a038 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d004      	beq.n	8009b54 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b52:	e009      	b.n	8009b68 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b5c:	e004      	b.n	8009b68 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f99e 	bl	8009ea2 <USBD_CtlError>
  }
}
 8009b66:	bf00      	nop
 8009b68:	bf00      	nop
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b084      	sub	sp, #16
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	885b      	ldrh	r3, [r3, #2]
 8009b82:	b2da      	uxtb	r2, r3
 8009b84:	4b4e      	ldr	r3, [pc, #312]	; (8009cc0 <USBD_SetConfig+0x150>)
 8009b86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b88:	4b4d      	ldr	r3, [pc, #308]	; (8009cc0 <USBD_SetConfig+0x150>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d905      	bls.n	8009b9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f985 	bl	8009ea2 <USBD_CtlError>
    return USBD_FAIL;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e08c      	b.n	8009cb6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d002      	beq.n	8009bae <USBD_SetConfig+0x3e>
 8009ba8:	2b03      	cmp	r3, #3
 8009baa:	d029      	beq.n	8009c00 <USBD_SetConfig+0x90>
 8009bac:	e075      	b.n	8009c9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009bae:	4b44      	ldr	r3, [pc, #272]	; (8009cc0 <USBD_SetConfig+0x150>)
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d020      	beq.n	8009bf8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009bb6:	4b42      	ldr	r3, [pc, #264]	; (8009cc0 <USBD_SetConfig+0x150>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bc0:	4b3f      	ldr	r3, [pc, #252]	; (8009cc0 <USBD_SetConfig+0x150>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7fe ffbd 	bl	8008b46 <USBD_SetClassConfig>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009bd0:	7bfb      	ldrb	r3, [r7, #15]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d008      	beq.n	8009be8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f962 	bl	8009ea2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2202      	movs	r2, #2
 8009be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009be6:	e065      	b.n	8009cb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fa25 	bl	800a038 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2203      	movs	r2, #3
 8009bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009bf6:	e05d      	b.n	8009cb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fa1d 	bl	800a038 <USBD_CtlSendStatus>
      break;
 8009bfe:	e059      	b.n	8009cb4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c00:	4b2f      	ldr	r3, [pc, #188]	; (8009cc0 <USBD_SetConfig+0x150>)
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d112      	bne.n	8009c2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009c10:	4b2b      	ldr	r3, [pc, #172]	; (8009cc0 <USBD_SetConfig+0x150>)
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	461a      	mov	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c1a:	4b29      	ldr	r3, [pc, #164]	; (8009cc0 <USBD_SetConfig+0x150>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7fe ffac 	bl	8008b7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fa06 	bl	800a038 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c2c:	e042      	b.n	8009cb4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009c2e:	4b24      	ldr	r3, [pc, #144]	; (8009cc0 <USBD_SetConfig+0x150>)
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d02a      	beq.n	8009c92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7fe ff9a 	bl	8008b7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009c4a:	4b1d      	ldr	r3, [pc, #116]	; (8009cc0 <USBD_SetConfig+0x150>)
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c54:	4b1a      	ldr	r3, [pc, #104]	; (8009cc0 <USBD_SetConfig+0x150>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7fe ff73 	bl	8008b46 <USBD_SetClassConfig>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00f      	beq.n	8009c8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009c6a:	6839      	ldr	r1, [r7, #0]
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f918 	bl	8009ea2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7fe ff7f 	bl	8008b7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2202      	movs	r2, #2
 8009c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c88:	e014      	b.n	8009cb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f9d4 	bl	800a038 <USBD_CtlSendStatus>
      break;
 8009c90:	e010      	b.n	8009cb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f9d0 	bl	800a038 <USBD_CtlSendStatus>
      break;
 8009c98:	e00c      	b.n	8009cb4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f900 	bl	8009ea2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ca2:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <USBD_SetConfig+0x150>)
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7fe ff68 	bl	8008b7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8009cb2:	bf00      	nop
  }

  return ret;
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000328 	.word	0x20000328

08009cc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	88db      	ldrh	r3, [r3, #6]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d004      	beq.n	8009ce0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f8e2 	bl	8009ea2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009cde:	e023      	b.n	8009d28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	dc02      	bgt.n	8009cf2 <USBD_GetConfig+0x2e>
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dc03      	bgt.n	8009cf8 <USBD_GetConfig+0x34>
 8009cf0:	e015      	b.n	8009d1e <USBD_GetConfig+0x5a>
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d00b      	beq.n	8009d0e <USBD_GetConfig+0x4a>
 8009cf6:	e012      	b.n	8009d1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	3308      	adds	r3, #8
 8009d02:	2201      	movs	r2, #1
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f93c 	bl	8009f84 <USBD_CtlSendData>
        break;
 8009d0c:	e00c      	b.n	8009d28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	3304      	adds	r3, #4
 8009d12:	2201      	movs	r2, #1
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f934 	bl	8009f84 <USBD_CtlSendData>
        break;
 8009d1c:	e004      	b.n	8009d28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f8be 	bl	8009ea2 <USBD_CtlError>
        break;
 8009d26:	bf00      	nop
}
 8009d28:	bf00      	nop
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	3b01      	subs	r3, #1
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d81e      	bhi.n	8009d86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	88db      	ldrh	r3, [r3, #6]
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d004      	beq.n	8009d5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f8a5 	bl	8009ea2 <USBD_CtlError>
        break;
 8009d58:	e01a      	b.n	8009d90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d005      	beq.n	8009d76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	f043 0202 	orr.w	r2, r3, #2
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	330c      	adds	r3, #12
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f900 	bl	8009f84 <USBD_CtlSendData>
      break;
 8009d84:	e004      	b.n	8009d90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f88a 	bl	8009ea2 <USBD_CtlError>
      break;
 8009d8e:	bf00      	nop
  }
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	885b      	ldrh	r3, [r3, #2]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d107      	bne.n	8009dba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f940 	bl	800a038 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009db8:	e013      	b.n	8009de2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	885b      	ldrh	r3, [r3, #2]
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d10b      	bne.n	8009dda <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	889b      	ldrh	r3, [r3, #4]
 8009dc6:	0a1b      	lsrs	r3, r3, #8
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f930 	bl	800a038 <USBD_CtlSendStatus>
}
 8009dd8:	e003      	b.n	8009de2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f860 	bl	8009ea2 <USBD_CtlError>
}
 8009de2:	bf00      	nop
 8009de4:	3708      	adds	r7, #8
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b082      	sub	sp, #8
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d80b      	bhi.n	8009e1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	885b      	ldrh	r3, [r3, #2]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d10c      	bne.n	8009e24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f910 	bl	800a038 <USBD_CtlSendStatus>
      }
      break;
 8009e18:	e004      	b.n	8009e24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f840 	bl	8009ea2 <USBD_CtlError>
      break;
 8009e22:	e000      	b.n	8009e26 <USBD_ClrFeature+0x3c>
      break;
 8009e24:	bf00      	nop
  }
}
 8009e26:	bf00      	nop
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	781a      	ldrb	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	3301      	adds	r3, #1
 8009e48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	781a      	ldrb	r2, [r3, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3301      	adds	r3, #1
 8009e56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f7ff fa17 	bl	800928c <SWAPBYTE>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	461a      	mov	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f7ff fa0a 	bl	800928c <SWAPBYTE>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	3301      	adds	r3, #1
 8009e84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f7ff f9fd 	bl	800928c <SWAPBYTE>
 8009e92:	4603      	mov	r3, r0
 8009e94:	461a      	mov	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	80da      	strh	r2, [r3, #6]
}
 8009e9a:	bf00      	nop
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b082      	sub	sp, #8
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009eac:	2180      	movs	r1, #128	; 0x80
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fd20 	bl	800a8f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fd1c 	bl	800a8f4 <USBD_LL_StallEP>
}
 8009ebc:	bf00      	nop
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d036      	beq.n	8009f48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009ede:	6938      	ldr	r0, [r7, #16]
 8009ee0:	f000 f836 	bl	8009f50 <USBD_GetLen>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	005b      	lsls	r3, r3, #1
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	7812      	ldrb	r2, [r2, #0]
 8009efc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009efe:	7dfb      	ldrb	r3, [r7, #23]
 8009f00:	3301      	adds	r3, #1
 8009f02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f04:	7dfb      	ldrb	r3, [r7, #23]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	4413      	add	r3, r2
 8009f0a:	2203      	movs	r2, #3
 8009f0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
 8009f10:	3301      	adds	r3, #1
 8009f12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f14:	e013      	b.n	8009f3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	7812      	ldrb	r2, [r2, #0]
 8009f20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	3301      	adds	r3, #1
 8009f26:	613b      	str	r3, [r7, #16]
    idx++;
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	4413      	add	r3, r2
 8009f34:	2200      	movs	r2, #0
 8009f36:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f38:	7dfb      	ldrb	r3, [r7, #23]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e7      	bne.n	8009f16 <USBD_GetString+0x52>
 8009f46:	e000      	b.n	8009f4a <USBD_GetString+0x86>
    return;
 8009f48:	bf00      	nop
  }
}
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009f60:	e005      	b.n	8009f6e <USBD_GetLen+0x1e>
  {
    len++;
 8009f62:	7bfb      	ldrb	r3, [r7, #15]
 8009f64:	3301      	adds	r3, #1
 8009f66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1f5      	bne.n	8009f62 <USBD_GetLen+0x12>
  }

  return len;
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2202      	movs	r2, #2
 8009f94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	2100      	movs	r1, #0
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f000 fd2b 	bl	800aa06 <USBD_LL_Transmit>

  return USBD_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	60f8      	str	r0, [r7, #12]
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	2100      	movs	r1, #0
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f000 fd1a 	bl	800aa06 <USBD_LL_Transmit>

  return USBD_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2203      	movs	r2, #3
 8009fec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	2100      	movs	r1, #0
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 fd1e 	bl	800aa48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b084      	sub	sp, #16
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	60f8      	str	r0, [r7, #12]
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	2100      	movs	r1, #0
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f000 fd0d 	bl	800aa48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2204      	movs	r2, #4
 800a044:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a048:	2300      	movs	r3, #0
 800a04a:	2200      	movs	r2, #0
 800a04c:	2100      	movs	r1, #0
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fcd9 	bl	800aa06 <USBD_LL_Transmit>

  return USBD_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b082      	sub	sp, #8
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2205      	movs	r2, #5
 800a06a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a06e:	2300      	movs	r3, #0
 800a070:	2200      	movs	r2, #0
 800a072:	2100      	movs	r1, #0
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fce7 	bl	800aa48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a088:	2200      	movs	r2, #0
 800a08a:	4912      	ldr	r1, [pc, #72]	; (800a0d4 <MX_USB_DEVICE_Init+0x50>)
 800a08c:	4812      	ldr	r0, [pc, #72]	; (800a0d8 <MX_USB_DEVICE_Init+0x54>)
 800a08e:	f7fe fcdd 	bl	8008a4c <USBD_Init>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a098:	f7f6 fe72 	bl	8000d80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a09c:	490f      	ldr	r1, [pc, #60]	; (800a0dc <MX_USB_DEVICE_Init+0x58>)
 800a09e:	480e      	ldr	r0, [pc, #56]	; (800a0d8 <MX_USB_DEVICE_Init+0x54>)
 800a0a0:	f7fe fd04 	bl	8008aac <USBD_RegisterClass>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a0aa:	f7f6 fe69 	bl	8000d80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a0ae:	490c      	ldr	r1, [pc, #48]	; (800a0e0 <MX_USB_DEVICE_Init+0x5c>)
 800a0b0:	4809      	ldr	r0, [pc, #36]	; (800a0d8 <MX_USB_DEVICE_Init+0x54>)
 800a0b2:	f7fe fbfb 	bl	80088ac <USBD_CDC_RegisterInterface>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d001      	beq.n	800a0c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a0bc:	f7f6 fe60 	bl	8000d80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a0c0:	4805      	ldr	r0, [pc, #20]	; (800a0d8 <MX_USB_DEVICE_Init+0x54>)
 800a0c2:	f7fe fd29 	bl	8008b18 <USBD_Start>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a0cc:	f7f6 fe58 	bl	8000d80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a0d0:	bf00      	nop
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	200000ac 	.word	0x200000ac
 800a0d8:	2000032c 	.word	0x2000032c
 800a0dc:	20000018 	.word	0x20000018
 800a0e0:	20000098 	.word	0x20000098

0800a0e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	4905      	ldr	r1, [pc, #20]	; (800a100 <CDC_Init_FS+0x1c>)
 800a0ec:	4805      	ldr	r0, [pc, #20]	; (800a104 <CDC_Init_FS+0x20>)
 800a0ee:	f7fe fbf7 	bl	80088e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a0f2:	4905      	ldr	r1, [pc, #20]	; (800a108 <CDC_Init_FS+0x24>)
 800a0f4:	4803      	ldr	r0, [pc, #12]	; (800a104 <CDC_Init_FS+0x20>)
 800a0f6:	f7fe fc15 	bl	8008924 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a0fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	20000e08 	.word	0x20000e08
 800a104:	2000032c 	.word	0x2000032c
 800a108:	20000608 	.word	0x20000608

0800a10c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a10c:	b480      	push	{r7}
 800a10e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a110:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a112:	4618      	mov	r0, r3
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	4603      	mov	r3, r0
 800a124:	6039      	str	r1, [r7, #0]
 800a126:	71fb      	strb	r3, [r7, #7]
 800a128:	4613      	mov	r3, r2
 800a12a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a12c:	79fb      	ldrb	r3, [r7, #7]
 800a12e:	2b23      	cmp	r3, #35	; 0x23
 800a130:	d84a      	bhi.n	800a1c8 <CDC_Control_FS+0xac>
 800a132:	a201      	add	r2, pc, #4	; (adr r2, 800a138 <CDC_Control_FS+0x1c>)
 800a134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a138:	0800a1c9 	.word	0x0800a1c9
 800a13c:	0800a1c9 	.word	0x0800a1c9
 800a140:	0800a1c9 	.word	0x0800a1c9
 800a144:	0800a1c9 	.word	0x0800a1c9
 800a148:	0800a1c9 	.word	0x0800a1c9
 800a14c:	0800a1c9 	.word	0x0800a1c9
 800a150:	0800a1c9 	.word	0x0800a1c9
 800a154:	0800a1c9 	.word	0x0800a1c9
 800a158:	0800a1c9 	.word	0x0800a1c9
 800a15c:	0800a1c9 	.word	0x0800a1c9
 800a160:	0800a1c9 	.word	0x0800a1c9
 800a164:	0800a1c9 	.word	0x0800a1c9
 800a168:	0800a1c9 	.word	0x0800a1c9
 800a16c:	0800a1c9 	.word	0x0800a1c9
 800a170:	0800a1c9 	.word	0x0800a1c9
 800a174:	0800a1c9 	.word	0x0800a1c9
 800a178:	0800a1c9 	.word	0x0800a1c9
 800a17c:	0800a1c9 	.word	0x0800a1c9
 800a180:	0800a1c9 	.word	0x0800a1c9
 800a184:	0800a1c9 	.word	0x0800a1c9
 800a188:	0800a1c9 	.word	0x0800a1c9
 800a18c:	0800a1c9 	.word	0x0800a1c9
 800a190:	0800a1c9 	.word	0x0800a1c9
 800a194:	0800a1c9 	.word	0x0800a1c9
 800a198:	0800a1c9 	.word	0x0800a1c9
 800a19c:	0800a1c9 	.word	0x0800a1c9
 800a1a0:	0800a1c9 	.word	0x0800a1c9
 800a1a4:	0800a1c9 	.word	0x0800a1c9
 800a1a8:	0800a1c9 	.word	0x0800a1c9
 800a1ac:	0800a1c9 	.word	0x0800a1c9
 800a1b0:	0800a1c9 	.word	0x0800a1c9
 800a1b4:	0800a1c9 	.word	0x0800a1c9
 800a1b8:	0800a1c9 	.word	0x0800a1c9
 800a1bc:	0800a1c9 	.word	0x0800a1c9
 800a1c0:	0800a1c9 	.word	0x0800a1c9
 800a1c4:	0800a1c9 	.word	0x0800a1c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a1c8:	bf00      	nop
  }

  return (USBD_OK);
 800a1ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	4805      	ldr	r0, [pc, #20]	; (800a1fc <CDC_Receive_FS+0x24>)
 800a1e6:	f7fe fb9d 	bl	8008924 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a1ea:	4804      	ldr	r0, [pc, #16]	; (800a1fc <CDC_Receive_FS+0x24>)
 800a1ec:	f7fe fbf8 	bl	80089e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a1f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	2000032c 	.word	0x2000032c

0800a200 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a210:	4b0d      	ldr	r3, [pc, #52]	; (800a248 <CDC_Transmit_FS+0x48>)
 800a212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a216:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a222:	2301      	movs	r3, #1
 800a224:	e00b      	b.n	800a23e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a226:	887b      	ldrh	r3, [r7, #2]
 800a228:	461a      	mov	r2, r3
 800a22a:	6879      	ldr	r1, [r7, #4]
 800a22c:	4806      	ldr	r0, [pc, #24]	; (800a248 <CDC_Transmit_FS+0x48>)
 800a22e:	f7fe fb57 	bl	80088e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a232:	4805      	ldr	r0, [pc, #20]	; (800a248 <CDC_Transmit_FS+0x48>)
 800a234:	f7fe fb94 	bl	8008960 <USBD_CDC_TransmitPacket>
 800a238:	4603      	mov	r3, r0
 800a23a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	2000032c 	.word	0x2000032c

0800a24c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	4613      	mov	r3, r2
 800a258:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a25e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a262:	4618      	mov	r0, r3
 800a264:	371c      	adds	r7, #28
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
	...

0800a270 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	6039      	str	r1, [r7, #0]
 800a27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2212      	movs	r2, #18
 800a280:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a282:	4b03      	ldr	r3, [pc, #12]	; (800a290 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	200000cc 	.word	0x200000cc

0800a294 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	6039      	str	r1, [r7, #0]
 800a29e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	2204      	movs	r2, #4
 800a2a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2a6:	4b03      	ldr	r3, [pc, #12]	; (800a2b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	200000ec 	.word	0x200000ec

0800a2b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	6039      	str	r1, [r7, #0]
 800a2c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2c4:	79fb      	ldrb	r3, [r7, #7]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d105      	bne.n	800a2d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	4907      	ldr	r1, [pc, #28]	; (800a2ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a2ce:	4808      	ldr	r0, [pc, #32]	; (800a2f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2d0:	f7ff fdf8 	bl	8009ec4 <USBD_GetString>
 800a2d4:	e004      	b.n	800a2e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	4904      	ldr	r1, [pc, #16]	; (800a2ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a2da:	4805      	ldr	r0, [pc, #20]	; (800a2f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a2dc:	f7ff fdf2 	bl	8009ec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2e0:	4b02      	ldr	r3, [pc, #8]	; (800a2ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20001608 	.word	0x20001608
 800a2f0:	0800b53c 	.word	0x0800b53c

0800a2f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	6039      	str	r1, [r7, #0]
 800a2fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	4904      	ldr	r1, [pc, #16]	; (800a314 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a304:	4804      	ldr	r0, [pc, #16]	; (800a318 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a306:	f7ff fddd 	bl	8009ec4 <USBD_GetString>
  return USBD_StrDesc;
 800a30a:	4b02      	ldr	r3, [pc, #8]	; (800a314 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	20001608 	.word	0x20001608
 800a318:	0800b554 	.word	0x0800b554

0800a31c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	4603      	mov	r3, r0
 800a324:	6039      	str	r1, [r7, #0]
 800a326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	221a      	movs	r2, #26
 800a32c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a32e:	f000 f855 	bl	800a3dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a332:	4b02      	ldr	r3, [pc, #8]	; (800a33c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	200000f0 	.word	0x200000f0

0800a340 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	4603      	mov	r3, r0
 800a348:	6039      	str	r1, [r7, #0]
 800a34a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a34c:	79fb      	ldrb	r3, [r7, #7]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d105      	bne.n	800a35e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	4907      	ldr	r1, [pc, #28]	; (800a374 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a356:	4808      	ldr	r0, [pc, #32]	; (800a378 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a358:	f7ff fdb4 	bl	8009ec4 <USBD_GetString>
 800a35c:	e004      	b.n	800a368 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	4904      	ldr	r1, [pc, #16]	; (800a374 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a362:	4805      	ldr	r0, [pc, #20]	; (800a378 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a364:	f7ff fdae 	bl	8009ec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a368:	4b02      	ldr	r3, [pc, #8]	; (800a374 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3708      	adds	r7, #8
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20001608 	.word	0x20001608
 800a378:	0800b568 	.word	0x0800b568

0800a37c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	6039      	str	r1, [r7, #0]
 800a386:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d105      	bne.n	800a39a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	4907      	ldr	r1, [pc, #28]	; (800a3b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a392:	4808      	ldr	r0, [pc, #32]	; (800a3b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a394:	f7ff fd96 	bl	8009ec4 <USBD_GetString>
 800a398:	e004      	b.n	800a3a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	4904      	ldr	r1, [pc, #16]	; (800a3b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a39e:	4805      	ldr	r0, [pc, #20]	; (800a3b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3a0:	f7ff fd90 	bl	8009ec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3a4:	4b02      	ldr	r3, [pc, #8]	; (800a3b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20001608 	.word	0x20001608
 800a3b4:	0800b574 	.word	0x0800b574

0800a3b8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	6039      	str	r1, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	220c      	movs	r2, #12
 800a3c8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a3ca:	4b03      	ldr	r3, [pc, #12]	; (800a3d8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	200000e0 	.word	0x200000e0

0800a3dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a3e2:	4b0f      	ldr	r3, [pc, #60]	; (800a420 <Get_SerialNum+0x44>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a3e8:	4b0e      	ldr	r3, [pc, #56]	; (800a424 <Get_SerialNum+0x48>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3ee:	4b0e      	ldr	r3, [pc, #56]	; (800a428 <Get_SerialNum+0x4c>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d009      	beq.n	800a416 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a402:	2208      	movs	r2, #8
 800a404:	4909      	ldr	r1, [pc, #36]	; (800a42c <Get_SerialNum+0x50>)
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f000 f814 	bl	800a434 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a40c:	2204      	movs	r2, #4
 800a40e:	4908      	ldr	r1, [pc, #32]	; (800a430 <Get_SerialNum+0x54>)
 800a410:	68b8      	ldr	r0, [r7, #8]
 800a412:	f000 f80f 	bl	800a434 <IntToUnicode>
  }
}
 800a416:	bf00      	nop
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	1ff0f420 	.word	0x1ff0f420
 800a424:	1ff0f424 	.word	0x1ff0f424
 800a428:	1ff0f428 	.word	0x1ff0f428
 800a42c:	200000f2 	.word	0x200000f2
 800a430:	20000102 	.word	0x20000102

0800a434 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a446:	2300      	movs	r3, #0
 800a448:	75fb      	strb	r3, [r7, #23]
 800a44a:	e027      	b.n	800a49c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	0f1b      	lsrs	r3, r3, #28
 800a450:	2b09      	cmp	r3, #9
 800a452:	d80b      	bhi.n	800a46c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	0f1b      	lsrs	r3, r3, #28
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	005b      	lsls	r3, r3, #1
 800a45e:	4619      	mov	r1, r3
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	440b      	add	r3, r1
 800a464:	3230      	adds	r2, #48	; 0x30
 800a466:	b2d2      	uxtb	r2, r2
 800a468:	701a      	strb	r2, [r3, #0]
 800a46a:	e00a      	b.n	800a482 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	0f1b      	lsrs	r3, r3, #28
 800a470:	b2da      	uxtb	r2, r3
 800a472:	7dfb      	ldrb	r3, [r7, #23]
 800a474:	005b      	lsls	r3, r3, #1
 800a476:	4619      	mov	r1, r3
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	440b      	add	r3, r1
 800a47c:	3237      	adds	r2, #55	; 0x37
 800a47e:	b2d2      	uxtb	r2, r2
 800a480:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	011b      	lsls	r3, r3, #4
 800a486:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a488:	7dfb      	ldrb	r3, [r7, #23]
 800a48a:	005b      	lsls	r3, r3, #1
 800a48c:	3301      	adds	r3, #1
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	4413      	add	r3, r2
 800a492:	2200      	movs	r2, #0
 800a494:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a496:	7dfb      	ldrb	r3, [r7, #23]
 800a498:	3301      	adds	r3, #1
 800a49a:	75fb      	strb	r3, [r7, #23]
 800a49c:	7dfa      	ldrb	r2, [r7, #23]
 800a49e:	79fb      	ldrb	r3, [r7, #7]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d3d3      	bcc.n	800a44c <IntToUnicode+0x18>
  }
}
 800a4a4:	bf00      	nop
 800a4a6:	bf00      	nop
 800a4a8:	371c      	adds	r7, #28
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
	...

0800a4b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b0ac      	sub	sp, #176	; 0xb0
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]
 800a4c4:	605a      	str	r2, [r3, #4]
 800a4c6:	609a      	str	r2, [r3, #8]
 800a4c8:	60da      	str	r2, [r3, #12]
 800a4ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a4cc:	f107 0318 	add.w	r3, r7, #24
 800a4d0:	2284      	movs	r2, #132	; 0x84
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 fc47 	bl	800ad68 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4e2:	d161      	bne.n	800a5a8 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a4e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a4e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a4f0:	f107 0318 	add.w	r3, r7, #24
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fa fda9 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a500:	f7f6 fc3e 	bl	8000d80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a504:	4b2a      	ldr	r3, [pc, #168]	; (800a5b0 <HAL_PCD_MspInit+0xfc>)
 800a506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a508:	4a29      	ldr	r2, [pc, #164]	; (800a5b0 <HAL_PCD_MspInit+0xfc>)
 800a50a:	f043 0301 	orr.w	r3, r3, #1
 800a50e:	6313      	str	r3, [r2, #48]	; 0x30
 800a510:	4b27      	ldr	r3, [pc, #156]	; (800a5b0 <HAL_PCD_MspInit+0xfc>)
 800a512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	617b      	str	r3, [r7, #20]
 800a51a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a51c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a520:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a524:	2302      	movs	r3, #2
 800a526:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a52a:	2300      	movs	r3, #0
 800a52c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a530:	2303      	movs	r3, #3
 800a532:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a536:	230a      	movs	r3, #10
 800a538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a53c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a540:	4619      	mov	r1, r3
 800a542:	481c      	ldr	r0, [pc, #112]	; (800a5b4 <HAL_PCD_MspInit+0x100>)
 800a544:	f7f7 fb98 	bl	8001c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a54c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a550:	2300      	movs	r3, #0
 800a552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a556:	2300      	movs	r3, #0
 800a558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a55c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a560:	4619      	mov	r1, r3
 800a562:	4814      	ldr	r0, [pc, #80]	; (800a5b4 <HAL_PCD_MspInit+0x100>)
 800a564:	f7f7 fb88 	bl	8001c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a568:	4b11      	ldr	r3, [pc, #68]	; (800a5b0 <HAL_PCD_MspInit+0xfc>)
 800a56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56c:	4a10      	ldr	r2, [pc, #64]	; (800a5b0 <HAL_PCD_MspInit+0xfc>)
 800a56e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a572:	6353      	str	r3, [r2, #52]	; 0x34
 800a574:	4b0e      	ldr	r3, [pc, #56]	; (800a5b0 <HAL_PCD_MspInit+0xfc>)
 800a576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a57c:	613b      	str	r3, [r7, #16]
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	4b0b      	ldr	r3, [pc, #44]	; (800a5b0 <HAL_PCD_MspInit+0xfc>)
 800a582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a584:	4a0a      	ldr	r2, [pc, #40]	; (800a5b0 <HAL_PCD_MspInit+0xfc>)
 800a586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a58a:	6453      	str	r3, [r2, #68]	; 0x44
 800a58c:	4b08      	ldr	r3, [pc, #32]	; (800a5b0 <HAL_PCD_MspInit+0xfc>)
 800a58e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a594:	60fb      	str	r3, [r7, #12]
 800a596:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a598:	2200      	movs	r2, #0
 800a59a:	2100      	movs	r1, #0
 800a59c:	2043      	movs	r0, #67	; 0x43
 800a59e:	f7f7 f84a 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a5a2:	2043      	movs	r0, #67	; 0x43
 800a5a4:	f7f7 f863 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a5a8:	bf00      	nop
 800a5aa:	37b0      	adds	r7, #176	; 0xb0
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	40023800 	.word	0x40023800
 800a5b4:	40020000 	.word	0x40020000

0800a5b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	f7fe faef 	bl	8008bb2 <USBD_LL_SetupStage>
}
 800a5d4:	bf00      	nop
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800a5ee:	78fa      	ldrb	r2, [r7, #3]
 800a5f0:	6879      	ldr	r1, [r7, #4]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	00db      	lsls	r3, r3, #3
 800a5f6:	4413      	add	r3, r2
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	440b      	add	r3, r1
 800a5fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	78fb      	ldrb	r3, [r7, #3]
 800a604:	4619      	mov	r1, r3
 800a606:	f7fe fb29 	bl	8008c5c <USBD_LL_DataOutStage>
}
 800a60a:	bf00      	nop
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b082      	sub	sp, #8
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	460b      	mov	r3, r1
 800a61c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800a624:	78fa      	ldrb	r2, [r7, #3]
 800a626:	6879      	ldr	r1, [r7, #4]
 800a628:	4613      	mov	r3, r2
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	4413      	add	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	440b      	add	r3, r1
 800a632:	334c      	adds	r3, #76	; 0x4c
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	78fb      	ldrb	r3, [r7, #3]
 800a638:	4619      	mov	r1, r3
 800a63a:	f7fe fbc2 	bl	8008dc2 <USBD_LL_DataInStage>
}
 800a63e:	bf00      	nop
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b082      	sub	sp, #8
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a654:	4618      	mov	r0, r3
 800a656:	f7fe fcf6 	bl	8009046 <USBD_LL_SOF>
}
 800a65a:	bf00      	nop
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a66a:	2301      	movs	r3, #1
 800a66c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d102      	bne.n	800a67c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a676:	2300      	movs	r3, #0
 800a678:	73fb      	strb	r3, [r7, #15]
 800a67a:	e008      	b.n	800a68e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	2b02      	cmp	r3, #2
 800a682:	d102      	bne.n	800a68a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a684:	2301      	movs	r3, #1
 800a686:	73fb      	strb	r3, [r7, #15]
 800a688:	e001      	b.n	800a68e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a68a:	f7f6 fb79 	bl	8000d80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a694:	7bfa      	ldrb	r2, [r7, #15]
 800a696:	4611      	mov	r1, r2
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fe fc96 	bl	8008fca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fe fc3e 	bl	8008f26 <USBD_LL_Reset>
}
 800a6aa:	bf00      	nop
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
	...

0800a6b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fe fc91 	bl	8008fea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	6812      	ldr	r2, [r2, #0]
 800a6d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a6da:	f043 0301 	orr.w	r3, r3, #1
 800a6de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d005      	beq.n	800a6f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6e8:	4b04      	ldr	r3, [pc, #16]	; (800a6fc <HAL_PCD_SuspendCallback+0x48>)
 800a6ea:	691b      	ldr	r3, [r3, #16]
 800a6ec:	4a03      	ldr	r2, [pc, #12]	; (800a6fc <HAL_PCD_SuspendCallback+0x48>)
 800a6ee:	f043 0306 	orr.w	r3, r3, #6
 800a6f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a6f4:	bf00      	nop
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	e000ed00 	.word	0xe000ed00

0800a700 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fe fc81 	bl	8009016 <USBD_LL_Resume>
}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a72e:	78fa      	ldrb	r2, [r7, #3]
 800a730:	4611      	mov	r1, r2
 800a732:	4618      	mov	r0, r3
 800a734:	f7fe fcd9 	bl	80090ea <USBD_LL_IsoOUTIncomplete>
}
 800a738:	bf00      	nop
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a752:	78fa      	ldrb	r2, [r7, #3]
 800a754:	4611      	mov	r1, r2
 800a756:	4618      	mov	r0, r3
 800a758:	f7fe fc95 	bl	8009086 <USBD_LL_IsoINIncomplete>
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a772:	4618      	mov	r0, r3
 800a774:	f7fe fceb 	bl	800914e <USBD_LL_DevConnected>
}
 800a778:	bf00      	nop
 800a77a:	3708      	adds	r7, #8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe fce8 	bl	8009164 <USBD_LL_DevDisconnected>
}
 800a794:	bf00      	nop
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d13c      	bne.n	800a826 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a7ac:	4a20      	ldr	r2, [pc, #128]	; (800a830 <USBD_LL_Init+0x94>)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a1e      	ldr	r2, [pc, #120]	; (800a830 <USBD_LL_Init+0x94>)
 800a7b8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a7bc:	4b1c      	ldr	r3, [pc, #112]	; (800a830 <USBD_LL_Init+0x94>)
 800a7be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a7c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a7c4:	4b1a      	ldr	r3, [pc, #104]	; (800a830 <USBD_LL_Init+0x94>)
 800a7c6:	2206      	movs	r2, #6
 800a7c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a7ca:	4b19      	ldr	r3, [pc, #100]	; (800a830 <USBD_LL_Init+0x94>)
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a7d0:	4b17      	ldr	r3, [pc, #92]	; (800a830 <USBD_LL_Init+0x94>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a7d6:	4b16      	ldr	r3, [pc, #88]	; (800a830 <USBD_LL_Init+0x94>)
 800a7d8:	2202      	movs	r2, #2
 800a7da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a7dc:	4b14      	ldr	r3, [pc, #80]	; (800a830 <USBD_LL_Init+0x94>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a7e2:	4b13      	ldr	r3, [pc, #76]	; (800a830 <USBD_LL_Init+0x94>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a7e8:	4b11      	ldr	r3, [pc, #68]	; (800a830 <USBD_LL_Init+0x94>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a7ee:	4b10      	ldr	r3, [pc, #64]	; (800a830 <USBD_LL_Init+0x94>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a7f4:	4b0e      	ldr	r3, [pc, #56]	; (800a830 <USBD_LL_Init+0x94>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a7fa:	480d      	ldr	r0, [pc, #52]	; (800a830 <USBD_LL_Init+0x94>)
 800a7fc:	f7f8 fc93 	bl	8003126 <HAL_PCD_Init>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d001      	beq.n	800a80a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a806:	f7f6 fabb 	bl	8000d80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a80a:	2180      	movs	r1, #128	; 0x80
 800a80c:	4808      	ldr	r0, [pc, #32]	; (800a830 <USBD_LL_Init+0x94>)
 800a80e:	f7f9 ff0e 	bl	800462e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a812:	2240      	movs	r2, #64	; 0x40
 800a814:	2100      	movs	r1, #0
 800a816:	4806      	ldr	r0, [pc, #24]	; (800a830 <USBD_LL_Init+0x94>)
 800a818:	f7f9 fec2 	bl	80045a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a81c:	2280      	movs	r2, #128	; 0x80
 800a81e:	2101      	movs	r1, #1
 800a820:	4803      	ldr	r0, [pc, #12]	; (800a830 <USBD_LL_Init+0x94>)
 800a822:	f7f9 febd 	bl	80045a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	20001808 	.word	0x20001808

0800a834 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7f8 fd8f 	bl	800336e <HAL_PCD_Start>
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a854:	7bfb      	ldrb	r3, [r7, #15]
 800a856:	4618      	mov	r0, r3
 800a858:	f000 f97e 	bl	800ab58 <USBD_Get_USB_Status>
 800a85c:	4603      	mov	r3, r0
 800a85e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a860:	7bbb      	ldrb	r3, [r7, #14]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b084      	sub	sp, #16
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	4608      	mov	r0, r1
 800a874:	4611      	mov	r1, r2
 800a876:	461a      	mov	r2, r3
 800a878:	4603      	mov	r3, r0
 800a87a:	70fb      	strb	r3, [r7, #3]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70bb      	strb	r3, [r7, #2]
 800a880:	4613      	mov	r3, r2
 800a882:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a892:	78bb      	ldrb	r3, [r7, #2]
 800a894:	883a      	ldrh	r2, [r7, #0]
 800a896:	78f9      	ldrb	r1, [r7, #3]
 800a898:	f7f9 fa7c 	bl	8003d94 <HAL_PCD_EP_Open>
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 f958 	bl	800ab58 <USBD_Get_USB_Status>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8d0:	78fa      	ldrb	r2, [r7, #3]
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7f9 fac5 	bl	8003e64 <HAL_PCD_EP_Close>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 f939 	bl	800ab58 <USBD_Get_USB_Status>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a90e:	78fa      	ldrb	r2, [r7, #3]
 800a910:	4611      	mov	r1, r2
 800a912:	4618      	mov	r0, r3
 800a914:	f7f9 fb9d 	bl	8004052 <HAL_PCD_EP_SetStall>
 800a918:	4603      	mov	r3, r0
 800a91a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 f91a 	bl	800ab58 <USBD_Get_USB_Status>
 800a924:	4603      	mov	r3, r0
 800a926:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a928:	7bbb      	ldrb	r3, [r7, #14]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	460b      	mov	r3, r1
 800a93c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a942:	2300      	movs	r3, #0
 800a944:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a94c:	78fa      	ldrb	r2, [r7, #3]
 800a94e:	4611      	mov	r1, r2
 800a950:	4618      	mov	r0, r3
 800a952:	f7f9 fbe2 	bl	800411a <HAL_PCD_EP_ClrStall>
 800a956:	4603      	mov	r3, r0
 800a958:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 f8fb 	bl	800ab58 <USBD_Get_USB_Status>
 800a962:	4603      	mov	r3, r0
 800a964:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a966:	7bbb      	ldrb	r3, [r7, #14]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a982:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	da0b      	bge.n	800a9a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a98c:	78fb      	ldrb	r3, [r7, #3]
 800a98e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a992:	68f9      	ldr	r1, [r7, #12]
 800a994:	4613      	mov	r3, r2
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	4413      	add	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	440b      	add	r3, r1
 800a99e:	333e      	adds	r3, #62	; 0x3e
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	e00b      	b.n	800a9bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9a4:	78fb      	ldrb	r3, [r7, #3]
 800a9a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9aa:	68f9      	ldr	r1, [r7, #12]
 800a9ac:	4613      	mov	r3, r2
 800a9ae:	00db      	lsls	r3, r3, #3
 800a9b0:	4413      	add	r3, r2
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	440b      	add	r3, r1
 800a9b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a9ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3714      	adds	r7, #20
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9e2:	78fa      	ldrb	r2, [r7, #3]
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7f9 f9af 	bl	8003d4a <HAL_PCD_SetAddress>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 f8b0 	bl	800ab58 <USBD_Get_USB_Status>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b086      	sub	sp, #24
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	607a      	str	r2, [r7, #4]
 800aa10:	603b      	str	r3, [r7, #0]
 800aa12:	460b      	mov	r3, r1
 800aa14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aa24:	7af9      	ldrb	r1, [r7, #11]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	f7f9 fac8 	bl	8003fbe <HAL_PCD_EP_Transmit>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f000 f88f 	bl	800ab58 <USBD_Get_USB_Status>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3718      	adds	r7, #24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	607a      	str	r2, [r7, #4]
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	460b      	mov	r3, r1
 800aa56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aa66:	7af9      	ldrb	r1, [r7, #11]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	f7f9 fa44 	bl	8003ef8 <HAL_PCD_EP_Receive>
 800aa70:	4603      	mov	r3, r0
 800aa72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa74:	7dfb      	ldrb	r3, [r7, #23]
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 f86e 	bl	800ab58 <USBD_Get_USB_Status>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa80:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3718      	adds	r7, #24
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	460b      	mov	r3, r1
 800aa94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa9c:	78fa      	ldrb	r2, [r7, #3]
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7f9 fa74 	bl	8003f8e <HAL_PCD_EP_GetRxCount>
 800aaa6:	4603      	mov	r3, r0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800aabc:	78fb      	ldrb	r3, [r7, #3]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d002      	beq.n	800aac8 <HAL_PCDEx_LPM_Callback+0x18>
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d01f      	beq.n	800ab06 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800aac6:	e03b      	b.n	800ab40 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6a1b      	ldr	r3, [r3, #32]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d007      	beq.n	800aae0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aad0:	f000 f83c 	bl	800ab4c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aad4:	4b1c      	ldr	r3, [pc, #112]	; (800ab48 <HAL_PCDEx_LPM_Callback+0x98>)
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	4a1b      	ldr	r2, [pc, #108]	; (800ab48 <HAL_PCDEx_LPM_Callback+0x98>)
 800aada:	f023 0306 	bic.w	r3, r3, #6
 800aade:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	6812      	ldr	r2, [r2, #0]
 800aaee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aaf2:	f023 0301 	bic.w	r3, r3, #1
 800aaf6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fe fa89 	bl	8009016 <USBD_LL_Resume>
    break;
 800ab04:	e01c      	b.n	800ab40 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	6812      	ldr	r2, [r2, #0]
 800ab14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab18:	f043 0301 	orr.w	r3, r3, #1
 800ab1c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7fe fa60 	bl	8008fea <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d005      	beq.n	800ab3e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab32:	4b05      	ldr	r3, [pc, #20]	; (800ab48 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	4a04      	ldr	r2, [pc, #16]	; (800ab48 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab38:	f043 0306 	orr.w	r3, r3, #6
 800ab3c:	6113      	str	r3, [r2, #16]
    break;
 800ab3e:	bf00      	nop
}
 800ab40:	bf00      	nop
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	e000ed00 	.word	0xe000ed00

0800ab4c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ab50:	f7f5 fed6 	bl	8000900 <SystemClock_Config>
}
 800ab54:	bf00      	nop
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab66:	79fb      	ldrb	r3, [r7, #7]
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d817      	bhi.n	800ab9c <USBD_Get_USB_Status+0x44>
 800ab6c:	a201      	add	r2, pc, #4	; (adr r2, 800ab74 <USBD_Get_USB_Status+0x1c>)
 800ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab72:	bf00      	nop
 800ab74:	0800ab85 	.word	0x0800ab85
 800ab78:	0800ab8b 	.word	0x0800ab8b
 800ab7c:	0800ab91 	.word	0x0800ab91
 800ab80:	0800ab97 	.word	0x0800ab97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	73fb      	strb	r3, [r7, #15]
    break;
 800ab88:	e00b      	b.n	800aba2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab8e:	e008      	b.n	800aba2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab90:	2301      	movs	r3, #1
 800ab92:	73fb      	strb	r3, [r7, #15]
    break;
 800ab94:	e005      	b.n	800aba2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab96:	2303      	movs	r3, #3
 800ab98:	73fb      	strb	r3, [r7, #15]
    break;
 800ab9a:	e002      	b.n	800aba2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	73fb      	strb	r3, [r7, #15]
    break;
 800aba0:	bf00      	nop
  }
  return usb_status;
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <malloc>:
 800abb0:	4b02      	ldr	r3, [pc, #8]	; (800abbc <malloc+0xc>)
 800abb2:	4601      	mov	r1, r0
 800abb4:	6818      	ldr	r0, [r3, #0]
 800abb6:	f000 b82b 	b.w	800ac10 <_malloc_r>
 800abba:	bf00      	nop
 800abbc:	20000158 	.word	0x20000158

0800abc0 <free>:
 800abc0:	4b02      	ldr	r3, [pc, #8]	; (800abcc <free+0xc>)
 800abc2:	4601      	mov	r1, r0
 800abc4:	6818      	ldr	r0, [r3, #0]
 800abc6:	f000 b913 	b.w	800adf0 <_free_r>
 800abca:	bf00      	nop
 800abcc:	20000158 	.word	0x20000158

0800abd0 <sbrk_aligned>:
 800abd0:	b570      	push	{r4, r5, r6, lr}
 800abd2:	4e0e      	ldr	r6, [pc, #56]	; (800ac0c <sbrk_aligned+0x3c>)
 800abd4:	460c      	mov	r4, r1
 800abd6:	6831      	ldr	r1, [r6, #0]
 800abd8:	4605      	mov	r5, r0
 800abda:	b911      	cbnz	r1, 800abe2 <sbrk_aligned+0x12>
 800abdc:	f000 f8cc 	bl	800ad78 <_sbrk_r>
 800abe0:	6030      	str	r0, [r6, #0]
 800abe2:	4621      	mov	r1, r4
 800abe4:	4628      	mov	r0, r5
 800abe6:	f000 f8c7 	bl	800ad78 <_sbrk_r>
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	d00a      	beq.n	800ac04 <sbrk_aligned+0x34>
 800abee:	1cc4      	adds	r4, r0, #3
 800abf0:	f024 0403 	bic.w	r4, r4, #3
 800abf4:	42a0      	cmp	r0, r4
 800abf6:	d007      	beq.n	800ac08 <sbrk_aligned+0x38>
 800abf8:	1a21      	subs	r1, r4, r0
 800abfa:	4628      	mov	r0, r5
 800abfc:	f000 f8bc 	bl	800ad78 <_sbrk_r>
 800ac00:	3001      	adds	r0, #1
 800ac02:	d101      	bne.n	800ac08 <sbrk_aligned+0x38>
 800ac04:	f04f 34ff 	mov.w	r4, #4294967295
 800ac08:	4620      	mov	r0, r4
 800ac0a:	bd70      	pop	{r4, r5, r6, pc}
 800ac0c:	20001d14 	.word	0x20001d14

0800ac10 <_malloc_r>:
 800ac10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac14:	1ccd      	adds	r5, r1, #3
 800ac16:	f025 0503 	bic.w	r5, r5, #3
 800ac1a:	3508      	adds	r5, #8
 800ac1c:	2d0c      	cmp	r5, #12
 800ac1e:	bf38      	it	cc
 800ac20:	250c      	movcc	r5, #12
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	4607      	mov	r7, r0
 800ac26:	db01      	blt.n	800ac2c <_malloc_r+0x1c>
 800ac28:	42a9      	cmp	r1, r5
 800ac2a:	d905      	bls.n	800ac38 <_malloc_r+0x28>
 800ac2c:	230c      	movs	r3, #12
 800ac2e:	603b      	str	r3, [r7, #0]
 800ac30:	2600      	movs	r6, #0
 800ac32:	4630      	mov	r0, r6
 800ac34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ad0c <_malloc_r+0xfc>
 800ac3c:	f000 f868 	bl	800ad10 <__malloc_lock>
 800ac40:	f8d8 3000 	ldr.w	r3, [r8]
 800ac44:	461c      	mov	r4, r3
 800ac46:	bb5c      	cbnz	r4, 800aca0 <_malloc_r+0x90>
 800ac48:	4629      	mov	r1, r5
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	f7ff ffc0 	bl	800abd0 <sbrk_aligned>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	4604      	mov	r4, r0
 800ac54:	d155      	bne.n	800ad02 <_malloc_r+0xf2>
 800ac56:	f8d8 4000 	ldr.w	r4, [r8]
 800ac5a:	4626      	mov	r6, r4
 800ac5c:	2e00      	cmp	r6, #0
 800ac5e:	d145      	bne.n	800acec <_malloc_r+0xdc>
 800ac60:	2c00      	cmp	r4, #0
 800ac62:	d048      	beq.n	800acf6 <_malloc_r+0xe6>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	4631      	mov	r1, r6
 800ac68:	4638      	mov	r0, r7
 800ac6a:	eb04 0903 	add.w	r9, r4, r3
 800ac6e:	f000 f883 	bl	800ad78 <_sbrk_r>
 800ac72:	4581      	cmp	r9, r0
 800ac74:	d13f      	bne.n	800acf6 <_malloc_r+0xe6>
 800ac76:	6821      	ldr	r1, [r4, #0]
 800ac78:	1a6d      	subs	r5, r5, r1
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	f7ff ffa7 	bl	800abd0 <sbrk_aligned>
 800ac82:	3001      	adds	r0, #1
 800ac84:	d037      	beq.n	800acf6 <_malloc_r+0xe6>
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	442b      	add	r3, r5
 800ac8a:	6023      	str	r3, [r4, #0]
 800ac8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d038      	beq.n	800ad06 <_malloc_r+0xf6>
 800ac94:	685a      	ldr	r2, [r3, #4]
 800ac96:	42a2      	cmp	r2, r4
 800ac98:	d12b      	bne.n	800acf2 <_malloc_r+0xe2>
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	605a      	str	r2, [r3, #4]
 800ac9e:	e00f      	b.n	800acc0 <_malloc_r+0xb0>
 800aca0:	6822      	ldr	r2, [r4, #0]
 800aca2:	1b52      	subs	r2, r2, r5
 800aca4:	d41f      	bmi.n	800ace6 <_malloc_r+0xd6>
 800aca6:	2a0b      	cmp	r2, #11
 800aca8:	d917      	bls.n	800acda <_malloc_r+0xca>
 800acaa:	1961      	adds	r1, r4, r5
 800acac:	42a3      	cmp	r3, r4
 800acae:	6025      	str	r5, [r4, #0]
 800acb0:	bf18      	it	ne
 800acb2:	6059      	strne	r1, [r3, #4]
 800acb4:	6863      	ldr	r3, [r4, #4]
 800acb6:	bf08      	it	eq
 800acb8:	f8c8 1000 	streq.w	r1, [r8]
 800acbc:	5162      	str	r2, [r4, r5]
 800acbe:	604b      	str	r3, [r1, #4]
 800acc0:	4638      	mov	r0, r7
 800acc2:	f104 060b 	add.w	r6, r4, #11
 800acc6:	f000 f829 	bl	800ad1c <__malloc_unlock>
 800acca:	f026 0607 	bic.w	r6, r6, #7
 800acce:	1d23      	adds	r3, r4, #4
 800acd0:	1af2      	subs	r2, r6, r3
 800acd2:	d0ae      	beq.n	800ac32 <_malloc_r+0x22>
 800acd4:	1b9b      	subs	r3, r3, r6
 800acd6:	50a3      	str	r3, [r4, r2]
 800acd8:	e7ab      	b.n	800ac32 <_malloc_r+0x22>
 800acda:	42a3      	cmp	r3, r4
 800acdc:	6862      	ldr	r2, [r4, #4]
 800acde:	d1dd      	bne.n	800ac9c <_malloc_r+0x8c>
 800ace0:	f8c8 2000 	str.w	r2, [r8]
 800ace4:	e7ec      	b.n	800acc0 <_malloc_r+0xb0>
 800ace6:	4623      	mov	r3, r4
 800ace8:	6864      	ldr	r4, [r4, #4]
 800acea:	e7ac      	b.n	800ac46 <_malloc_r+0x36>
 800acec:	4634      	mov	r4, r6
 800acee:	6876      	ldr	r6, [r6, #4]
 800acf0:	e7b4      	b.n	800ac5c <_malloc_r+0x4c>
 800acf2:	4613      	mov	r3, r2
 800acf4:	e7cc      	b.n	800ac90 <_malloc_r+0x80>
 800acf6:	230c      	movs	r3, #12
 800acf8:	603b      	str	r3, [r7, #0]
 800acfa:	4638      	mov	r0, r7
 800acfc:	f000 f80e 	bl	800ad1c <__malloc_unlock>
 800ad00:	e797      	b.n	800ac32 <_malloc_r+0x22>
 800ad02:	6025      	str	r5, [r4, #0]
 800ad04:	e7dc      	b.n	800acc0 <_malloc_r+0xb0>
 800ad06:	605b      	str	r3, [r3, #4]
 800ad08:	deff      	udf	#255	; 0xff
 800ad0a:	bf00      	nop
 800ad0c:	20001d10 	.word	0x20001d10

0800ad10 <__malloc_lock>:
 800ad10:	4801      	ldr	r0, [pc, #4]	; (800ad18 <__malloc_lock+0x8>)
 800ad12:	f000 b86b 	b.w	800adec <__retarget_lock_acquire_recursive>
 800ad16:	bf00      	nop
 800ad18:	20001e54 	.word	0x20001e54

0800ad1c <__malloc_unlock>:
 800ad1c:	4801      	ldr	r0, [pc, #4]	; (800ad24 <__malloc_unlock+0x8>)
 800ad1e:	f000 b866 	b.w	800adee <__retarget_lock_release_recursive>
 800ad22:	bf00      	nop
 800ad24:	20001e54 	.word	0x20001e54

0800ad28 <siprintf>:
 800ad28:	b40e      	push	{r1, r2, r3}
 800ad2a:	b500      	push	{lr}
 800ad2c:	b09c      	sub	sp, #112	; 0x70
 800ad2e:	ab1d      	add	r3, sp, #116	; 0x74
 800ad30:	9002      	str	r0, [sp, #8]
 800ad32:	9006      	str	r0, [sp, #24]
 800ad34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad38:	4809      	ldr	r0, [pc, #36]	; (800ad60 <siprintf+0x38>)
 800ad3a:	9107      	str	r1, [sp, #28]
 800ad3c:	9104      	str	r1, [sp, #16]
 800ad3e:	4909      	ldr	r1, [pc, #36]	; (800ad64 <siprintf+0x3c>)
 800ad40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad44:	9105      	str	r1, [sp, #20]
 800ad46:	6800      	ldr	r0, [r0, #0]
 800ad48:	9301      	str	r3, [sp, #4]
 800ad4a:	a902      	add	r1, sp, #8
 800ad4c:	f000 f8f6 	bl	800af3c <_svfiprintf_r>
 800ad50:	9b02      	ldr	r3, [sp, #8]
 800ad52:	2200      	movs	r2, #0
 800ad54:	701a      	strb	r2, [r3, #0]
 800ad56:	b01c      	add	sp, #112	; 0x70
 800ad58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad5c:	b003      	add	sp, #12
 800ad5e:	4770      	bx	lr
 800ad60:	20000158 	.word	0x20000158
 800ad64:	ffff0208 	.word	0xffff0208

0800ad68 <memset>:
 800ad68:	4402      	add	r2, r0
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d100      	bne.n	800ad72 <memset+0xa>
 800ad70:	4770      	bx	lr
 800ad72:	f803 1b01 	strb.w	r1, [r3], #1
 800ad76:	e7f9      	b.n	800ad6c <memset+0x4>

0800ad78 <_sbrk_r>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	4d06      	ldr	r5, [pc, #24]	; (800ad94 <_sbrk_r+0x1c>)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4604      	mov	r4, r0
 800ad80:	4608      	mov	r0, r1
 800ad82:	602b      	str	r3, [r5, #0]
 800ad84:	f7f6 fa8a 	bl	800129c <_sbrk>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	d102      	bne.n	800ad92 <_sbrk_r+0x1a>
 800ad8c:	682b      	ldr	r3, [r5, #0]
 800ad8e:	b103      	cbz	r3, 800ad92 <_sbrk_r+0x1a>
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	bd38      	pop	{r3, r4, r5, pc}
 800ad94:	20001e50 	.word	0x20001e50

0800ad98 <__errno>:
 800ad98:	4b01      	ldr	r3, [pc, #4]	; (800ada0 <__errno+0x8>)
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	4770      	bx	lr
 800ad9e:	bf00      	nop
 800ada0:	20000158 	.word	0x20000158

0800ada4 <__libc_init_array>:
 800ada4:	b570      	push	{r4, r5, r6, lr}
 800ada6:	4d0d      	ldr	r5, [pc, #52]	; (800addc <__libc_init_array+0x38>)
 800ada8:	4c0d      	ldr	r4, [pc, #52]	; (800ade0 <__libc_init_array+0x3c>)
 800adaa:	1b64      	subs	r4, r4, r5
 800adac:	10a4      	asrs	r4, r4, #2
 800adae:	2600      	movs	r6, #0
 800adb0:	42a6      	cmp	r6, r4
 800adb2:	d109      	bne.n	800adc8 <__libc_init_array+0x24>
 800adb4:	4d0b      	ldr	r5, [pc, #44]	; (800ade4 <__libc_init_array+0x40>)
 800adb6:	4c0c      	ldr	r4, [pc, #48]	; (800ade8 <__libc_init_array+0x44>)
 800adb8:	f000 fbae 	bl	800b518 <_init>
 800adbc:	1b64      	subs	r4, r4, r5
 800adbe:	10a4      	asrs	r4, r4, #2
 800adc0:	2600      	movs	r6, #0
 800adc2:	42a6      	cmp	r6, r4
 800adc4:	d105      	bne.n	800add2 <__libc_init_array+0x2e>
 800adc6:	bd70      	pop	{r4, r5, r6, pc}
 800adc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800adcc:	4798      	blx	r3
 800adce:	3601      	adds	r6, #1
 800add0:	e7ee      	b.n	800adb0 <__libc_init_array+0xc>
 800add2:	f855 3b04 	ldr.w	r3, [r5], #4
 800add6:	4798      	blx	r3
 800add8:	3601      	adds	r6, #1
 800adda:	e7f2      	b.n	800adc2 <__libc_init_array+0x1e>
 800addc:	0800b5e0 	.word	0x0800b5e0
 800ade0:	0800b5e0 	.word	0x0800b5e0
 800ade4:	0800b5e0 	.word	0x0800b5e0
 800ade8:	0800b5e4 	.word	0x0800b5e4

0800adec <__retarget_lock_acquire_recursive>:
 800adec:	4770      	bx	lr

0800adee <__retarget_lock_release_recursive>:
 800adee:	4770      	bx	lr

0800adf0 <_free_r>:
 800adf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adf2:	2900      	cmp	r1, #0
 800adf4:	d044      	beq.n	800ae80 <_free_r+0x90>
 800adf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adfa:	9001      	str	r0, [sp, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f1a1 0404 	sub.w	r4, r1, #4
 800ae02:	bfb8      	it	lt
 800ae04:	18e4      	addlt	r4, r4, r3
 800ae06:	f7ff ff83 	bl	800ad10 <__malloc_lock>
 800ae0a:	4a1e      	ldr	r2, [pc, #120]	; (800ae84 <_free_r+0x94>)
 800ae0c:	9801      	ldr	r0, [sp, #4]
 800ae0e:	6813      	ldr	r3, [r2, #0]
 800ae10:	b933      	cbnz	r3, 800ae20 <_free_r+0x30>
 800ae12:	6063      	str	r3, [r4, #4]
 800ae14:	6014      	str	r4, [r2, #0]
 800ae16:	b003      	add	sp, #12
 800ae18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae1c:	f7ff bf7e 	b.w	800ad1c <__malloc_unlock>
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	d908      	bls.n	800ae36 <_free_r+0x46>
 800ae24:	6825      	ldr	r5, [r4, #0]
 800ae26:	1961      	adds	r1, r4, r5
 800ae28:	428b      	cmp	r3, r1
 800ae2a:	bf01      	itttt	eq
 800ae2c:	6819      	ldreq	r1, [r3, #0]
 800ae2e:	685b      	ldreq	r3, [r3, #4]
 800ae30:	1949      	addeq	r1, r1, r5
 800ae32:	6021      	streq	r1, [r4, #0]
 800ae34:	e7ed      	b.n	800ae12 <_free_r+0x22>
 800ae36:	461a      	mov	r2, r3
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	b10b      	cbz	r3, 800ae40 <_free_r+0x50>
 800ae3c:	42a3      	cmp	r3, r4
 800ae3e:	d9fa      	bls.n	800ae36 <_free_r+0x46>
 800ae40:	6811      	ldr	r1, [r2, #0]
 800ae42:	1855      	adds	r5, r2, r1
 800ae44:	42a5      	cmp	r5, r4
 800ae46:	d10b      	bne.n	800ae60 <_free_r+0x70>
 800ae48:	6824      	ldr	r4, [r4, #0]
 800ae4a:	4421      	add	r1, r4
 800ae4c:	1854      	adds	r4, r2, r1
 800ae4e:	42a3      	cmp	r3, r4
 800ae50:	6011      	str	r1, [r2, #0]
 800ae52:	d1e0      	bne.n	800ae16 <_free_r+0x26>
 800ae54:	681c      	ldr	r4, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	6053      	str	r3, [r2, #4]
 800ae5a:	440c      	add	r4, r1
 800ae5c:	6014      	str	r4, [r2, #0]
 800ae5e:	e7da      	b.n	800ae16 <_free_r+0x26>
 800ae60:	d902      	bls.n	800ae68 <_free_r+0x78>
 800ae62:	230c      	movs	r3, #12
 800ae64:	6003      	str	r3, [r0, #0]
 800ae66:	e7d6      	b.n	800ae16 <_free_r+0x26>
 800ae68:	6825      	ldr	r5, [r4, #0]
 800ae6a:	1961      	adds	r1, r4, r5
 800ae6c:	428b      	cmp	r3, r1
 800ae6e:	bf04      	itt	eq
 800ae70:	6819      	ldreq	r1, [r3, #0]
 800ae72:	685b      	ldreq	r3, [r3, #4]
 800ae74:	6063      	str	r3, [r4, #4]
 800ae76:	bf04      	itt	eq
 800ae78:	1949      	addeq	r1, r1, r5
 800ae7a:	6021      	streq	r1, [r4, #0]
 800ae7c:	6054      	str	r4, [r2, #4]
 800ae7e:	e7ca      	b.n	800ae16 <_free_r+0x26>
 800ae80:	b003      	add	sp, #12
 800ae82:	bd30      	pop	{r4, r5, pc}
 800ae84:	20001d10 	.word	0x20001d10

0800ae88 <__ssputs_r>:
 800ae88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae8c:	688e      	ldr	r6, [r1, #8]
 800ae8e:	461f      	mov	r7, r3
 800ae90:	42be      	cmp	r6, r7
 800ae92:	680b      	ldr	r3, [r1, #0]
 800ae94:	4682      	mov	sl, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	4690      	mov	r8, r2
 800ae9a:	d82c      	bhi.n	800aef6 <__ssputs_r+0x6e>
 800ae9c:	898a      	ldrh	r2, [r1, #12]
 800ae9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aea2:	d026      	beq.n	800aef2 <__ssputs_r+0x6a>
 800aea4:	6965      	ldr	r5, [r4, #20]
 800aea6:	6909      	ldr	r1, [r1, #16]
 800aea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeac:	eba3 0901 	sub.w	r9, r3, r1
 800aeb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeb4:	1c7b      	adds	r3, r7, #1
 800aeb6:	444b      	add	r3, r9
 800aeb8:	106d      	asrs	r5, r5, #1
 800aeba:	429d      	cmp	r5, r3
 800aebc:	bf38      	it	cc
 800aebe:	461d      	movcc	r5, r3
 800aec0:	0553      	lsls	r3, r2, #21
 800aec2:	d527      	bpl.n	800af14 <__ssputs_r+0x8c>
 800aec4:	4629      	mov	r1, r5
 800aec6:	f7ff fea3 	bl	800ac10 <_malloc_r>
 800aeca:	4606      	mov	r6, r0
 800aecc:	b360      	cbz	r0, 800af28 <__ssputs_r+0xa0>
 800aece:	6921      	ldr	r1, [r4, #16]
 800aed0:	464a      	mov	r2, r9
 800aed2:	f000 fadb 	bl	800b48c <memcpy>
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee0:	81a3      	strh	r3, [r4, #12]
 800aee2:	6126      	str	r6, [r4, #16]
 800aee4:	6165      	str	r5, [r4, #20]
 800aee6:	444e      	add	r6, r9
 800aee8:	eba5 0509 	sub.w	r5, r5, r9
 800aeec:	6026      	str	r6, [r4, #0]
 800aeee:	60a5      	str	r5, [r4, #8]
 800aef0:	463e      	mov	r6, r7
 800aef2:	42be      	cmp	r6, r7
 800aef4:	d900      	bls.n	800aef8 <__ssputs_r+0x70>
 800aef6:	463e      	mov	r6, r7
 800aef8:	6820      	ldr	r0, [r4, #0]
 800aefa:	4632      	mov	r2, r6
 800aefc:	4641      	mov	r1, r8
 800aefe:	f000 faab 	bl	800b458 <memmove>
 800af02:	68a3      	ldr	r3, [r4, #8]
 800af04:	1b9b      	subs	r3, r3, r6
 800af06:	60a3      	str	r3, [r4, #8]
 800af08:	6823      	ldr	r3, [r4, #0]
 800af0a:	4433      	add	r3, r6
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	2000      	movs	r0, #0
 800af10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af14:	462a      	mov	r2, r5
 800af16:	f000 fac7 	bl	800b4a8 <_realloc_r>
 800af1a:	4606      	mov	r6, r0
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d1e0      	bne.n	800aee2 <__ssputs_r+0x5a>
 800af20:	6921      	ldr	r1, [r4, #16]
 800af22:	4650      	mov	r0, sl
 800af24:	f7ff ff64 	bl	800adf0 <_free_r>
 800af28:	230c      	movs	r3, #12
 800af2a:	f8ca 3000 	str.w	r3, [sl]
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	f04f 30ff 	mov.w	r0, #4294967295
 800af3a:	e7e9      	b.n	800af10 <__ssputs_r+0x88>

0800af3c <_svfiprintf_r>:
 800af3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af40:	4698      	mov	r8, r3
 800af42:	898b      	ldrh	r3, [r1, #12]
 800af44:	061b      	lsls	r3, r3, #24
 800af46:	b09d      	sub	sp, #116	; 0x74
 800af48:	4607      	mov	r7, r0
 800af4a:	460d      	mov	r5, r1
 800af4c:	4614      	mov	r4, r2
 800af4e:	d50e      	bpl.n	800af6e <_svfiprintf_r+0x32>
 800af50:	690b      	ldr	r3, [r1, #16]
 800af52:	b963      	cbnz	r3, 800af6e <_svfiprintf_r+0x32>
 800af54:	2140      	movs	r1, #64	; 0x40
 800af56:	f7ff fe5b 	bl	800ac10 <_malloc_r>
 800af5a:	6028      	str	r0, [r5, #0]
 800af5c:	6128      	str	r0, [r5, #16]
 800af5e:	b920      	cbnz	r0, 800af6a <_svfiprintf_r+0x2e>
 800af60:	230c      	movs	r3, #12
 800af62:	603b      	str	r3, [r7, #0]
 800af64:	f04f 30ff 	mov.w	r0, #4294967295
 800af68:	e0d0      	b.n	800b10c <_svfiprintf_r+0x1d0>
 800af6a:	2340      	movs	r3, #64	; 0x40
 800af6c:	616b      	str	r3, [r5, #20]
 800af6e:	2300      	movs	r3, #0
 800af70:	9309      	str	r3, [sp, #36]	; 0x24
 800af72:	2320      	movs	r3, #32
 800af74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af78:	f8cd 800c 	str.w	r8, [sp, #12]
 800af7c:	2330      	movs	r3, #48	; 0x30
 800af7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b124 <_svfiprintf_r+0x1e8>
 800af82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af86:	f04f 0901 	mov.w	r9, #1
 800af8a:	4623      	mov	r3, r4
 800af8c:	469a      	mov	sl, r3
 800af8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af92:	b10a      	cbz	r2, 800af98 <_svfiprintf_r+0x5c>
 800af94:	2a25      	cmp	r2, #37	; 0x25
 800af96:	d1f9      	bne.n	800af8c <_svfiprintf_r+0x50>
 800af98:	ebba 0b04 	subs.w	fp, sl, r4
 800af9c:	d00b      	beq.n	800afb6 <_svfiprintf_r+0x7a>
 800af9e:	465b      	mov	r3, fp
 800afa0:	4622      	mov	r2, r4
 800afa2:	4629      	mov	r1, r5
 800afa4:	4638      	mov	r0, r7
 800afa6:	f7ff ff6f 	bl	800ae88 <__ssputs_r>
 800afaa:	3001      	adds	r0, #1
 800afac:	f000 80a9 	beq.w	800b102 <_svfiprintf_r+0x1c6>
 800afb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afb2:	445a      	add	r2, fp
 800afb4:	9209      	str	r2, [sp, #36]	; 0x24
 800afb6:	f89a 3000 	ldrb.w	r3, [sl]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 80a1 	beq.w	800b102 <_svfiprintf_r+0x1c6>
 800afc0:	2300      	movs	r3, #0
 800afc2:	f04f 32ff 	mov.w	r2, #4294967295
 800afc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afca:	f10a 0a01 	add.w	sl, sl, #1
 800afce:	9304      	str	r3, [sp, #16]
 800afd0:	9307      	str	r3, [sp, #28]
 800afd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afd6:	931a      	str	r3, [sp, #104]	; 0x68
 800afd8:	4654      	mov	r4, sl
 800afda:	2205      	movs	r2, #5
 800afdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afe0:	4850      	ldr	r0, [pc, #320]	; (800b124 <_svfiprintf_r+0x1e8>)
 800afe2:	f7f5 f91d 	bl	8000220 <memchr>
 800afe6:	9a04      	ldr	r2, [sp, #16]
 800afe8:	b9d8      	cbnz	r0, 800b022 <_svfiprintf_r+0xe6>
 800afea:	06d0      	lsls	r0, r2, #27
 800afec:	bf44      	itt	mi
 800afee:	2320      	movmi	r3, #32
 800aff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff4:	0711      	lsls	r1, r2, #28
 800aff6:	bf44      	itt	mi
 800aff8:	232b      	movmi	r3, #43	; 0x2b
 800affa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800affe:	f89a 3000 	ldrb.w	r3, [sl]
 800b002:	2b2a      	cmp	r3, #42	; 0x2a
 800b004:	d015      	beq.n	800b032 <_svfiprintf_r+0xf6>
 800b006:	9a07      	ldr	r2, [sp, #28]
 800b008:	4654      	mov	r4, sl
 800b00a:	2000      	movs	r0, #0
 800b00c:	f04f 0c0a 	mov.w	ip, #10
 800b010:	4621      	mov	r1, r4
 800b012:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b016:	3b30      	subs	r3, #48	; 0x30
 800b018:	2b09      	cmp	r3, #9
 800b01a:	d94d      	bls.n	800b0b8 <_svfiprintf_r+0x17c>
 800b01c:	b1b0      	cbz	r0, 800b04c <_svfiprintf_r+0x110>
 800b01e:	9207      	str	r2, [sp, #28]
 800b020:	e014      	b.n	800b04c <_svfiprintf_r+0x110>
 800b022:	eba0 0308 	sub.w	r3, r0, r8
 800b026:	fa09 f303 	lsl.w	r3, r9, r3
 800b02a:	4313      	orrs	r3, r2
 800b02c:	9304      	str	r3, [sp, #16]
 800b02e:	46a2      	mov	sl, r4
 800b030:	e7d2      	b.n	800afd8 <_svfiprintf_r+0x9c>
 800b032:	9b03      	ldr	r3, [sp, #12]
 800b034:	1d19      	adds	r1, r3, #4
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	9103      	str	r1, [sp, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bfbb      	ittet	lt
 800b03e:	425b      	neglt	r3, r3
 800b040:	f042 0202 	orrlt.w	r2, r2, #2
 800b044:	9307      	strge	r3, [sp, #28]
 800b046:	9307      	strlt	r3, [sp, #28]
 800b048:	bfb8      	it	lt
 800b04a:	9204      	strlt	r2, [sp, #16]
 800b04c:	7823      	ldrb	r3, [r4, #0]
 800b04e:	2b2e      	cmp	r3, #46	; 0x2e
 800b050:	d10c      	bne.n	800b06c <_svfiprintf_r+0x130>
 800b052:	7863      	ldrb	r3, [r4, #1]
 800b054:	2b2a      	cmp	r3, #42	; 0x2a
 800b056:	d134      	bne.n	800b0c2 <_svfiprintf_r+0x186>
 800b058:	9b03      	ldr	r3, [sp, #12]
 800b05a:	1d1a      	adds	r2, r3, #4
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	9203      	str	r2, [sp, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	bfb8      	it	lt
 800b064:	f04f 33ff 	movlt.w	r3, #4294967295
 800b068:	3402      	adds	r4, #2
 800b06a:	9305      	str	r3, [sp, #20]
 800b06c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b134 <_svfiprintf_r+0x1f8>
 800b070:	7821      	ldrb	r1, [r4, #0]
 800b072:	2203      	movs	r2, #3
 800b074:	4650      	mov	r0, sl
 800b076:	f7f5 f8d3 	bl	8000220 <memchr>
 800b07a:	b138      	cbz	r0, 800b08c <_svfiprintf_r+0x150>
 800b07c:	9b04      	ldr	r3, [sp, #16]
 800b07e:	eba0 000a 	sub.w	r0, r0, sl
 800b082:	2240      	movs	r2, #64	; 0x40
 800b084:	4082      	lsls	r2, r0
 800b086:	4313      	orrs	r3, r2
 800b088:	3401      	adds	r4, #1
 800b08a:	9304      	str	r3, [sp, #16]
 800b08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b090:	4825      	ldr	r0, [pc, #148]	; (800b128 <_svfiprintf_r+0x1ec>)
 800b092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b096:	2206      	movs	r2, #6
 800b098:	f7f5 f8c2 	bl	8000220 <memchr>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d038      	beq.n	800b112 <_svfiprintf_r+0x1d6>
 800b0a0:	4b22      	ldr	r3, [pc, #136]	; (800b12c <_svfiprintf_r+0x1f0>)
 800b0a2:	bb1b      	cbnz	r3, 800b0ec <_svfiprintf_r+0x1b0>
 800b0a4:	9b03      	ldr	r3, [sp, #12]
 800b0a6:	3307      	adds	r3, #7
 800b0a8:	f023 0307 	bic.w	r3, r3, #7
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	9303      	str	r3, [sp, #12]
 800b0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b2:	4433      	add	r3, r6
 800b0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0b6:	e768      	b.n	800af8a <_svfiprintf_r+0x4e>
 800b0b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0bc:	460c      	mov	r4, r1
 800b0be:	2001      	movs	r0, #1
 800b0c0:	e7a6      	b.n	800b010 <_svfiprintf_r+0xd4>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	3401      	adds	r4, #1
 800b0c6:	9305      	str	r3, [sp, #20]
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	f04f 0c0a 	mov.w	ip, #10
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0d4:	3a30      	subs	r2, #48	; 0x30
 800b0d6:	2a09      	cmp	r2, #9
 800b0d8:	d903      	bls.n	800b0e2 <_svfiprintf_r+0x1a6>
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d0c6      	beq.n	800b06c <_svfiprintf_r+0x130>
 800b0de:	9105      	str	r1, [sp, #20]
 800b0e0:	e7c4      	b.n	800b06c <_svfiprintf_r+0x130>
 800b0e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0e6:	4604      	mov	r4, r0
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e7f0      	b.n	800b0ce <_svfiprintf_r+0x192>
 800b0ec:	ab03      	add	r3, sp, #12
 800b0ee:	9300      	str	r3, [sp, #0]
 800b0f0:	462a      	mov	r2, r5
 800b0f2:	4b0f      	ldr	r3, [pc, #60]	; (800b130 <_svfiprintf_r+0x1f4>)
 800b0f4:	a904      	add	r1, sp, #16
 800b0f6:	4638      	mov	r0, r7
 800b0f8:	f3af 8000 	nop.w
 800b0fc:	1c42      	adds	r2, r0, #1
 800b0fe:	4606      	mov	r6, r0
 800b100:	d1d6      	bne.n	800b0b0 <_svfiprintf_r+0x174>
 800b102:	89ab      	ldrh	r3, [r5, #12]
 800b104:	065b      	lsls	r3, r3, #25
 800b106:	f53f af2d 	bmi.w	800af64 <_svfiprintf_r+0x28>
 800b10a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b10c:	b01d      	add	sp, #116	; 0x74
 800b10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b112:	ab03      	add	r3, sp, #12
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	462a      	mov	r2, r5
 800b118:	4b05      	ldr	r3, [pc, #20]	; (800b130 <_svfiprintf_r+0x1f4>)
 800b11a:	a904      	add	r1, sp, #16
 800b11c:	4638      	mov	r0, r7
 800b11e:	f000 f879 	bl	800b214 <_printf_i>
 800b122:	e7eb      	b.n	800b0fc <_svfiprintf_r+0x1c0>
 800b124:	0800b5a4 	.word	0x0800b5a4
 800b128:	0800b5ae 	.word	0x0800b5ae
 800b12c:	00000000 	.word	0x00000000
 800b130:	0800ae89 	.word	0x0800ae89
 800b134:	0800b5aa 	.word	0x0800b5aa

0800b138 <_printf_common>:
 800b138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b13c:	4616      	mov	r6, r2
 800b13e:	4699      	mov	r9, r3
 800b140:	688a      	ldr	r2, [r1, #8]
 800b142:	690b      	ldr	r3, [r1, #16]
 800b144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b148:	4293      	cmp	r3, r2
 800b14a:	bfb8      	it	lt
 800b14c:	4613      	movlt	r3, r2
 800b14e:	6033      	str	r3, [r6, #0]
 800b150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b154:	4607      	mov	r7, r0
 800b156:	460c      	mov	r4, r1
 800b158:	b10a      	cbz	r2, 800b15e <_printf_common+0x26>
 800b15a:	3301      	adds	r3, #1
 800b15c:	6033      	str	r3, [r6, #0]
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	0699      	lsls	r1, r3, #26
 800b162:	bf42      	ittt	mi
 800b164:	6833      	ldrmi	r3, [r6, #0]
 800b166:	3302      	addmi	r3, #2
 800b168:	6033      	strmi	r3, [r6, #0]
 800b16a:	6825      	ldr	r5, [r4, #0]
 800b16c:	f015 0506 	ands.w	r5, r5, #6
 800b170:	d106      	bne.n	800b180 <_printf_common+0x48>
 800b172:	f104 0a19 	add.w	sl, r4, #25
 800b176:	68e3      	ldr	r3, [r4, #12]
 800b178:	6832      	ldr	r2, [r6, #0]
 800b17a:	1a9b      	subs	r3, r3, r2
 800b17c:	42ab      	cmp	r3, r5
 800b17e:	dc26      	bgt.n	800b1ce <_printf_common+0x96>
 800b180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b184:	1e13      	subs	r3, r2, #0
 800b186:	6822      	ldr	r2, [r4, #0]
 800b188:	bf18      	it	ne
 800b18a:	2301      	movne	r3, #1
 800b18c:	0692      	lsls	r2, r2, #26
 800b18e:	d42b      	bmi.n	800b1e8 <_printf_common+0xb0>
 800b190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b194:	4649      	mov	r1, r9
 800b196:	4638      	mov	r0, r7
 800b198:	47c0      	blx	r8
 800b19a:	3001      	adds	r0, #1
 800b19c:	d01e      	beq.n	800b1dc <_printf_common+0xa4>
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	6922      	ldr	r2, [r4, #16]
 800b1a2:	f003 0306 	and.w	r3, r3, #6
 800b1a6:	2b04      	cmp	r3, #4
 800b1a8:	bf02      	ittt	eq
 800b1aa:	68e5      	ldreq	r5, [r4, #12]
 800b1ac:	6833      	ldreq	r3, [r6, #0]
 800b1ae:	1aed      	subeq	r5, r5, r3
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	bf0c      	ite	eq
 800b1b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1b8:	2500      	movne	r5, #0
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	bfc4      	itt	gt
 800b1be:	1a9b      	subgt	r3, r3, r2
 800b1c0:	18ed      	addgt	r5, r5, r3
 800b1c2:	2600      	movs	r6, #0
 800b1c4:	341a      	adds	r4, #26
 800b1c6:	42b5      	cmp	r5, r6
 800b1c8:	d11a      	bne.n	800b200 <_printf_common+0xc8>
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	e008      	b.n	800b1e0 <_printf_common+0xa8>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	4652      	mov	r2, sl
 800b1d2:	4649      	mov	r1, r9
 800b1d4:	4638      	mov	r0, r7
 800b1d6:	47c0      	blx	r8
 800b1d8:	3001      	adds	r0, #1
 800b1da:	d103      	bne.n	800b1e4 <_printf_common+0xac>
 800b1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e4:	3501      	adds	r5, #1
 800b1e6:	e7c6      	b.n	800b176 <_printf_common+0x3e>
 800b1e8:	18e1      	adds	r1, r4, r3
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	2030      	movs	r0, #48	; 0x30
 800b1ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1f2:	4422      	add	r2, r4
 800b1f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1fc:	3302      	adds	r3, #2
 800b1fe:	e7c7      	b.n	800b190 <_printf_common+0x58>
 800b200:	2301      	movs	r3, #1
 800b202:	4622      	mov	r2, r4
 800b204:	4649      	mov	r1, r9
 800b206:	4638      	mov	r0, r7
 800b208:	47c0      	blx	r8
 800b20a:	3001      	adds	r0, #1
 800b20c:	d0e6      	beq.n	800b1dc <_printf_common+0xa4>
 800b20e:	3601      	adds	r6, #1
 800b210:	e7d9      	b.n	800b1c6 <_printf_common+0x8e>
	...

0800b214 <_printf_i>:
 800b214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b218:	7e0f      	ldrb	r7, [r1, #24]
 800b21a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b21c:	2f78      	cmp	r7, #120	; 0x78
 800b21e:	4691      	mov	r9, r2
 800b220:	4680      	mov	r8, r0
 800b222:	460c      	mov	r4, r1
 800b224:	469a      	mov	sl, r3
 800b226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b22a:	d807      	bhi.n	800b23c <_printf_i+0x28>
 800b22c:	2f62      	cmp	r7, #98	; 0x62
 800b22e:	d80a      	bhi.n	800b246 <_printf_i+0x32>
 800b230:	2f00      	cmp	r7, #0
 800b232:	f000 80d4 	beq.w	800b3de <_printf_i+0x1ca>
 800b236:	2f58      	cmp	r7, #88	; 0x58
 800b238:	f000 80c0 	beq.w	800b3bc <_printf_i+0x1a8>
 800b23c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b244:	e03a      	b.n	800b2bc <_printf_i+0xa8>
 800b246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b24a:	2b15      	cmp	r3, #21
 800b24c:	d8f6      	bhi.n	800b23c <_printf_i+0x28>
 800b24e:	a101      	add	r1, pc, #4	; (adr r1, 800b254 <_printf_i+0x40>)
 800b250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b254:	0800b2ad 	.word	0x0800b2ad
 800b258:	0800b2c1 	.word	0x0800b2c1
 800b25c:	0800b23d 	.word	0x0800b23d
 800b260:	0800b23d 	.word	0x0800b23d
 800b264:	0800b23d 	.word	0x0800b23d
 800b268:	0800b23d 	.word	0x0800b23d
 800b26c:	0800b2c1 	.word	0x0800b2c1
 800b270:	0800b23d 	.word	0x0800b23d
 800b274:	0800b23d 	.word	0x0800b23d
 800b278:	0800b23d 	.word	0x0800b23d
 800b27c:	0800b23d 	.word	0x0800b23d
 800b280:	0800b3c5 	.word	0x0800b3c5
 800b284:	0800b2ed 	.word	0x0800b2ed
 800b288:	0800b37f 	.word	0x0800b37f
 800b28c:	0800b23d 	.word	0x0800b23d
 800b290:	0800b23d 	.word	0x0800b23d
 800b294:	0800b3e7 	.word	0x0800b3e7
 800b298:	0800b23d 	.word	0x0800b23d
 800b29c:	0800b2ed 	.word	0x0800b2ed
 800b2a0:	0800b23d 	.word	0x0800b23d
 800b2a4:	0800b23d 	.word	0x0800b23d
 800b2a8:	0800b387 	.word	0x0800b387
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	1d1a      	adds	r2, r3, #4
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	602a      	str	r2, [r5, #0]
 800b2b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e09f      	b.n	800b400 <_printf_i+0x1ec>
 800b2c0:	6820      	ldr	r0, [r4, #0]
 800b2c2:	682b      	ldr	r3, [r5, #0]
 800b2c4:	0607      	lsls	r7, r0, #24
 800b2c6:	f103 0104 	add.w	r1, r3, #4
 800b2ca:	6029      	str	r1, [r5, #0]
 800b2cc:	d501      	bpl.n	800b2d2 <_printf_i+0xbe>
 800b2ce:	681e      	ldr	r6, [r3, #0]
 800b2d0:	e003      	b.n	800b2da <_printf_i+0xc6>
 800b2d2:	0646      	lsls	r6, r0, #25
 800b2d4:	d5fb      	bpl.n	800b2ce <_printf_i+0xba>
 800b2d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b2da:	2e00      	cmp	r6, #0
 800b2dc:	da03      	bge.n	800b2e6 <_printf_i+0xd2>
 800b2de:	232d      	movs	r3, #45	; 0x2d
 800b2e0:	4276      	negs	r6, r6
 800b2e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2e6:	485a      	ldr	r0, [pc, #360]	; (800b450 <_printf_i+0x23c>)
 800b2e8:	230a      	movs	r3, #10
 800b2ea:	e012      	b.n	800b312 <_printf_i+0xfe>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	6820      	ldr	r0, [r4, #0]
 800b2f0:	1d19      	adds	r1, r3, #4
 800b2f2:	6029      	str	r1, [r5, #0]
 800b2f4:	0605      	lsls	r5, r0, #24
 800b2f6:	d501      	bpl.n	800b2fc <_printf_i+0xe8>
 800b2f8:	681e      	ldr	r6, [r3, #0]
 800b2fa:	e002      	b.n	800b302 <_printf_i+0xee>
 800b2fc:	0641      	lsls	r1, r0, #25
 800b2fe:	d5fb      	bpl.n	800b2f8 <_printf_i+0xe4>
 800b300:	881e      	ldrh	r6, [r3, #0]
 800b302:	4853      	ldr	r0, [pc, #332]	; (800b450 <_printf_i+0x23c>)
 800b304:	2f6f      	cmp	r7, #111	; 0x6f
 800b306:	bf0c      	ite	eq
 800b308:	2308      	moveq	r3, #8
 800b30a:	230a      	movne	r3, #10
 800b30c:	2100      	movs	r1, #0
 800b30e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b312:	6865      	ldr	r5, [r4, #4]
 800b314:	60a5      	str	r5, [r4, #8]
 800b316:	2d00      	cmp	r5, #0
 800b318:	bfa2      	ittt	ge
 800b31a:	6821      	ldrge	r1, [r4, #0]
 800b31c:	f021 0104 	bicge.w	r1, r1, #4
 800b320:	6021      	strge	r1, [r4, #0]
 800b322:	b90e      	cbnz	r6, 800b328 <_printf_i+0x114>
 800b324:	2d00      	cmp	r5, #0
 800b326:	d04b      	beq.n	800b3c0 <_printf_i+0x1ac>
 800b328:	4615      	mov	r5, r2
 800b32a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b32e:	fb03 6711 	mls	r7, r3, r1, r6
 800b332:	5dc7      	ldrb	r7, [r0, r7]
 800b334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b338:	4637      	mov	r7, r6
 800b33a:	42bb      	cmp	r3, r7
 800b33c:	460e      	mov	r6, r1
 800b33e:	d9f4      	bls.n	800b32a <_printf_i+0x116>
 800b340:	2b08      	cmp	r3, #8
 800b342:	d10b      	bne.n	800b35c <_printf_i+0x148>
 800b344:	6823      	ldr	r3, [r4, #0]
 800b346:	07de      	lsls	r6, r3, #31
 800b348:	d508      	bpl.n	800b35c <_printf_i+0x148>
 800b34a:	6923      	ldr	r3, [r4, #16]
 800b34c:	6861      	ldr	r1, [r4, #4]
 800b34e:	4299      	cmp	r1, r3
 800b350:	bfde      	ittt	le
 800b352:	2330      	movle	r3, #48	; 0x30
 800b354:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b35c:	1b52      	subs	r2, r2, r5
 800b35e:	6122      	str	r2, [r4, #16]
 800b360:	f8cd a000 	str.w	sl, [sp]
 800b364:	464b      	mov	r3, r9
 800b366:	aa03      	add	r2, sp, #12
 800b368:	4621      	mov	r1, r4
 800b36a:	4640      	mov	r0, r8
 800b36c:	f7ff fee4 	bl	800b138 <_printf_common>
 800b370:	3001      	adds	r0, #1
 800b372:	d14a      	bne.n	800b40a <_printf_i+0x1f6>
 800b374:	f04f 30ff 	mov.w	r0, #4294967295
 800b378:	b004      	add	sp, #16
 800b37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	f043 0320 	orr.w	r3, r3, #32
 800b384:	6023      	str	r3, [r4, #0]
 800b386:	4833      	ldr	r0, [pc, #204]	; (800b454 <_printf_i+0x240>)
 800b388:	2778      	movs	r7, #120	; 0x78
 800b38a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b38e:	6823      	ldr	r3, [r4, #0]
 800b390:	6829      	ldr	r1, [r5, #0]
 800b392:	061f      	lsls	r7, r3, #24
 800b394:	f851 6b04 	ldr.w	r6, [r1], #4
 800b398:	d402      	bmi.n	800b3a0 <_printf_i+0x18c>
 800b39a:	065f      	lsls	r7, r3, #25
 800b39c:	bf48      	it	mi
 800b39e:	b2b6      	uxthmi	r6, r6
 800b3a0:	07df      	lsls	r7, r3, #31
 800b3a2:	bf48      	it	mi
 800b3a4:	f043 0320 	orrmi.w	r3, r3, #32
 800b3a8:	6029      	str	r1, [r5, #0]
 800b3aa:	bf48      	it	mi
 800b3ac:	6023      	strmi	r3, [r4, #0]
 800b3ae:	b91e      	cbnz	r6, 800b3b8 <_printf_i+0x1a4>
 800b3b0:	6823      	ldr	r3, [r4, #0]
 800b3b2:	f023 0320 	bic.w	r3, r3, #32
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	2310      	movs	r3, #16
 800b3ba:	e7a7      	b.n	800b30c <_printf_i+0xf8>
 800b3bc:	4824      	ldr	r0, [pc, #144]	; (800b450 <_printf_i+0x23c>)
 800b3be:	e7e4      	b.n	800b38a <_printf_i+0x176>
 800b3c0:	4615      	mov	r5, r2
 800b3c2:	e7bd      	b.n	800b340 <_printf_i+0x12c>
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	6826      	ldr	r6, [r4, #0]
 800b3c8:	6961      	ldr	r1, [r4, #20]
 800b3ca:	1d18      	adds	r0, r3, #4
 800b3cc:	6028      	str	r0, [r5, #0]
 800b3ce:	0635      	lsls	r5, r6, #24
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	d501      	bpl.n	800b3d8 <_printf_i+0x1c4>
 800b3d4:	6019      	str	r1, [r3, #0]
 800b3d6:	e002      	b.n	800b3de <_printf_i+0x1ca>
 800b3d8:	0670      	lsls	r0, r6, #25
 800b3da:	d5fb      	bpl.n	800b3d4 <_printf_i+0x1c0>
 800b3dc:	8019      	strh	r1, [r3, #0]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	6123      	str	r3, [r4, #16]
 800b3e2:	4615      	mov	r5, r2
 800b3e4:	e7bc      	b.n	800b360 <_printf_i+0x14c>
 800b3e6:	682b      	ldr	r3, [r5, #0]
 800b3e8:	1d1a      	adds	r2, r3, #4
 800b3ea:	602a      	str	r2, [r5, #0]
 800b3ec:	681d      	ldr	r5, [r3, #0]
 800b3ee:	6862      	ldr	r2, [r4, #4]
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f7f4 ff14 	bl	8000220 <memchr>
 800b3f8:	b108      	cbz	r0, 800b3fe <_printf_i+0x1ea>
 800b3fa:	1b40      	subs	r0, r0, r5
 800b3fc:	6060      	str	r0, [r4, #4]
 800b3fe:	6863      	ldr	r3, [r4, #4]
 800b400:	6123      	str	r3, [r4, #16]
 800b402:	2300      	movs	r3, #0
 800b404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b408:	e7aa      	b.n	800b360 <_printf_i+0x14c>
 800b40a:	6923      	ldr	r3, [r4, #16]
 800b40c:	462a      	mov	r2, r5
 800b40e:	4649      	mov	r1, r9
 800b410:	4640      	mov	r0, r8
 800b412:	47d0      	blx	sl
 800b414:	3001      	adds	r0, #1
 800b416:	d0ad      	beq.n	800b374 <_printf_i+0x160>
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	079b      	lsls	r3, r3, #30
 800b41c:	d413      	bmi.n	800b446 <_printf_i+0x232>
 800b41e:	68e0      	ldr	r0, [r4, #12]
 800b420:	9b03      	ldr	r3, [sp, #12]
 800b422:	4298      	cmp	r0, r3
 800b424:	bfb8      	it	lt
 800b426:	4618      	movlt	r0, r3
 800b428:	e7a6      	b.n	800b378 <_printf_i+0x164>
 800b42a:	2301      	movs	r3, #1
 800b42c:	4632      	mov	r2, r6
 800b42e:	4649      	mov	r1, r9
 800b430:	4640      	mov	r0, r8
 800b432:	47d0      	blx	sl
 800b434:	3001      	adds	r0, #1
 800b436:	d09d      	beq.n	800b374 <_printf_i+0x160>
 800b438:	3501      	adds	r5, #1
 800b43a:	68e3      	ldr	r3, [r4, #12]
 800b43c:	9903      	ldr	r1, [sp, #12]
 800b43e:	1a5b      	subs	r3, r3, r1
 800b440:	42ab      	cmp	r3, r5
 800b442:	dcf2      	bgt.n	800b42a <_printf_i+0x216>
 800b444:	e7eb      	b.n	800b41e <_printf_i+0x20a>
 800b446:	2500      	movs	r5, #0
 800b448:	f104 0619 	add.w	r6, r4, #25
 800b44c:	e7f5      	b.n	800b43a <_printf_i+0x226>
 800b44e:	bf00      	nop
 800b450:	0800b5b5 	.word	0x0800b5b5
 800b454:	0800b5c6 	.word	0x0800b5c6

0800b458 <memmove>:
 800b458:	4288      	cmp	r0, r1
 800b45a:	b510      	push	{r4, lr}
 800b45c:	eb01 0402 	add.w	r4, r1, r2
 800b460:	d902      	bls.n	800b468 <memmove+0x10>
 800b462:	4284      	cmp	r4, r0
 800b464:	4623      	mov	r3, r4
 800b466:	d807      	bhi.n	800b478 <memmove+0x20>
 800b468:	1e43      	subs	r3, r0, #1
 800b46a:	42a1      	cmp	r1, r4
 800b46c:	d008      	beq.n	800b480 <memmove+0x28>
 800b46e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b472:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b476:	e7f8      	b.n	800b46a <memmove+0x12>
 800b478:	4402      	add	r2, r0
 800b47a:	4601      	mov	r1, r0
 800b47c:	428a      	cmp	r2, r1
 800b47e:	d100      	bne.n	800b482 <memmove+0x2a>
 800b480:	bd10      	pop	{r4, pc}
 800b482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b48a:	e7f7      	b.n	800b47c <memmove+0x24>

0800b48c <memcpy>:
 800b48c:	440a      	add	r2, r1
 800b48e:	4291      	cmp	r1, r2
 800b490:	f100 33ff 	add.w	r3, r0, #4294967295
 800b494:	d100      	bne.n	800b498 <memcpy+0xc>
 800b496:	4770      	bx	lr
 800b498:	b510      	push	{r4, lr}
 800b49a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b49e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4a2:	4291      	cmp	r1, r2
 800b4a4:	d1f9      	bne.n	800b49a <memcpy+0xe>
 800b4a6:	bd10      	pop	{r4, pc}

0800b4a8 <_realloc_r>:
 800b4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ac:	4680      	mov	r8, r0
 800b4ae:	4614      	mov	r4, r2
 800b4b0:	460e      	mov	r6, r1
 800b4b2:	b921      	cbnz	r1, 800b4be <_realloc_r+0x16>
 800b4b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	f7ff bba9 	b.w	800ac10 <_malloc_r>
 800b4be:	b92a      	cbnz	r2, 800b4cc <_realloc_r+0x24>
 800b4c0:	f7ff fc96 	bl	800adf0 <_free_r>
 800b4c4:	4625      	mov	r5, r4
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4cc:	f000 f81b 	bl	800b506 <_malloc_usable_size_r>
 800b4d0:	4284      	cmp	r4, r0
 800b4d2:	4607      	mov	r7, r0
 800b4d4:	d802      	bhi.n	800b4dc <_realloc_r+0x34>
 800b4d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4da:	d812      	bhi.n	800b502 <_realloc_r+0x5a>
 800b4dc:	4621      	mov	r1, r4
 800b4de:	4640      	mov	r0, r8
 800b4e0:	f7ff fb96 	bl	800ac10 <_malloc_r>
 800b4e4:	4605      	mov	r5, r0
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d0ed      	beq.n	800b4c6 <_realloc_r+0x1e>
 800b4ea:	42bc      	cmp	r4, r7
 800b4ec:	4622      	mov	r2, r4
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	bf28      	it	cs
 800b4f2:	463a      	movcs	r2, r7
 800b4f4:	f7ff ffca 	bl	800b48c <memcpy>
 800b4f8:	4631      	mov	r1, r6
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	f7ff fc78 	bl	800adf0 <_free_r>
 800b500:	e7e1      	b.n	800b4c6 <_realloc_r+0x1e>
 800b502:	4635      	mov	r5, r6
 800b504:	e7df      	b.n	800b4c6 <_realloc_r+0x1e>

0800b506 <_malloc_usable_size_r>:
 800b506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b50a:	1f18      	subs	r0, r3, #4
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	bfbc      	itt	lt
 800b510:	580b      	ldrlt	r3, [r1, r0]
 800b512:	18c0      	addlt	r0, r0, r3
 800b514:	4770      	bx	lr
	...

0800b518 <_init>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	bf00      	nop
 800b51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b51e:	bc08      	pop	{r3}
 800b520:	469e      	mov	lr, r3
 800b522:	4770      	bx	lr

0800b524 <_fini>:
 800b524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b526:	bf00      	nop
 800b528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b52a:	bc08      	pop	{r3}
 800b52c:	469e      	mov	lr, r3
 800b52e:	4770      	bx	lr
